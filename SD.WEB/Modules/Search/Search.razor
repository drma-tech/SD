@page "/search/{SearchContent}"
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@inherits PageCore<Search>

@inject TmdbSearchApi TmdbSearch
@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi

<SeoHeader Title="Search" Index="false"></SeoHeader>

<GoogleAdSense Settings="@Settings" Principal="@Principal" Section="@GoogleAdSense.AdUnit.Main"></GoogleAdSense>

<MudTextField T="string" Label="@GlobalTranslations.TypeSomething" @bind-Text="@SearchContent" Immediate="true" OnKeyDown="@KeyPress"
              AdornmentIcon="@IconsFA.Solid.Icon("magnifying-glass").Font" Adornment="Adornment.End" AdornmentColor="Color.Primary" Variant="Variant.Outlined"
              OnAdornmentClick="@(() => Navigation.NavigateTo($"/search/{SearchContent}"))" Class="mb-4">
</MudTextField>

<RenderControl Core="Core" Model="Items" ExpressionEmpty="@((HashSet<MediaDetail> list) => list.Empty())" CustomMessageWarning="@GlobalTranslations.SearchReturnedNothing">
    <MediaListFull MediaListApi="TmdbSearch" StringParameters="@StringParameters" Items="Items" ShowHead="false" FullPage="true"
                   Watched="Watched" Watching="Watching" Wish="Wish" IsAuthenticated="IsAuthenticated">
    </MediaListFull>
</RenderControl>

@code {
    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    [Parameter] public string? SearchContent { get; set; }

    private HashSet<MediaDetail> Items { get; set; } = [];
    private RenderControlCore<HashSet<MediaDetail>> Core { get; } = new();
    private Dictionary<string, string> StringParameters => new() { { "query", SearchContent ?? "" } };

    protected override void OnInitialized()
    {
        WatchedApi.DataChanged += model =>
        {
            Watched = model;
            StateHasChanged();
        };
        WatchingApi.DataChanged += model =>
        {
            Watching = model;
            StateHasChanged();
        };
        WishApi.DataChanged += model =>
        {
            Wish = model;
            StateHasChanged();
        };
    }

    protected override async Task LoadDataRender()
    {
        Core?.LoadingStarted?.Invoke();
        var result = await TmdbSearch.GetList(Items, null, StringParameters);
        Items = result.list;
        Core?.LoadingFinished?.Invoke(Items);

        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, null), WatchingApi.Get(IsAuthenticated, null), WishApi.Get(IsAuthenticated, null));

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    private void KeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            Navigation.NavigateTo($"/search/{SearchContent}", true);
        }
    }

}