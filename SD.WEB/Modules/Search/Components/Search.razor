@page "/search/{SearchContent}"

@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Suggestions.Components
@using SD.WEB.Modules.Suggestions.Core;
@inherits PageCore<Search>

@inject TmdbSearchApi TmdbSearch
@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi

<SeoHeader Title="Search" Url="/search"></SeoHeader>

<Row VerticalGutter="4" HorizontalGutter="4" Margin="Margin.Is2.FromBottom">
    <Column>
        <TextEdit @bind-Text="@SearchContent" Placeholder="@GlobalTranslations.TypeSomething" Size="Size.Small" KeyPress="KeyPress" />
    </Column>
    <Column ColumnSize="ColumnSize.IsAuto">
        <Button Color="Color.Primary" Block="true" Disabled="string.IsNullOrEmpty(SearchContent)" Size="Size.Small">
            @WEB.Resources.Button.Search
        </Button>
    </Column>
</Row>

<RenderControl Core="Core" Model="Items" ExpressionEmpty="@((HashSet<MediaDetail> list) => list.Empty())">
    <MediaListFull @ref="MediaListFull" MediaListApi="TmdbSearch" StringParameters="@StringParameters" Items="Items" ShowHead="false"
                   Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaListFull>
</RenderControl>

@code {
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    [Parameter] public string? SearchContent { get; set; }

    private HashSet<MediaDetail> Items { get; set; } = new();
    private RenderControlCore<HashSet<MediaDetail>> Core { get; set; } = new();
    private MediaListFull? MediaListFull;
    private Dictionary<string, string> StringParameters => new Dictionary<string, string>() { { "query", SearchContent ?? "" } };

    protected override void OnInitialized()
    {
        WatchedApi.DataChanged += (WatchedList? model) => { Watched = model; StateHasChanged(); };
        WatchingApi.DataChanged += (WatchingList? model) => { Watching = model; StateHasChanged(); };
        WishApi.DataChanged += (WishList? model) => { Wish = model; StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        Core?.LoadingStarted?.Invoke();
        var result = await TmdbSearch.GetList(Items, null, StringParameters);
        Items = result.list;
        Core?.LoadingFinished?.Invoke(Items);

        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, null), WatchingApi.Get(IsAuthenticated, null), WishApi.Get(IsAuthenticated, null));
    }   

    private void KeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            Navigation.NavigateTo($"/search/{SearchContent}", true);
        }
    }
}
