@page "/certified-sd/{type}"

@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@inherits PageCore<CertifiedSD>

<SeoHeader Title="Certified by SD" Keywords="@(new[] { "Certified by SD" })" Url="@($"/certified-sd/{Type}")"></SeoHeader>

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <div style="text-align: center;">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5145928155833172" data-ad-slot="6686117213"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
}

@if (MediaType == MediaType.movie)
{
    <MediaListFull MediaListApi="TmdbListApi" List="@EnumLists.CertifiedStreamingDiscoveryMovies" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
                   ShowPrivateAction="true" IsAuthenticated="IsAuthenticated" IconImage="icon/icon-71.png" FullPage="true">
    </MediaListFull>
}
else
{
    <MediaListFull MediaListApi="TmdbListApi" List="@EnumLists.CertifiedStreamingDiscoveryShows" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
                   ShowPrivateAction="true" IsAuthenticated="IsAuthenticated" IconImage="icon/icon-71.png" FullPage="true">
    </MediaListFull>
}

@code {
    [Parameter] public string? Type { get; set; }

    public MediaType MediaType => Enum.Parse<MediaType>(Type ?? "movie");

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }

}