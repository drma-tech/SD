@using SD.Shared.Core.Models
@using SD.Shared.Models.Auth
@using System.Security.Claims
@using SD.WEB.Modules.Profile.Resources
@inherits ComponentCore<ProfilePopup>

@inject IMessageService MessageService
@inject IHttpClientFactory factory

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">
        @Translations.MyProfile
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <Card Margin="Margin.Is2.FromBottom">
        <CardHeader>
            @Translations.AccessInformation
        </CardHeader>
        <CardBody>
            <Fields>
                <Field ColumnSize="ColumnSize.Is4.OnDesktop">
                    <FieldLabel>
                        @Translations.IdentityProvider
                    </FieldLabel>
                    <TextEdit Text="@principal?.IdentityProvider" Disabled="true" />
                </Field>
                <Field ColumnSize="ColumnSize.Is4.OnDesktop">
                    <FieldLabel>
                        @Translations.Identification
                    </FieldLabel>
                    <TextEdit Text="@principal?.UserDetails" Disabled="true" />
                </Field>
                <Field ColumnSize="ColumnSize.Is4.OnDesktop">
                    <FieldLabel>
                        @Translations.Email
                    </FieldLabel>
                    <TextEdit Text="@principal?.Email" Disabled="true" />
                </Field>
            </Fields>
        </CardBody>
    </Card>
    <Card Margin="Margin.Is2.FromBottom">
        <CardHeader>
            @Translations.Actions
        </CardHeader>
        <CardBody>
            <Button Color="Color.Danger" Clicked="async()=>{ await DeleteAccount(principal?.IdentityProvider); }">
                <Blazorise.Icon Name="FontAwesomeIcons.UserSlash" /> @Translations.DeleteAccount
            </Button>
        </CardBody>
    </Card>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
        @WEB.Resources.Button.Close
    </Button>
</ModalFooter>

@code {
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; } = false;

    private ClientePrincipal? principal { get; set; }

    protected override async Task LoadDataRender()
    {
        principal = await PrincipalApi.Get(IsAuthenticated);
    }

    private async Task DeleteAccount(string? provider)
    {
        try
        {
            if (await MessageService.Confirm(GlobalTranslations.SureDeleteAccount, WEB.Resources.SeoTranslations.AppName, (opt) => { opt.ShowMessageIcon = false; }))
            {
                //remove data from cosmos db
                await PrincipalApi.Remove();

                //close popup
                await ModalService.Hide();

                //remove data from azure
                Navigation.NavigateTo("/.auth/purge/" + provider);

                //close session
                Navigation.NavigateTo("/.auth/logout", forceLoad: true);
            }
            else
            {
                await Toast.Warning(GlobalTranslations.OperationCanceled);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}
