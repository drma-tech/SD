@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SD.WEB.Modules.Auth.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources

@inherits ComponentCore<ProfilePopup>
@inject IJSRuntime JsRuntime

@inject LoginApi LoginApi
@inject MyProvidersApi MyProvidersApi
@inject MySuggestionsApi MySuggestionsApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<MudDialog Style="width: 100%">
    <DialogContent>
        <MudCard Outlined="true">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField T="@string" Label="@Translations.IdentityProvider" Text="@Principal?.IdentityProvider" Variant="Variant.Filled" ReadOnly="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="@string" Label="@Translations.Identification" Text="@Principal?.UserId" Variant="Variant.Filled" ReadOnly="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="@string" Label="Display Name" Text="@Principal?.DisplayName" Variant="Variant.Filled" ReadOnly="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="@string" Label="@Translations.Email" Text="@Principal?.Email" Variant="Variant.Filled" ReadOnly="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="@DownloadData" Disabled="Principal == null" Size="AppStateStatic.Size">
                            Download Data
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="@DeleteAccount" Color="Color.Error" Size="AppStateStatic.Size">
                            @Translations.DeleteAccount
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })" Size="AppStateStatic.Size">
            @Button.Close
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    private AuthPrincipal? Principal { get; set; }

    protected override async Task LoadNonEssentialDataAsync()
    {
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    private async Task DownloadData()
    {
        try
        {
            var data = new SuperData() { Principal = Principal };

            data.Login = await LoginApi.Get(IsAuthenticated);
            data.Providers = await MyProvidersApi.Get(IsAuthenticated, null);
            if (Principal!.AuthPaddle?.ActiveProduct is null or AccountProduct.Basic) data.Suggestions = null;
            else data.Suggestions = await MySuggestionsApi.Get(Principal!.AuthPaddle?.ActiveProduct, IsAuthenticated, null);
            data.WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
            data.WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
            data.WishList = await WishListApi.Get(IsAuthenticated, null);

            var fileName = $"{SeoTranslations.AppName.ToSlug()}_{Principal!.IdentityProvider}_{DateTime.UtcNow:yyyyMMdd_HHmmss}.json";
            await JsRuntime.InvokeVoidAsync("jsSaveAsFile", fileName, "application/json", data.ConvertFromObjectToBytes());
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private async Task DeleteAccount()
    {
        try
        {
            if (Principal?.AuthPaddle is { IsPaidUser: true })
            {
                await DialogService.ShowMessageBox("You still have an active subscription", "Please cancel your subscription before deleting your profile.");
                return;
            }

            if (await DialogService.ShowMessageBox(SeoTranslations.AppName, GlobalTranslations.SureDeleteAccount, Button.Ok, Button.Cancel) ?? false)
            {
                //remove data from cosmos db
                await PrincipalApi.Remove();

                //close popup
                MudDialog?.Close();

                //remove authentication data from azure (todo: its not working)
                // Navigation.NavigateTo("/.auth/purge/aad");

                //close current login session
                Navigation.NavigateToLogout("/authentication/logout");
            }
            else
            {
                Snackbar.Add(GlobalTranslations.OperationCanceled, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

}
