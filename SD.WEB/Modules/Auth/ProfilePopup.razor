@using SD.WEB.Modules.Profile.Resources

@inherits ComponentCore<ProfilePopup>

<MudDialog Style="width: 100%">
    <DialogContent>
        <MudCard Outlined="true">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField T="@string" Label="@Translations.IdentityProvider" Text="@Principal?.IdentityProvider" Variant="Variant.Filled" ReadOnly="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="@string" Label="@Translations.Identification" Text="@Principal?.UserDetails" Variant="Variant.Filled" ReadOnly="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="@string" Label="@Translations.Email" Text="@Principal?.Email" Variant="Variant.Filled" ReadOnly="true"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="@DeleteAccount">
            @Translations.DeleteAccount
        </MudButton>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })">
            @Button.Close
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    private ClientePrincipal? Principal { get; set; }

    protected override async Task LoadDataRender()
    {
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    private async Task DeleteAccount()
    {
        try
        {
            if (Principal?.ClientePaddle is { IsPaidUser: true })
            {
                await DialogService.ShowMessageBox("You still have an active subscription", "Please cancel your subscription before deleting your profile.");
                return;
            }

            if (await DialogService.ShowMessageBox(SeoTranslations.AppName, GlobalTranslations.SureDeleteAccount) ?? false)
            {
                //remove data from cosmos db
                await PrincipalApi.Remove();

                //close popup
                MudDialog?.Close();

                //remove data from azure
                Navigation.NavigateTo("/.auth/purge/" + Principal?.IdentityProvider);

                //close session
                Navigation.NavigateTo("/.auth/logout", true);
            }
            else
            {
                Snackbar.Add(GlobalTranslations.OperationCanceled, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

}