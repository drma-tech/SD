@page "/login-success"
@using System.Security.Claims
@using SD.WEB.Modules.Auth.Core
@using SD.WEB.Modules.Auth.Resources
@inherits PageCore<LoginSuccess>

@inject LoginApi LoginApi
@inject IJSRuntime JsRuntime

<MudAlert Variant="Variant.Filled" Severity="Severity.Warning" Dense="true" Icon="@IconsFA.Solid.Icon("spinner").WithAnimation(IconAnimation.Spin).Font">
    @Translations.AuthenticationInProgress
</MudAlert>

@code {
    private ClientePrincipal? Principal { get; set; } = new();

    protected override async Task LoadDataRender()
    {
        if (IsAuthenticated)
        {
            Principal = await PrincipalApi.Get(IsAuthenticated);

            if (Principal == null && User != null)
            {
                Principal = new ClientePrincipal
                {
                    IdentityProvider = User.FindFirst("http://schemas.microsoft.com/identity/claims/identityprovider")?.Value,
                    DisplayName = User.FindFirst("name")?.Value,
                    Email = User.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value                 
                };

                Principal = await PrincipalApi.Add(Principal);
            }

            var platform = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "platform");

            await LoginApi.Add(platform);

            Navigation.NavigateTo("/profile");
        }
    }

}
