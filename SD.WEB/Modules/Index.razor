@page "/"
@page "/index"

@using SD.WEB.Modules.EditorsChoice.Components
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.AwardsOfTheYear.Components
@using SD.WEB.Modules.Subscription.Core
@using SD.WEB.Modules.Trailers.Components
@using SD.WEB.Modules.News.Components
@inherits PageCore<Index>

@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@inject PaddleConfigurationApi ConfigurationApi
@inject IpInfoApi IpInfoApi
@inject IJSRuntime JsRuntime

<SeoHeader Title="@SeoTranslations.AppSubtitle" Description="@SeoTranslations.AppDescription" Url="/" Keywords="@(["streaming"])"></SeoHeader>
<PageHeader Image="icon/icon-71.png" Title="@SeoTranslations.AppName" Subtitle="@SeoTranslations.AppSubtitle" Description="@SeoTranslations.AppDescription">
    <ActionFragment>
        @if (SubscriptionAllowed)
        {
            <MudTooltip Text="@Modules.Profile.Resources.Translations.Subscription">
                <MudFab Color="Color.Primary" StartIcon="@IconsFA.Solid.Icon("gem").WithAnimation(IconAnimation.Fade).Font" IconColor="Color.Warning" Size="Size.Small" OnClick="@OpenSubscription" />
            </MudTooltip>
        }
    </ActionFragment>
</PageHeader>

<MudTextField T="string" Label="@GlobalTranslations.TypeSomething" @bind-Text="@Search" Immediate="true" OnKeyDown="@KeyPress" Class="mb-4"
              AdornmentIcon="@IconsFA.Solid.Icon("magnifying-glass").Font" Adornment="Adornment.End" AdornmentColor="Color.Primary" Variant="Variant.Outlined"
              OnAdornmentClick="@(() =>{ if (Search.NotEmpty()) Navigation.NavigateTo($"/search/{Search}", true); })">
</MudTextField>

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Index" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<PopularIndexComponent WatchedList="Watched" WatchingList="Watching" WishList="Wish" IsAuthenticated="IsAuthenticated"></PopularIndexComponent>

<EditorsChoiceComponent Watched="Watched" Watching="Watching" Wish="Wish" IsAuthenticated="IsAuthenticated"></EditorsChoiceComponent>

<AwardsOfTheYearComponent Watched="Watched" Watching="Watching" Wish="Wish" IsAuthenticated="IsAuthenticated"></AwardsOfTheYearComponent>

<MudGrid Spacing="3">
    <MudItem xs="12" sm="6" md="7">
        <TrailersComponent></TrailersComponent>
    </MudItem>
    <MudItem xs="12" sm="6" md="5">
        <NewsComponent></NewsComponent>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "language")]
    public string? Language { get; set; }

    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public string? Search { get; set; }
    private bool SubscriptionAllowed { get; set; } = true;

    private readonly Dictionary<string, string> _iosAllowedCountries = new()
    {
        { "US", "United States" }
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedApi.DataChanged += model =>
        {
            Watched = model;
            CoreWatched.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WatchingApi.DataChanged += model =>
        {
            Watching = model;
            CoreWatching.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WishApi.DataChanged += model =>
        {
            Wish = model;
            CoreWish.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        var country = await AppStateStatic.GetCountry(IpInfoApi, JsRuntime);
        var platform = await AppStateStatic.GetPlatform(JsRuntime);

        if (country.NotEmpty() && platform == SD.Shared.Enums.Platform.ios)
        {
            //https://developer.apple.com/app-store/review/guidelines/#link-to-other-purchase-methods
            SubscriptionAllowed = _iosAllowedCountries.ContainsKey(country);
        }

        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));
    }

    private void KeyPress(KeyboardEventArgs args)
    {
        if (Search.Empty()) return;

        if (args.Key == "Enter")
        {
            Navigation.NavigateTo($"/search/{Search}", true);
        }
    }

    private async Task OpenSubscription()
    {
        var config = await ConfigurationApi.GetConfigurations();
        if (config == null) throw new NotificationException("server communication error");

        await JsRuntime.InvokeVoidAsync("startPaddle", config.Token);

        await DialogService.SubscriptionPopup(IsAuthenticated);
    }

}