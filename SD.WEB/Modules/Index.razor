@page "/"
@page "/index"
<SeoHeader Title="Home" Description="@SeoTranslations.Description" Url="/"></SeoHeader>
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.CertifiedSD.Components
@using SD.WEB.Modules.AwardsOfTheYear.Components
@using SD.WEB.Modules.Trailers.Components
@using SD.WEB.Modules.News.Components
@inherits PageCore<Index>

@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@inject IJSRuntime JsRuntime

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <div style="text-align: center">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5922021468622891" data-ad-slot="8246651489"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
}

<MudTextField T="string" Label="@GlobalTranslations.TypeSomething" @bind-Text="@Search" Immediate="true" OnKeyDown="@KeyPress"
              AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.End" AdornmentColor="Color.Primary" Variant="Variant.Outlined" Margin="Margin.Dense"
              OnAdornmentClick="@(() =>{ if (Search.NotEmpty()) Navigation.NavigateTo($"/search/{Search}"); })" Class="mb-3">
</MudTextField>

<PopularIndexComponent WatchedList="Watched" WatchingList="Watching" WishList="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></PopularIndexComponent>

<CertifiedSDComponent Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></CertifiedSDComponent>

<AwardsOfTheYearComponent></AwardsOfTheYearComponent>

<MudGrid Spacing="4">
    <MudItem xs="12" sm="6" md="7">
        <TrailersComponent></TrailersComponent>
    </MudItem>
    <MudItem xs="12" sm="6" md="5">
        <NewsComponent></NewsComponent>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "language")]
    public string? Language { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "platform")]
    public string? Platform { get; set; }

    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public string? Search { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedApi.DataChanged += model =>
        {
            Watched = model;
            CoreWatched.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WatchingApi.DataChanged += model =>
        {
            Watching = model;
            CoreWatching.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WishApi.DataChanged += model =>
        {
            Wish = model;
            CoreWish.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);

        if (Platform.NotEmpty())
        {
            await JsRuntime.InvokeAsync<string>("SetLocalStorage", "platform", Platform);
        }
        else
        {
            await JsRuntime.InvokeAsync<string>("TryDetectPlatform");
        }
    }

    protected override async Task LoadDataRender()
    {
        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));
    }

    private void KeyPress(KeyboardEventArgs args)
    {
        if (Search.Empty()) return;

        if (args.Key == "Enter")
        {
            Navigation.NavigateTo($"/search/{Search}");
        }
    }

}