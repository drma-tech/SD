@page "/collections/empire"
<SeoHeader Title="Collections | Empire" Keywords="@(new[] { "Empire" })" Url="/collections/empire"></SeoHeader>
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Collections.Components
@inherits PageCore<Empire>
@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<HeadPage Title="Empire" ImageSource="logo/empire.png" Text="Find the latest film reviews, news and celebrity interviews from Empire, the world's biggest movie destination. Discover our new TV and gaming content."
          Link="https://www.empireonline.com/" IsAuthenticated="IsAuthenticated">
</HeadPage>

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <div style="text-align: center;">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5145928155833172" data-ad-slot="6686117213"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
}

<MediaList MediaListApi="TmdbListApi" List="@EnumLists.EmpireThe100BestMoviesOfAllTime" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
           ShowPrivateAction="true" IsAuthenticated="IsAuthenticated">
</MediaList>
<MediaList MediaListApi="TmdbListApi" List="@EnumLists.EmpireThe100BestTvShowsOfAllTime" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
           ShowPrivateAction="true" IsAuthenticated="IsAuthenticated">
</MediaList>

@code {
    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }

}