@page "/collections/grossing-movies"
<SeoHeader Title="Collections | Highest grossing movies" Keywords="@(new[] { "Highest grossing movies" })" Url="/collections/grossing-movies"></SeoHeader>
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Collections.Components
@inherits PageCore<UpcomingNetflix>
@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <div style="text-align: center;">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5145928155833172" data-ad-slot="6686117213"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
}

<MediaListFull MediaListApi="TmdbListApi" List="@EnumLists.GrossingMovies" CommentsSeparator="|" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
               ShowPrivateAction="true" IsAuthenticated="IsAuthenticated" FullPage="true">
</MediaListFull>

@code {
    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };
    }

    protected override async Task LoadDataRender()
    {
        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);

        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }

}