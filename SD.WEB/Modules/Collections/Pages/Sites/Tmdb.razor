@page "/collections/tmdb"
<SeoHeader Title="Collections | TMDB" Description="@SD.WEB.Resources.Credit.TMDB" Keywords="@(new[] { "TMDB" })" Url="/collections/tmdb"></SeoHeader>
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Platform.Resources
@using SD.WEB.Modules.Collections.Components
@using SD.WEB.Modules.Subscription.Core
@inherits PageCore<Tmdb>
@inject TmdbPopularApi TmdbPopularApi
@inject TmdbTopRatedApi TmdbTopRatedApi
@inject TmdbUpcomingApi TmdbUpcomingApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi
@inject IpInfoApi IpInfoApi
@inject IJSRuntime JsRuntime

<PageHeader Title="TMDB" Image="logo/tmdb.png" Description="@SD.WEB.Resources.Credit.TMDB" Link="https://www.themoviedb.org/"></PageHeader>

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Collections" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<MediaList TitleHead="@Translations.Popular" MediaListApi="TmdbPopularApi" CustomExpand="@("/collections/tmdb/popular/{0}")" ShowFilter="true"
           Watched="WatchedList" Watching="WatchingList" Wish="WishList" IsAuthenticated="IsAuthenticated">
</MediaList>
<MediaList TitleHead="@($"{Translations.TopRated} ({Region})")" MediaListApi="TmdbTopRatedApi" CustomExpand="@("/collections/tmdb/top/{0}")" ShowFilter="true"
           DetectRegions="true" Watched="WatchedList" Watching="WatchingList" Wish="WishList" IsAuthenticated="IsAuthenticated">
</MediaList>
<MediaList TitleHead="@($"{Translations.ComingSoon} ({Region})")" MediaListApi="TmdbUpcomingApi" CustomExpand="@("/collections/tmdb/upcoming")"
           DetectRegions="true" Watched="WatchedList" Watching="WatchingList" Wish="WishList" IsAuthenticated="IsAuthenticated">
</MediaList>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="AppStateStatic.Size" OnClick="@(() => JsRuntime.InvokeVoidAsync("history.back"))" />
</div>

@code {
    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    public Region Region { get; set; } = Region.US;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AppStateStatic.RegionChanged += region => StateHasChanged();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);

        Region = await AppStateStatic.GetRegion(IpInfoApi, JsRuntime);
    }

}