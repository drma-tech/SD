@page "/collections/metacritic"
<SeoHeader Title="Collections | Metacritic" Description="@SD.WEB.Resources.Credit.Metacritic" Keywords="@(new[] { "Metacritic" })" Url="/collections/metacritic"></SeoHeader>

@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Collections.Components
@inherits PageCore<Metacritic>
@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi
@inject IJSRuntime JS

<PageHeader Title="Metacritic" Image="logo/metacritic.png" Description="@SD.WEB.Resources.Credit.Metacritic" Link="https://www.metacritic.com/">
</PageHeader>

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Collections" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<MediaList MediaListApi="TmdbListApi" List="@EnumLists.MetacriticBestMoviesOfAllTime" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
           IsAuthenticated="IsAuthenticated">
</MediaList>
<MediaList MediaListApi="TmdbListApi" List="@EnumLists.MetacriticBestTvShowsOfAllTime" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
           IsAuthenticated="IsAuthenticated">
</MediaList>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="Size.Medium" OnClick="@(() => JS.InvokeVoidAsync("history.back"))" />
</div>

@code {
    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }

}