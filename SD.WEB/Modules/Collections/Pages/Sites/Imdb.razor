@page "/collections/imdb"
<SeoHeader Title="Collections | IMDB" Description="@SD.WEB.Resources.Credit.IMDb" Keywords="@(new[] { "IMDB" })" Url="/collections/imdb"></SeoHeader>
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Platform.Resources
@using SD.WEB.Modules.Collections.Components
@inherits PageCore<Imdb>
@inject ImdbTopRatedApi ImdbTopRatedApi
@inject ImdbPopularApi ImdbPopularApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi
@inject IJSRuntime JS

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Collections" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<HeadPage Title="IMDB" ImageSource="logo/imdb.png" Text="@SD.WEB.Resources.Credit.IMDb" Link="https://www.imdb.com/" IsAuthenticated="IsAuthenticated"></HeadPage>

<MediaList TitleHead="@Translations.Popular" MediaListApi="ImdbPopularApi" CustomExpand="@("/collections/imdb/popular/{0}")" IsImdb="true" ShowFilter="true"
           StringParameters="Params" Watched="WatchedList" Watching="WatchingList" Wish="WishList" IsAuthenticated="IsAuthenticated" OnlyYear="true">
</MediaList>
<MediaList MediaListApi="ImdbTopRatedApi" List="TypeSelected == MediaType.movie ? EnumLists.ImdbTop250Movies : EnumLists.ImdbTop250Shows"
           TypeSelected="TypeSelected" TypeSelectedChanged="@((value)=>{TypeSelected=value;StateHasChanged();})"
           ShowFilter="true" Watched="WatchedList" Watching="WatchingList" Wish="WishList" IsAuthenticated="IsAuthenticated" OnlyYear="true">
</MediaList>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="Size.Medium" OnClick="@(() => JS.InvokeVoidAsync("history.back"))" />
</div>

@code {
    public Dictionary<string, string> Params { get; set; } = new() { { "mode", "full" } };

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    public MediaType TypeSelected { get; set; } = MediaType.movie;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        AppStateStatic.RegionChanged += region => StateHasChanged();

        WatchedListApi.DataChanged += model => { WatchedList = model; StateHasChanged(); };
        WatchingListApi.DataChanged += model => { WatchingList = model; StateHasChanged(); };
        WishListApi.DataChanged += model => { WishList = model; StateHasChanged(); };
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }

}