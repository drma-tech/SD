@inherits ComponentCore<SubscriptionPopup>

@using SD.Shared.Models.Subscription
@using SD.WEB.Modules.Subscription.Core
@using SD.WEB.Modules.Subscription.Resources
@using Button = SD.WEB.Resources.Button

@implements IDisposable
@inject PaddleConfigurationApi ConfigurationApi
@inject PaddleSubscriptionApi SubscriptionApi
@inject IJSRuntime JsRuntime

<MudDialog Style="width: 100%">
    <DialogContent>
        @if (BlockedCountry)
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Dense="true">
                @($"Unfortunately, due to legal and policy restrictions, we are unable to offer our services in {_countries[CurrentCountry!]}.")
            </MudAlert>
        }
        else if (IsAuthenticated && Client == null)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100px" Animation="Animation.Wave" />
        }
        else
        {
            if (Client?.ClientePaddle == null)
            {
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Icon="@IconsFA.Solid.Icon("gift").Font" Class="mb-3" Dense="true">
                    @Translations.FreePeriod
                </MudAlert>
                <MudToggleGroup SelectionMode="SelectionMode.SingleSelection" @bind-Value="Cycle" Color="Color.Primary" Class="mb-3">
                    <MudToggleItem Value="@AccountCycle.Monthly">
                        @AccountCycle.Monthly.GetName()
                    </MudToggleItem>
                    <MudToggleItem Value="@AccountCycle.Yearly">
                        @AccountCycle.Yearly.GetName()
                        <MudChip Size="Size.Small" Color="Color.Success">@Translations.YearSave</MudChip>
                    </MudToggleItem>
                </MudToggleGroup>
                <MudStack Row="true" Class="mb-3" Breakpoint="Breakpoint.Xs" Spacing="2">
                    <MudCard Outlined="true" Elevation="4">
                        <MudCardContent Class="pa-3">
                            <MudText Typo="Typo.subtitle1" Align="Align.Center">@AccountProduct.Basic.GetName()</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">@Translations.Free</MudText>
                            <MudGrid Spacing="1" Justify="Justify.SpaceBetween">
                                <MudItem xs="9">
                                    <MudText>@Translations.NoAds</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Icon="@IconsFA.Solid.Icon("xmark").Font" Color="Color.Error" Size="Size.Small" Label="true" Class="chip-no-text" />
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.MyPlatforms</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Basic.GetRestrictions().FavoriteProviders.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.MySuggestions</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Error" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Basic.GetRestrictions().MySuggestions.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.Watched</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Basic.GetRestrictions().Watched.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.Watching</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Basic.GetRestrictions().Watching.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.Wishlist</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Basic.GetRestrictions().Wishlist.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                    <MudCard Outlined="true" Elevation="4">
                        <MudCardContent Class="pa-3">
                            <MudText Typo="Typo.subtitle1" Align="Align.Center">@AccountProduct.Standard.GetName()</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">@GetSubscription(AccountProduct.Standard)?.Price / @Cycle.GetDescription()</MudText>
                            <MudGrid Spacing="1" Justify="Justify.SpaceBetween">
                                <MudItem xs="9">
                                    <MudText>@Translations.NoAds</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Icon="@IconsFA.Solid.Icon("check").Font" Color="Color.Default" Size="Size.Small" Label="true" Class="chip-no-text" />
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.MyPlatforms</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Standard.GetRestrictions().FavoriteProviders.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.MySuggestions</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Standard.GetRestrictions().MySuggestions.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="8">
                                    <MudText>@Profile.Resources.Translations.Watched</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Standard.GetRestrictions().Watched.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.Watching</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Standard.GetRestrictions().Watching.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.Wishlist</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Standard.GetRestrictions().Wishlist.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="@(() => OpenCheckout(GetSubscription(AccountProduct.Standard)?.PriceId))">
                                @Translations.Select
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                    <MudCard Outlined="true" Elevation="4">
                        <MudCardContent Class="pa-3">
                            <MudText Typo="Typo.subtitle1" Align="Align.Center">@AccountProduct.Premium.GetName()</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">@GetSubscription(AccountProduct.Premium)?.Price / @Cycle.GetDescription()</MudText>
                            <MudGrid Spacing="1" Justify="Justify.SpaceBetween">
                                <MudItem xs="9">
                                    <MudText>@Translations.NoAds</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Icon="@IconsFA.Solid.Icon("check").Font" Color="Color.Default" Size="Size.Small" Label="true" Class="chip-no-text" />
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.MyPlatforms</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Premium.GetRestrictions().FavoriteProviders.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.MySuggestions</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Premium.GetRestrictions().MySuggestions.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="8">
                                    <MudText>@Profile.Resources.Translations.Watched</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Premium.GetRestrictions().Watched.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.Watching</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Premium.GetRestrictions().Watching.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText>@Profile.Resources.Translations.Wishlist</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Label="true">
                                        <MudText>@AccountProduct.Premium.GetRestrictions().Wishlist.ToString()</MudText>
                                    </MudChip>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="@(() => OpenCheckout(GetSubscription(AccountProduct.Premium)?.PriceId))">
                                @Translations.Select
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudStack>
            }
            else
            {
                if (Subscription == null)
                {
                    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Dense="true">
                        @Translations.SubscriptionProcessed
                    </MudAlert>
                }
                else
                {
                    <MudCard Outlined="true" Elevation="4" Class="mb-3">
                        <MudCardContent Class="pa-3">
                            <MudGrid Class="mb-6">
                                <MudItem xs="12" sm="6">
                                    <MudTextField T="string" Label="@Translations.SubscriptionId" Text="@Subscription?.data?.id" ReadOnly="true"></MudTextField>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField T="string" Label="@Translations.Status" Text="@Subscription?.data?.status" ReadOnly="true"></MudTextField>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField T="string" Label="@Translations.NextBilled" Text="@Subscription?.data?.next_billed_at?.ToShortDateString()" ReadOnly="true"></MudTextField>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField T="string" Label="@Translations.Canceled" Text="@Subscription?.data?.canceled_at?.ToShortDateString()" ReadOnly="true" ShrinkLabel="true"></MudTextField>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                    <MudCard Outlined="true" Elevation="4" Class="mb-3">
                        <MudCardContent Class="pa-3">
                            <MudDataGrid Items="@(Subscription.data?.items ?? [])" Dense="true">
                                <Columns>
                                    <TemplateColumn Title="@Translations.Product">
                                        <CellTemplate>
                                            @Config?.GetAccountProduct(context.Item.price?.product_id).GetCustomAttribute()?.Name
                                        </CellTemplate>
                                    </TemplateColumn>
                                    <TemplateColumn Title="@Translations.PreviouslyBilled">
                                        <CellTemplate>
                                            @context.Item.previously_billed_at?.ToShortDateString()
                                        </CellTemplate>
                                    </TemplateColumn>
                                    <TemplateColumn Title="@Translations.NextBilled">
                                        <CellTemplate>
                                            @if (context.Item.next_billed_at.HasValue)
                                            {
                                                context.Item.next_billed_at?.ToShortDateString();
                                            }
                                            else
                                            {
                                                <MudChip T="string" Color="Color.Warning">@Translations.InactiveBilling</MudChip>
                                            }
                                        </CellTemplate>
                                    </TemplateColumn>
                                    <PropertyColumn Title="@Translations.Status" Property="x => x.status" />
                                </Columns>
                            </MudDataGrid>
                        </MudCardContent>
                    </MudCard>
                    @if (Subscription?.data?.IsCanceled ?? true)
                    {
                        <MudButton Color="Color.Primary" StartIcon="@IconsFA.Solid.Icon("gem").Font" Variant="Variant.Filled" Class="me-2 mb-2"
                                   OnClick="@CreateNewSubscription">
                            @Translations.CreateNewSubscription
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Color="Color.Secondary" StartIcon="@IconsFA.Solid.Icon("credit-card").Font" Variant="Variant.Outlined" Class="me-2 mb-2"
                                   Href="@Subscription?.data?.management_urls?.update_payment_method" Target="_blank" rel="nofollow">
                            @Translations.UpdatePaymentDetails
                        </MudButton>
                        <MudButton Color="Color.Error" StartIcon="@IconsFA.Solid.Icon("ban").Font" Variant="Variant.Outlined" Class="me-2 mb-2"
                                   Href="@Subscription?.data?.management_urls?.cancel" Target="_blank" rel="nofollow">
                            @Translations.CancelSubscription
                        </MudButton>
                    }
                }
            }
        }
    </DialogContent>
    <DialogActions>
        <MudText Class="ms-4">Powered by</MudText>
        <a href="https://www.paddle.com/" target="_blank" rel="nofollow">
            <img src="/logo/paddle.avif" style="height: 30px;" alt="paddle" />
        </a>
        <MudSpacer></MudSpacer>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }
    private ClientePrincipal? Client { get; set; }

    public RootSubscription? Subscription { get; set; }
    public PaddleConfigurations? Config { get; set; }

    private AccountCycle Cycle { get; set; } = AccountCycle.Monthly;

    private string? CurrentCountry { get; set; }
    private bool BlockedCountry { get; set; }

    private readonly Dictionary<string, string> _countries = new()
    {
        { "AF", "Afghanistan" },
        { "BY", "Belarus" },
        { "CE", "Crimea" },
        { "CU", "Cuba" },
        { "IR", "Iran" },
        { "IQ", "Iraq" },
        { "MM", "Myanmar" },
        { "KP", "North Korea" },
        { "RU", "Russia" },
        { "SY", "Syria" },
        { "VE", "Venezuela" }
    };

    private class Plan
    {
        public AccountProduct Product { get; set; }
        public AccountCycle Cycle { get; set; }
        public string? Price { get; set; }

        public string? ProductId { get; set; }
        public string? PriceId { get; set; }
    }

    private IEnumerable<Plan> Plans { get; set; } = [];

    private Plan? GetSubscription(AccountProduct product)
    {
        return Plans.FirstOrDefault(f => f.Product == product && f.Cycle == Cycle);
    }

    private Action<TempClientePaddle> Registration => async client => await RegistrationSuccessful(client);

    protected override void OnInitialized()
    {
        AppStateStatic.RegistrationSuccessful += Registration;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                //client cannot be on load data render
                Client = await PrincipalApi.Get(IsAuthenticated);
            }

            await base.OnAfterRenderAsync(firstRender);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected override async Task LoadDataRender()
    {
        CurrentCountry = await ConfigurationApi.GetCountry();

        if (CurrentCountry.NotEmpty())
        {
            //https://www.xolo.io/zz-en/faq/xolo-leap/category/get-started/article/do-you-accept-customers-from-all-countries
            BlockedCountry = _countries.ContainsKey(CurrentCountry!);

            if (BlockedCountry) return;
        }

        Config = await ConfigurationApi.GetConfigurations();
        if (Config == null) throw new NotificationException("server communication error");

        if (Client?.ClientePaddle == null && string.IsNullOrEmpty(Client?.ClientePaddle?.SubscriptionId))
        {
            await JsRuntime.InvokeVoidAsync("startPaddle", Config.Token);
            Plans = await JsRuntime.InvokeAsync<IEnumerable<Plan>>("getPlans", Config.PriceStandardMonth, Config.PriceStandardYear, Config.PricePremiumMonth, Config.PricePremiumYear);
        }
        else if (string.IsNullOrEmpty(Client?.ClientePaddle?.SubscriptionId))
        {
            Snackbar.Add(Translations.UnableReadSubscription, Severity.Error);
        }
        else
        {
            Subscription = await SubscriptionApi.GetSubscription(Client?.ClientePaddle?.SubscriptionId);
        }
    }

    protected async Task OpenCheckout(string? priceId)
    {
        try
        {
            var locale = AppStateStatic.Language.ToString().Substring(0, 2);

            await JsRuntime.InvokeVoidAsync("openCheckout", priceId, Client?.Email, locale, Client?.ClientePaddle?.CustomerId, Client?.ClientePaddle?.AddressId);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private async Task RegistrationSuccessful(TempClientePaddle client)
    {
        try
        {
            if (Client == null) throw new NotificationException("Client null");

            if (Plans.Empty()) //for some reason, the list is getting empty (maybe is cause is calling twice)
            {
                if (Config == null)
                {
                    Config = await ConfigurationApi.GetConfigurations();
                    if (Config == null) throw new NotificationException("server communication error");
                }

                await JsRuntime.InvokeVoidAsync("startPaddle", Config.Token);
                Plans = await JsRuntime.InvokeAsync<IEnumerable<Plan>>("getPlans", Config.PriceStandardMonth, Config.PriceStandardYear, Config.PricePremiumMonth, Config.PricePremiumYear);
            }

            var product = Plans.Single(w => w.ProductId == client.ProductId && w.Cycle == Cycle).Product;

            Client.ClientePaddle ??= new ClientePaddle
            {
                CustomerId = client.CustomerId
            };

            Client.ClientePaddle.AddressId = client.AddressId;
            Client.ClientePaddle.Items.Add(new PaddleItem { ProductId = client.ProductId, Product = product });

            Client = await PrincipalApi.Paddle(Client);

            StateHasChanged();

            Snackbar.Add(Translations.RegistrationSuccessful, Severity.Success);

            for (var i = 0; i < 20; i++)
            {
                await Task.Delay(2000);
                var principal = await PrincipalApi.Get(IsAuthenticated, true);

                if (principal?.ClientePaddle != null && principal.ClientePaddle.SubscriptionId.NotEmpty())
                {
                    await UpdateData();
                    break;
                }
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private async Task UpdateData()
    {
        try
        {
            Client = await PrincipalApi.Get(true, true);
            PrincipalApi.DataChanged?.Invoke(Client);
            await LoadDataRender();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private async Task CreateNewSubscription()
    {
        try
        {
            if (Client != null) Client.ClientePaddle = null;
            Subscription = null;
            await LoadDataRender();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    void IDisposable.Dispose()
    {
        AppStateStatic.RegistrationSuccessful -= Registration;
    }

}