@inherits SD.WEB.Modules.Profile.FormBase<TValue, Country<TValue, TEnum>>
@typeparam TValue
@typeparam TEnum where TEnum : struct, Enum, IConvertible

<MudGrid Class="mb-6">
    <MudItem xs="12" sm="5">
        <MudSelect @bind-Value="@Continent" Label="Continent" Disabled="@Disabled" FullWidth="true">
            @foreach (var group in Regions.Select(s => s.Group).Order().Distinct())
            {
                <MudSelectItem Value="@group">@group</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="7">
        <MudSelect Value="@SelectedValue" ValueChanged="SelectedValueChanged" Label="@For?.GetCustomAttribute().Name" Disabled="@Disabled" FullWidth="true">
            @foreach (var item in Regions.Where(w => w.Group == Continent).OrderBy(o => o.Name))
            {
                <MudSelectItem Value="@item.Value">@item.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public Region SelectedValue { get; set; }
    [Parameter] public EventCallback<Region> SelectedValueChanged { get; set; }

    public IEnumerable<EnumObject<Region>> Regions { get; set; } = [];
    public string? Continent { get; set; }

    protected override void OnInitialized()
    {
        Continent = SelectedValue.GetCustomAttribute()?.Group;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            Regions = EnumHelper.GetList<Region>();
        }
    }

}