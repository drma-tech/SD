@using SD.Shared.Models.News;
@using System.Text.Json;
@using SD.WEB.Modules.News.Resources
@inherits ComponentCore<NewsPopup>

@inject CacheFlixsterApi CacheFlixsterApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@($"{Translations.NewsTitle} - Rotten Tomatoes")</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <RenderControl Core="Core" Model="News" ExpressionEmpty="@((CacheDocument<NewsModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
        <div class="grid-relative-container-lg">
            @foreach (var item in News?.Data?.Items ?? new())
            {
                <Card>
                    <CardImage Source="@item.url_img" Alt="@item.title">
                    </CardImage>
                    <CardBody>
                        <CardText Style="font-size: 0.8rem;">
                            @if (!string.IsNullOrEmpty(item.title))
                            {
                                @((MarkupString)item.title)
                            }
                        </CardText>
                        <Button Color="Color.Primary" Type="ButtonType.Link" To="@item.link" Target="Target.Blank" Size="Size.Small" Class="mt-2">
                            @WEB.Resources.Button.ReadMore
                        </Button>
                    </CardBody>
                </Card>
            }
        </div>
    </RenderControl>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
        @WEB.Resources.Button.Close
    </Button>
</ModalFooter>

@code {
    public RenderControlCore<CacheDocument<NewsModel>?> Core { get; set; } = new();
    private CacheDocument<NewsModel>? News { get; set; }
    public string? selectedSlide { get; set; }

    protected override async Task LoadDataRender()
    {
        News = await CacheFlixsterApi.GetNews("full", Core);
    }
}