@page "/news"
@using SD.Shared.Models.News
@using SD.WEB.Modules.News.Resources
@using Button = SD.WEB.Resources.Button
@inherits PageCore<News>

@inject CacheFlixsterApi CacheFlixsterApi

<SeoHeader Title="News" Keywords="@(new[] { "News" })" Url="/news"></SeoHeader>

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <div style="text-align: center;">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5145928155833172" data-ad-slot="4650130753"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
}

<SectionComponent Title="@($"{Translations.NewsTitle} - Rotten Tomatoes")" IconName="@IconsFA.Solid.Icon("newspaper").Font" FullPage="true">
    <BodyFragment>
        <RenderControl Core="Core" Model="NewsList" ExpressionEmpty="@((CacheDocument<NewsModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
            <div class="grid-relative-container-x-lg">
                @foreach (var item in NewsList?.Data?.Items ?? [])
                {
                    <MudCard Outlined="true">
                        <MudCardContent Style="padding: 0; text-align: justify; line-height: normal;">
                            <MudImage Src="@item.url_img" FallbackSrc="images/no-image.png" Alt="@item.title" Style="width: 100%;" ObjectFit="ObjectFit.Contain"></MudImage>
                            <div class="pa-2">
                                @if (!string.IsNullOrEmpty(item.title))
                                {
                                    @((MarkupString)item.title)
                                }
                            </div>
                        </MudCardContent>
                        <MudCardActions style="align-self: center; padding: 0;">
                            <MudButton Color="Color.Primary" Variant="Variant.Text" Href="@item.link" Target="_blank">
                                @Button.ReadMore
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </div>
        </RenderControl>
    </BodyFragment>
</SectionComponent>

@code {
    public RenderControlCore<CacheDocument<NewsModel>?> Core { get; set; } = new();
    private CacheDocument<NewsModel>? NewsList { get; set; }
    public string? SelectedSlide { get; set; }

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    protected override async Task LoadDataRender()
    {
        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);

        NewsList = await CacheFlixsterApi.GetNews("full", Core);
    }

}