@page "/news"
@using SD.Shared.Models.News
@using SD.WEB.Modules.News.Resources
@using Button = SD.WEB.Resources.Button
@inherits PageCore<News>

@inject CacheFlixsterApi CacheFlixsterApi
@inject IJSRuntime JS

<SeoHeader Title="@Translations.NewsTitle" Description="@Translations.NewsDescription" Keywords="@(new[] { "News" })" Url="/news"></SeoHeader>
<PageHeader Title="@Translations.NewsTitle" Description="@Translations.NewsDescription" Icon="@IconsFA.Solid.Icon("newspaper").Font"></PageHeader>

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Index" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<RenderControl Core="Core" Model="NewsList" ExpressionEmpty="@((CacheDocument<NewsModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
    <div class="grid-relative-container-news">
        @foreach (var item in NewsList?.Data?.Items ?? [])
        {
            <MudCard Style="position: relative;">
                <MudCardMedia Image="@item.url_img" Height="300" />
                <MudChip T="string" Label="true" Color="Color.Secondary" Class="poster-chip" Style="top: 8px; left: 8px; position: absolute; opacity: 0.75;" Size="AppStateStatic.Size">
                    @item.date.Humanize()
                </MudChip>
                <MudButton Color="Color.Primary" Href="@item.link" Target="_blank" Rel="noindex, nofollow" Size="AppStateStatic.Size"
                           Style="top: 8px; right: 8px; position: absolute; opacity: 0.75;" Variant="Variant.Filled">
                    @Button.ReadMore
                </MudButton>
                <MudCardContent Style="text-align: justify;" Class="pa-2">
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary" Align="Align.Center" Style="line-height: 1.5">@((MarkupString)item.title!)</MudText>
                    @* <div class="mt-2">
                        <MudText Typo="Typo.caption">@item.text</MudText>
                    </div> *@
                </MudCardContent>
            </MudCard>
        }
    </div>
</RenderControl>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="AppStateStatic.Size" OnClick="@(() => JS.InvokeVoidAsync("history.back"))" />
</div>

@code {
    public RenderControlCore<CacheDocument<NewsModel>?> Core { get; set; } = new();
    private CacheDocument<NewsModel>? NewsList { get; set; }
    public string? SelectedSlide { get; set; }

    protected override async Task LoadEssentialDataAsync()
    {
        NewsList = await CacheFlixsterApi.GetNews("full", Core);
    }

}
