@page "/news"
@using SD.Shared.Models.News
@using SD.WEB.Modules.News.Resources
@using Button = SD.WEB.Resources.Button
@inherits PageCore<News>

@inject CacheFlixsterApi CacheFlixsterApi
@inject IJSRuntime JS

<SeoHeader Title="@Translations.NewsTitle" Description="@Translations.NewsDescription" Keywords="@(new[] { "News" })" Url="/news"></SeoHeader>

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Index" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<SectionComponent Title="@Translations.NewsTitle" Description="@Translations.NewsDescription" IconName="@IconsFA.Solid.Icon("newspaper").Font" FullPage="true">
    <BodyFragment>
        <RenderControl Core="Core" Model="NewsList" ExpressionEmpty="@((CacheDocument<NewsModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
            <div class="grid-relative-container-x-lg">
                @foreach (var item in NewsList?.Data?.Items ?? [])
                {
                    <MudCard Outlined="true">
                        <MudCardContent Style="padding: 0; text-align: justify; line-height: normal;">
                            <MudImage Src="@item.url_img" Alt="@item.title" FallbackSrc="images/no-image.png" Style="width: 100%;" ObjectFit="ObjectFit.Contain"></MudImage>
                            <h2 class="pa-2" style="text-align: center; padding: 4px; line-height: normal; font-size: 0.8rem;">
                                @if (!string.IsNullOrEmpty(item.title))
                                {
                                    @((MarkupString)item.title)
                                }
                            </h2>
                        </MudCardContent>
                        <MudCardActions style="align-self: center; padding: 0;">
                            <MudButton Color="Color.Primary" Variant="Variant.Text" Href="@item.link" Target="_blank" Rel="noindex, nofollow">
                                @Button.ReadMore
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </div>
        </RenderControl>
    </BodyFragment>
</SectionComponent>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="Size.Medium" OnClick="@(() => JS.InvokeVoidAsync("history.back"))" />
</div>

@code {
    public RenderControlCore<CacheDocument<NewsModel>?> Core { get; set; } = new();
    private CacheDocument<NewsModel>? NewsList { get; set; }
    public string? SelectedSlide { get; set; }

    protected override async Task LoadEssentialDataAsync()
    {
        NewsList = await CacheFlixsterApi.GetNews("full", Core);
    }

}