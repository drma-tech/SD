@using SD.Shared.Models.News;
@using SD.WEB.Modules.News.Resources
@inherits ComponentCore<NewsComponent>

@inject CacheFlixsterApi CacheFlixsterApi
@inject IJSRuntime JsRuntime

<HeaderComponent Title="@($"{Translations.NewsTitle} - {Language.enUS.GetName()}")" IconImage="logo/rotten-tomatoes.png">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Type="ButtonType.Link" To="@($"/news")">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<RenderControl Core="Core" Model="News" ExpressionEmpty="@((CacheDocument<NewsModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
    <div id="@GallerySwiperId" class="swiper">
        <div class="swiper-wrapper">
            @foreach (var item in News?.Data?.Items ?? [])
            {
                <div class="swiper-slide">
                    <Blazorise.Link To="@item?.link" Target="Target.Blank" Title="@item?.title">
                        <Image Source="@item?.url_img" title="@item?.title" alt="@item?.title" Text="@item?.title" Display="Display.Block" Width="Width.Is100" />
                        <div class="carousel-caption d-none d-md-block p-1" style="background-color: lime; opacity: 70%; color: black;">
                            @if (item?.title != null)
                            {
                                <p>@((MarkupString)item.title)</p>
                            }
                        </div>
                    </Blazorise.Link>
                </div>
            }
        </div>
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
        @* <div class="swiper-pagination"></div> *@
        <div class="autoplay-progress">
            <svg viewBox="0 0 48 48">
                <circle cx="24" cy="24" r="20"></circle>
            </svg>
            <span></span>
        </div>
    </div>
</RenderControl>

@code {
    public RenderControlCore<CacheDocument<NewsModel>?> Core { get; set; } = new();
    private CacheDocument<NewsModel>? News { get; set; }

    private readonly string GallerySwiperId = $"swiper-{Guid.NewGuid()}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("initCalendar", GallerySwiperId);

            await base.OnAfterRenderAsync(firstRender);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    protected override async Task LoadDataRender()
    {
        News = await CacheFlixsterApi.GetNews("compact", Core);
    }
}