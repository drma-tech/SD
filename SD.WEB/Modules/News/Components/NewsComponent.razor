@using SD.Shared.Models.News;
@using SD.WEB.Modules.News.Resources
@inherits ComponentCore<NewsComponent>

@inject CacheFlixsterApi CacheFlixsterApi

<HeaderComponent Title="@($"{Translations.NewsTitle} - {Language.enUS.GetName()}")" IconImage="logo/rotten-tomatoes.png">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@OpenCompleteList" title="Show all news">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<RenderControl Core="Core" Model="News" ExpressionEmpty="@((CacheDocument<NewsModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
    <Carousel @bind-SelectedSlide="@selectedSlide">
        @foreach (var item in News?.Data?.Items ?? [])
        {
            <CarouselSlide Name="@item.id">
                <Blazorise.Link To="@item?.link" Target="Target.Blank" Title="@item?.title">
                    <Image Source="@item?.url_img" title="@item?.title" alt="@item?.title" Text="@item?.title" Display="Display.Block" Width="Width.Is100" />
                    <div class="carousel-caption d-none d-md-block p-1" style="background-color: lime; opacity: 70%; color: black;">
                        <p>@((MarkupString)item.title)</p>
                    </div>
                </Blazorise.Link>
            </CarouselSlide>
        }
    </Carousel>
</RenderControl>

@code {
    public RenderControlCore<CacheDocument<NewsModel>?> Core { get; set; } = new();
    private CacheDocument<NewsModel>? News { get; set; }
    public string? selectedSlide { get; set; }

    protected override async Task LoadDataRender()
    {
        News = await CacheFlixsterApi.GetNews("compact", Core);
    }

    private async Task OpenCompleteList()
    {
        await ModalService.NewsPopup();
    }
}