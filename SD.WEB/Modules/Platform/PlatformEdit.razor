@page "/platforms-edit"
@attribute [Authorize(Roles = "administrator")]

@inherits PageCore<PlatformEdit>

@using HtmlAgilityPack
@using System.Net.Http
@using SD.Shared.Models.List.Tmdb;
@using System.Text.Json;
@using SD.WEB.Modules.Platform.Core

@inject AllProvidersApi AllProvidersApi
@inject IJSRuntime JS

<MudButton OnClick="@SyncProvidersOnClick" Color="Color.Primary" Variant="Variant.Filled">
    Sync Providers
</MudButton>
<MudButton OnClick="@SaveSession" Color="Color.Primary" Variant="Variant.Filled">
    Save Session
</MudButton>

<MudDataGrid T="ProviderModel" Items="@AllProviders?.Items" ReadOnly="false" Filterable="true" Dense="true"
             EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual"
             FilterMode="DataGridFilterMode.ColumnFilterMenu" Class="mt-3" RowsPerPage="8"
             CommittedItemChanges="RowUpdated" EditDialogOptions="new DialogOptions(){ FullWidth=true}">
    <Columns>
        <TemplateColumn>
            @*  <ClearFilterCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked" Size="Size.Small">
                    <Blazorise.Icon Name="FontAwesomeIcons.Filter"></Blazorise.Icon>
                </Button>
            </ClearFilterCommandTemplate> *@
            @*   <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked" Size="Size.Small">
                    <Blazorise.Icon Name="FontAwesomeIcons.Plus"></Blazorise.Icon>
                </Button>
            </NewCommandTemplate> *@
            @*  <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked" Size="Size.Small" Margin="Margin.Is1.FromEnd">
                    <Blazorise.Icon Name="FontAwesomeIcons.Edit"></Blazorise.Icon>
                </Button>
            </EditCommandTemplate> *@
            <CellTemplate>
                <div style="width: 60px;">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Link" Disabled="context.Item.link.NotEmpty()" Target="_blank"
                                   Href="@($"https://www.google.com/search?q=streaming+{context.Item.name}")" />
                </div>
            </CellTemplate>
            @*  <SaveCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked" Size="Size.Small" Margin="Margin.Is1.FromEnd">
                    <Blazorise.Icon Name="FontAwesomeIcons.Save"></Blazorise.Icon>
                </Button>
            </SaveCommandTemplate> *@
            @*   <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked" Size="Size.Small" Margin="Margin.Is1.FromEnd">
                    <Blazorise.Icon Name="FontAwesomeIcons.Ban"></Blazorise.Icon>
                </Button>
            </CancelCommandTemplate> *@
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudImage Src="@($"https://image.tmdb.org/t/p/original/{context.Item.logo_path}")" Style="width: 34px;"></MudImage>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.name" Title="Name" Editable="false" />
        <PropertyColumn Property="x => x.description" Title="Description">
            <EditTemplate>
                <MudTextField @bind-Value="context.Item.description" Lines="3" />
                <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mt-2" StartIcon="@Icons.Material.Filled.Sync" Size="Size.Small" Disabled="context.Item.link.Empty()"
                           OnClick="@(async () => { context.Item.description = "searching..."; context.Item.description = await GetDescriptionOnClick(context.Item.link); })">
                </MudButton>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.link" Title="Link" Editable="true"></PropertyColumn>
        <PropertyColumn Property="x => x.regions_str" Title="Regions" Editable="false" Style="width: 34px;" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ProviderModel" />
    </PagerContent>
</MudDataGrid>

@code {
    public MediaType MediaType { get; set; } = MediaType.movie;

    private AllProviders? AllProviders { get; set; }

    public List<EnumObject<Language>> Languages { get; set; } = [];

    protected override void OnInitialized()
    {
        Languages = EnumHelper.GetList<Language>();
    }

    protected override async Task LoadDataRender()
    {
        AllProviders = await AllProvidersApi.GetAll(null);
    }

    protected async Task SaveSession()
    {
        if (AllProviders != null)
        {
            await JS.InvokeVoidAsync("window.localStorage.setItem",
                new object[] { "AllProviders", JsonSerializer.Serialize(AllProviders, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) });
        }
    }

    protected async Task SyncProvidersOnClick()
    {
        try
        {
            var result = new List<ProviderModel>();

            if (AllProviders != null)
            {
                var details = AllProviders.Items;

                foreach (var region in EnumHelper.GetArray<Region>())
                {
                    var parameter = new Dictionary<string, string>()
                        {
                            { "api_key", TmdbOptions.ApiKey },
                            { "language", Language.enUS.GetName(false) ?? "en-US" },
                            { "watch_region", region.ToString() }
                        };

                    using (var http = new HttpClient())
                    {
                        var movies = await http.GetFromJsonAsync<TMDB_AllProviders>(TmdbOptions.BaseUri + "watch/providers/movie".ConfigureParameters(parameter));
                        if (movies != null) AddProvider(result, movies.results, details, region, MediaType.movie);

                        var tvs = await http.GetFromJsonAsync<TMDB_AllProviders>(TmdbOptions.BaseUri + "watch/providers/tv".ConfigureParameters(parameter));
                        if (tvs != null) AddProvider(result, tvs.results, details, region, MediaType.tv);
                    }
                }

                AllProviders.Items = result.OrderBy(o => int.Parse(o.id ?? "0")).ToList();

                await SaveSession();
            }

            Snackbar.Add("Synchronization Finished", Severity.Success);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private static void AddProvider(List<ProviderModel> final_list, List<ProviderBase> new_providers, List<ProviderModel> current_providers, Region region, MediaType type)
    {
        foreach (var item in new_providers)
        {
            var detail = current_providers.FirstOrDefault(f => f.id == item.provider_id.ToString());
            var new_item = final_list.FirstOrDefault(f => f.id == item.provider_id.ToString());

            if (new_item == null)
            {
                final_list.Add(new ProviderModel
                {
                    //api
                    id = item.provider_id.ToString(),
                    name = item.provider_name,
                    priority = item.display_priority,
                    logo_path = item.logo_path,
                    //own data (manual update)
                    description = detail?.description,
                    link = detail?.link,
                    plans = detail?.plans ?? new(),
                    models = detail?.models ?? new(),
                    //api by regions
                    regions = new List<Region> { region },
                    types = new List<MediaType> { type }
                });
            }
            else
            {
                if (!new_item.regions.Any(a => a == region))
                {
                    new_item.regions.Add(region);
                }
                new_item.regions = new_item.regions.OrderBy(o => o).ToList();

                if (!new_item.types.Any(a => a == type))
                {
                    new_item.types.Add(type);
                }
                new_item.types = new_item.types.OrderBy(o => o).ToList();
            }
        }
    }

    protected void RowUpdated(ProviderModel model)
    {
        var item = AllProviders?.Items.FirstOrDefault(f => f.id == model.id);

        item = model;
    }

    protected async Task<string> GetDescriptionOnClick(string? url)
    {
        if (url == null) throw new ArgumentNullException(nameof(url));

        try
        {
            var client = new HttpClient();

            using (var requestMessage = new HttpRequestMessage(HttpMethod.Get, "https://cors-anywhere.herokuapp.com/" + url))
            {
                requestMessage.Headers.Add("origin", "x-requested-with");

                var response = await client.SendAsync(requestMessage);
                using HttpContent content = response.Content;
                var sourcedata = await content.ReadAsStringAsync();

                if (sourcedata == "See /corsdemo for more info\n")
                {
                    return "https://cors-anywhere.herokuapp.com/";
                }

                var result = GetMetaTagValue(sourcedata);
                return result;
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
            return ex.Message;
        }
    }

    private string GetMetaTagValue(string html)
    {
        var doc = new HtmlDocument();

        doc.LoadHtml(html);

        var metaTags = doc.DocumentNode.SelectNodes("//meta");
        if (metaTags != null)
        {
            foreach (var sitetag in metaTags)
            {
                if (sitetag.Attributes["name"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["name"].Value.Contains("description"))
                {
                    var content = sitetag.Attributes["content"].Value;

                    if (string.IsNullOrEmpty(content)) return "description empty";

                    return System.Web.HttpUtility.HtmlDecode(content);
                }
            }
        }
        else
        {
            return "something wrong (metaTags null)";
        }

        return "no description found";
    }
}