@page "/platforms/{id}"

@using SD.WEB.Modules.Collections.Components
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Platform.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Platform.Resources
@using SD.WEB.Modules.Subscription.Core
@inherits PageCore<PlataformDetail>

@inject AllProvidersApi AllProvidersApi
@inject TmdbDiscoveryApi TmdbDiscoveryApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi
@inject MyProvidersApi MyProvidersApi
@inject IpInfoApi IpInfoApi

<SeoHeader Title="@($"{SeoTranslations.ProvidersTitle} | {Provider?.name}")" Description="@Provider?.description" Url="@($"/platforms/{Provider?.id}")"
           Icon="@(TmdbOptions.OriginalPosterPath + Provider?.logo_path)" Keywords="@([Provider?.name])">
</SeoHeader>

@if (Provider != null)
{
    <PageHeader Image="@(TmdbOptions.OriginalPosterPath + Provider.logo_path)" Title="@Provider.name" Subtitle="@GetSubtitle()" Description="@Provider.description">
        <ActionFragment>
            @if (Provider.link.NotEmpty())
            {
                <MudTooltip Text="Official Website">
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Link" Href="@Provider.link" Target="_blank" Size="AppStateStatic.Size" Class="me-2" />
                </MudTooltip>
            }
            @if (Provider != null)
            {
                @if (MyProviders?.Items.Any(a => a.id == Provider?.id) ?? false)
                {
                    <MudTooltip Text="@Button.Remove">
                        <MudFab StartIcon="@IconsFA.Solid.Icon("minus").Font" Color="Color.Error" OnClick="@Remove" Size="AppStateStatic.Size">
                        </MudFab>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="@Button.Add">
                        <MudFab StartIcon="@IconsFA.Solid.Icon("plus").Font" Color="Color.Primary" OnClick="@Add" Size="AppStateStatic.Size">
                        </MudFab>
                    </MudTooltip>
                }
            }
        </ActionFragment>
    </PageHeader>
}

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Platforms" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<RenderControl Core="Core" Model="AllProviders" ExpressionEmpty="@((AllProviders? obj) => obj == null)">
    <MediaList TitleHead="@Translations.Popular" MediaListApi="TmdbDiscoveryApi" CustomExpand="@($"/platforms/{Id}/popular/{{0}}")" ShowFilter="Provider?.types.Count == 2"
               StringParameters="@GetExtraParameters(Id, "popularity.desc")" Watched="WatchedList" Watching="WatchingList" Wish="WishList" ForceTypoTitle="Typo.h3"
               IsAuthenticated="IsAuthenticated" TypeSelected="@(Provider?.types.Count == 1 && Provider?.types[0] == MediaType.tv ? MediaType.tv : MediaType.movie)">
    </MediaList>
    <MediaList TitleHead="@Translations.Release" MediaListApi="TmdbDiscoveryApi" CustomExpand="@($"/platforms/{Id}/new/{{0}}")" ShowFilter="Provider?.types.Count == 2"
               StringParameters="@GetExtraParameters(Id, "primary_release_date.desc")" Watched="WatchedList" Watching="WatchingList" Wish="WishList" ForceTypoTitle="Typo.h3"
               IsAuthenticated="IsAuthenticated" TypeSelected="@(Provider?.types.Count == 1 && Provider?.types[0] == MediaType.tv ? MediaType.tv : MediaType.movie)">
    </MediaList>
    <MediaList TitleHead="@Translations.TopRated" MediaListApi="TmdbDiscoveryApi" CustomExpand="@($"/platforms/{Id}/top/{{0}}")" ShowFilter="Provider?.types.Count == 2"
               StringParameters="@GetExtraParameters(Id, "vote_average.desc")" Watched="WatchedList" Watching="WatchingList" Wish="WishList" ForceTypoTitle="Typo.h3"
               IsAuthenticated="IsAuthenticated" TypeSelected="@(Provider?.types.Count == 1 && Provider?.types[0] == MediaType.tv ? MediaType.tv : MediaType.movie)">
    </MediaList>
</RenderControl>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="AppStateStatic.Size" OnClick="@(() => JavascriptVoidAsync("history.back"))" />
</div>

@code {
    [Parameter] public string? Id { get; set; }

    public RenderControlCore<AllProviders?>? Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }
    public ProviderModel? Provider { get; set; }

    public RenderControlCore<WatchedList?> CoreWatchedList { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatchingList { get; set; } = new();
    public RenderControlCore<WishList?> CoreWishlist { get; set; } = new();

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    public MyProviders? MyProviders { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };

        AllProviders = await AllProvidersApi.GetAll(Core);

        Provider = AllProviders?.Items.SingleOrDefault(s => s.id == Id);
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        MyProviders = await MyProvidersApi.Get(IsAuthenticated, null);
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }

    private static Dictionary<string, string> GetExtraParameters(string? providerId, string sortBy)
    {
        if (providerId == null) throw new ArgumentNullException(nameof(providerId));

        return new Dictionary<string, string> { { "with_watch_providers", providerId }, { "sort_by", sortBy } };
    }

    private string? GetSubtitle()
    {
        if (Provider == null) return null;
        var models = string.Join(", ", Provider.models.Select(s => s.GetName()));
        return $"{@Modules.Platform.Resources.Translations.DeliveryModel}: {models} | Countries: {Provider.regions.Count}";
    }

    private async Task Add()
    {
        try
        {
            if (!AppStateStatic.IsAuthenticated)
            {
                await ShowWarning(GlobalTranslations.YouMustLogged);
                return;
            }

            MyProviders ??= new MyProviders();

            var region = await AppStateStatic.GetRegion(IpInfoApi, JsRuntime);

            var item = new MyProvidersItem { id = Provider?.id, name = Provider?.name, logo = Provider?.logo_path, region = region };
            var client = await PrincipalApi.Get(true);
            MyProviders = await MyProvidersApi.Add(MyProviders, item, client?.AuthPaddle);

            await ShowSuccess(Translations.PlatformAdded);
        }
        catch (Exception ex)
        {
            await ProcessException(ex);
        }
    }

    private async Task Remove()
    {
        try
        {
            if (!AppStateStatic.IsAuthenticated)
            {
                await ShowWarning(GlobalTranslations.YouMustLogged);
                return;
            }

            MyProviders ??= new MyProviders();

            MyProviders = await MyProvidersApi.Remove(MyProviders.Items.First(f => f.id == Provider?.id));

            await ShowSuccess(Translations.PlatformRemoved);
        }
        catch (Exception ex)
        {
            await ProcessException(ex);
        }
    }

}