@page "/platforms/{id}"
<SeoHeader Title="@($"{SeoTranslations.ProvidersTitle} | {Provider?.name}")" Description="@Provider?.description" Url="@($"/platforms/{Provider?.id}")"
           Icon="@(TmdbOptions.OriginalPosterPath + Provider?.logo_path)" Keywords="@([Provider?.name])">
</SeoHeader>
@using SD.WEB.Modules.Collections.Components
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Platform.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Platform.Resources
@inherits PageCore<PlataformDetail>

@inject AllProvidersApi AllProvidersApi
@inject TmdbDiscoveryApi TmdbDiscoveryApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi
@inject IJSRuntime JS

<RenderControl Core="Core" Model="AllProviders" ExpressionEmpty="@((AllProviders? obj) => obj == null)">
    @if (Provider != null)
    {
        <HeadPage ImageSource="@(TmdbOptions.OriginalPosterPath + Provider.logo_path)" Title="@Provider.name" Text="@Provider.description" Link="@Provider.link"
                  Provider="Provider" IsAuthenticated="IsAuthenticated">
        </HeadPage>
    }

    <GoogleAdSense Settings="@Settings" Principal="@Principal" Section="@GoogleAdSense.AdUnit.Platforms"></GoogleAdSense>

    <MediaList TitleHead="@Translations.Popular" MediaListApi="TmdbDiscoveryApi" CustomExpand="@($"/platforms/{Id}/popular/{{0}}")" ShowFilter="Provider?.types.Count == 2"
               StringParameters="@GetExtraParameters(Id, "popularity.desc")" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
               IsAuthenticated="IsAuthenticated" TypeSelected="@(Provider?.types.Count == 1 && Provider?.types[0] == MediaType.tv ? MediaType.tv : MediaType.movie)">
    </MediaList>
    <MediaList TitleHead="@Translations.Release" MediaListApi="TmdbDiscoveryApi" CustomExpand="@($"/platforms/{Id}/new/{{0}}")" ShowFilter="Provider?.types.Count == 2"
               StringParameters="@GetExtraParameters(Id, "primary_release_date.desc")" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
               IsAuthenticated="IsAuthenticated" TypeSelected="@(Provider?.types.Count == 1 && Provider?.types[0] == MediaType.tv ? MediaType.tv : MediaType.movie)">
    </MediaList>
    <MediaList TitleHead="@Translations.TopRated" MediaListApi="TmdbDiscoveryApi" CustomExpand="@($"/platforms/{Id}/top/{{0}}")" ShowFilter="Provider?.types.Count == 2"
               StringParameters="@GetExtraParameters(Id, "vote_average.desc")" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
               IsAuthenticated="IsAuthenticated" TypeSelected="@(Provider?.types.Count == 1 && Provider?.types[0] == MediaType.tv ? MediaType.tv : MediaType.movie)">
    </MediaList>
</RenderControl>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="Size.Medium" OnClick="@(() => JS.InvokeVoidAsync("history.back"))" />
</div>

@code {
    [Parameter] public string? Id { get; set; }

    public RenderControlCore<AllProviders?>? Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }
    public ProviderModel? Provider { get; set; }

    public RenderControlCore<WatchedList?> CoreWatchedList { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatchingList { get; set; } = new();
    public RenderControlCore<WishList?> CoreWishlist { get; set; } = new();

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };

        AllProviders = await AllProvidersApi.GetAll(Core);

        Provider = AllProviders?.Items.SingleOrDefault(s => s.id == Id);
    }

    protected override async Task LoadDataRender()
    {
        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);

        WatchedList = await WatchedListApi.Get(IsAuthenticated, CoreWatchedList);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, CoreWatchingList);
        WishList = await WishListApi.Get(IsAuthenticated, CoreWishlist);
    }

    private static Dictionary<string, string> GetExtraParameters(string? providerId, string sortBy)
    {
        if (providerId == null) throw new ArgumentNullException(nameof(providerId));

        return new Dictionary<string, string> { { "with_watch_providers", providerId }, { "sort_by", sortBy } };
    }

}