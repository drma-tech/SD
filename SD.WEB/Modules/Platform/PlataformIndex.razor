@page "/platforms"

@using System.Globalization
@using SD.WEB.Modules.Platform.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Platform.Resources
@using SD.WEB.Modules.Subscription.Core
@inherits PageCore<PlataformIndex>

@inject AllProvidersApi AllProvidersApi
@inject MyProvidersApi MyProvidersApi
@inject IpInfoApi IpInfoApi

<SeoHeader Title="@SeoTranslations.ProvidersTitle" Description="@SeoTranslations.ProvidersDescription" Url="/platforms"
           Keywords="@(["platforms", "streaming", "Netflix", "Disney", "Apple", "Amazon Prime"])"></SeoHeader>
<GoogleAdSense Section="@GoogleAdSense.AdUnit.Platforms" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<PageHeader Title="@Translations.TitleProviders.Format(Region.GetName() ?? "invalid country")" Description="@SeoTranslations.ProvidersDescription" Icon="@IconsFA.Solid.Icon("clapperboard").Font">
    <ActionFragment>
        <MudSelect T="DeliveryModel?" @bind-Value="@DeliveryModel" Clearable="true" FitContent="true" Style="min-width: 150px;" Label="Filter" Dense="true">
            @foreach (var item in DeliveryModels)
            {
                <MudSelectItem T="DeliveryModel?" Value="@item.Value">@item.Name</MudSelectItem>
            }
        </MudSelect>
    </ActionFragment>
</PageHeader>

<RenderControl Core="Core" Model="AllProviders" ExpressionEmpty="@((AllProviders? obj) => obj == null || obj.Items.Empty())">
    <div class="grid-relative-container-platform">
        @foreach (var item in GetFilteredProviders())
        {
            var favorite = MyProviders?.Items.Any(a => a.id == item.id) ?? false;

            <div>
                <MudLink Href="@($"/platforms/{item.id}")" Style="position: relative;">
                    <MudCard Outlined="true">
                        <MudCardContent Style="padding: 0;">
                            <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Alt="@item.name" FallbackSrc="images/no-image.png"
                                      Fluid="true" ObjectFit="ObjectFit.Contain" Style="vertical-align: bottom;"></MudImage>
                            @if (favorite)
                            {
                                <MudChip T="string" Icon="@IconsFA.Solid.Icon("star").Font" Color="Color.Success" Size="AppStateStatic.Size" Label="true" Class="chip-no-text"
                                         Style="padding: 0.2rem; position: absolute; top: 0; right: 0; white-space: inherit; height: auto; width: 26.4px; z-index: 1;">
                                </MudChip>
                            }
                        </MudCardContent>
                        <MudCardContent Style="text-align: center; padding: 4px; line-height: normal; font-size: 0.73rem; min-height: 38px">
                            <MudText Typo="Typo.h2" Class="custom-title-list">@item.name</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudLink>
                <AuthorizeView Roles="administrator" Context="ctx">
                    <Authorized>
                        @*  @if (string.IsNullOrEmpty(item.link))
                        {
                            <p class="m-0" style="color: red">link</p>
                        } *@
                        @*  @if (string.IsNullOrEmpty(item.description))
                        {
                            <p class="m-0" style="color: red">description</p>
                        } *@
                        @if (item.models.Empty())
                        {
                            <p class="m-0" style="color: red">model</p>
                        }
                        @*  @if (item.models.Any(a => a == SD.Shared.Enums.DeliveryModel.SVOD) && item.plans.Empty())
                        {
                            <p class="m-0" style="color: red">plan</p>
                        } *@
                    </Authorized>
                </AuthorizeView>
            </div>
        }
    </div>
</RenderControl>

@code {
    public RenderControlCore<AllProviders?>? Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }

    private MyProviders? MyProviders { get; set; }

    [Custom(Name = "Model")] public DeliveryModel? DeliveryModel { get; set; }

    public Region Region { get; set; } = Region.US;

    public List<ProviderModel> GetFilteredProviders()
    {
        return AllProviders?.Items
                   .Where(p => p.regions.Contains(Region))
                   .Where(p => p.models.Any(a => DeliveryModel == null || a == DeliveryModel))
                   .OrderBy(o => o.priority).ToList()
               ?? [];
    }

    public List<EnumObject<DeliveryModel>> DeliveryModels { get; set; } = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        AppStateStatic.RegionChanged += region => { Region = region; StateHasChanged(); };
    }

    protected override async Task LoadEssentialDataAsync()
    {
        DeliveryModels = EnumHelper.GetList<DeliveryModel>();

        AllProviders = await AllProvidersApi.GetAll(Core);
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        MyProviders = await MyProvidersApi.Get(IsAuthenticated, null);

        Region = await AppStateStatic.GetRegion(IpInfoApi, JsRuntime);
    }

}