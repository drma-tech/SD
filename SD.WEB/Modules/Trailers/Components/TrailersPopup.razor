@using SD.Shared.Models.News;
@using SD.Shared.Models.Trailers;
@using SD.WEB.Modules.Trailers.Resources
@using System.Text.Json;
@inherits ComponentCore<TrailersPopup>

@inject CacheYoutubeApi CacheYoutubeApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@($"{Translations.TrailersTitle} - ONE Media")</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <RenderControl Core="Core" Model="TrailerModel" ExpressionEmpty="@((CacheDocument<TrailerModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
        <div class="grid-relative-container-150">
            @foreach (var item in TrailerModel?.Data?.Items ?? new())
            {
                <Blazorise.Link Target="Target.Blank" To="@($"https://www.youtube.com/watch?v={item?.id}")">
                    <Card>
                        <CardImage Source="@item?.url" Alt="@item?.title">
                        </CardImage>
                        <CardBody>
                            <CardText Style="line-height: normal; font-size: 0.8rem;">
                                @item?.title
                            </CardText>
                        </CardBody>
                    </Card>
                </Blazorise.Link>
            }
        </div>
    </RenderControl>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
        @WEB.Resources.Button.Close
    </Button>
</ModalFooter>

@code {
    public RenderControlCore<CacheDocument<TrailerModel>?> Core { get; set; } = new();
    private CacheDocument<TrailerModel>? TrailerModel { get; set; }

    protected override async Task LoadDataRender()
    {
        TrailerModel = await CacheYoutubeApi.GetTrailers("full", Core);
    }
}