@page "/trailers"
@using SD.Shared.Models.Trailers
@using SD.WEB.Modules.Trailers.Resources
@inherits PageCore<Trailers>

@inject CacheYoutubeApi CacheYoutubeApi
@inject IJSRuntime JS

<SeoHeader Title="@Translations.TrailersTitle" Description="@Translations.TrailersDescription" Keywords="@(new[] { "Trailers" })" Url="/trailers"></SeoHeader>

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Index" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<SectionComponent Title="@Translations.TrailersTitle" Description="@Translations.TrailersDescription" IconName="@IconsFA.Brands.Icon("youtube").Font" FullPage="true">
    <BodyFragment>
        <RenderControl Core="Core" Model="TrailerModel" ExpressionEmpty="@((CacheDocument<TrailerModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
            <div class="grid-relative-container-x-lg">
                @foreach (var item in TrailerModel?.Data?.Items ?? [])
                {
                    <MudLink Href="@($"https://www.youtube.com/watch?v={item.id}")" Target="_blank" rel="nofollow">
                        <MudCard Outlined="true">
                            <MudCardContent Style="padding: 0;">
                                <MudImage Src="@item?.url" Alt="@item?.title" FallbackSrc="images/no-image.png" Style="width: 100%;"></MudImage>
                            </MudCardContent>
                            <MudCardContent Style="text-align: center; padding: 4px; line-height: normal; font-size: 0.8rem;">
                                <MudText Typo="Typo.h2" Class="custom-h3-list">@item.title</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudLink>
                }
            </div>
        </RenderControl>
    </BodyFragment>
</SectionComponent>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="Size.Medium" OnClick="@(() => JS.InvokeVoidAsync("history.back"))" />
</div>

@code {
    public RenderControlCore<CacheDocument<TrailerModel>?> Core { get; set; } = new();
    private CacheDocument<TrailerModel>? TrailerModel { get; set; }

    protected override async Task LoadDataRender()
    {
        TrailerModel = await CacheYoutubeApi.GetTrailers("full", Core);
    }

}