@page "/trailers"
@using SD.Shared.Models.Trailers
@using SD.WEB.Modules.Trailers.Resources
@inherits PageCore<Trailers>

@inject CacheYoutubeApi CacheYoutubeApi

<SeoHeader Title="Trailers" Keywords="@(new[] { "Trailers" })" Url="/trailers"></SeoHeader>

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <div TextAlignment="TextAlignment.Center">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5922021468622891" data-ad-slot="1935613755"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
}
<HeaderComponent Title="@($"{Translations.TrailersTitle} - ONE Media")" IconImage="logo/one-media.png" />
<RenderControl Core="Core" Model="TrailerModel" ExpressionEmpty="@((CacheDocument<TrailerModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
    <div class="grid-relative-container-lg">
        @foreach (var item in TrailerModel?.Data?.Items ?? [])
        {
            <MudLink Href="@($"https://www.youtube.com/watch?v={item.id}")" Target="_blank">
                <MudCard Outlined="true">
                    <MudCardContent Style="padding: 0;">
                        <MudImage Src="@item?.url" Alt="@item?.title" Style="width: 100%;"></MudImage>
                    </MudCardContent>
                    <MudCardContent Style="text-align: center; padding: 4px; line-height: normal; font-size: 0.8rem;">
                        @item.title
                    </MudCardContent>
                </MudCard>
            </MudLink>
        }
    </div>
</RenderControl>

@code {
    public RenderControlCore<CacheDocument<TrailerModel>?> Core { get; set; } = new();
    private CacheDocument<TrailerModel>? TrailerModel { get; set; }

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    protected override async Task LoadDataRender()
    {
        TrailerModel = await CacheYoutubeApi.GetTrailers("full", Core);
    }

}