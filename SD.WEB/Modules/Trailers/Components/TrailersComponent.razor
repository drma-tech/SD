@using SD.Shared.Models.News;
@using SD.Shared.Models.Trailers;
@using SD.WEB.Modules.Trailers.Resources
@inherits ComponentCore<TrailersComponent>

@inject CacheYoutubeApi CacheYoutubeApi

<HeaderComponent Title="@($"{Translations.TrailersTitle} - {Language.enUS.GetName()}")" IconImage="logo/one-media.png">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@OpenCompleteList" title="Show all news">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<RenderControl Core="Core" Model="TrailerModel" ExpressionEmpty="@((CacheDocument<TrailerModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
    <div class="grid-relative-container-150">
        @foreach (var item in TrailerModel?.Data?.Items ?? new())
        {
            <Blazorise.Link Target="Target.Blank" To="@($"https://www.youtube.com/watch?v={item?.id}")">
                <Card>
                    <CardImage Source="@item?.url" Alt="@item?.title">
                    </CardImage>
                    <CardBody>
                        <CardText Style="line-height: normal; font-size: 0.8rem;">
                            @item?.title.GetResume(50)
                        </CardText>
                    </CardBody>
                </Card>
            </Blazorise.Link>
        }
    </div>
</RenderControl>

@code {
    public RenderControlCore<CacheDocument<TrailerModel>?> Core { get; set; } = new();
    private CacheDocument<TrailerModel>? TrailerModel { get; set; }

    protected override async Task LoadDataRender()
    {
        TrailerModel = await CacheYoutubeApi.GetTrailers("compact", Core);
    }

    private async Task OpenCompleteList()
    {
        await ModalService.TrailersPopup();
    }
}