@using SD.Shared.Models.Trailers
@using SD.WEB.Modules.Trailers.Resources
@inherits ComponentCore<TrailersComponent>

@inject CacheYoutubeApi CacheYoutubeApi
@inject IJSRuntime JsRuntime

<SectionComponent Title="@($"{Translations.TrailersTitle}")" Description="@Translations.TrailersDescriptionShort" IconName="@IconsFA.Brands.Icon("youtube").Font">
    <ActionFragment>
        <MudIconButton Icon="@IconsFA.Solid.Icon("expand").Font" Variant="Variant.Filled" Color="Color.Primary" Href="@("/trailers")" />
    </ActionFragment>
    <BodyFragment>
        <RenderControl Core="Core" Model="TrailerModel" ExpressionEmpty="@((CacheDocument<TrailerModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
            <div id="@_gallerySwiperId" class="swiper">
                <div class="swiper-wrapper">
                    @foreach (var item in TrailerModel?.Data?.Items ?? [])
                    {
                        <div class="swiper-slide swiper-slide-grid">
                            <MudLink Href="@($"https://www.youtube.com/watch?v={item?.id}")" Target="_blank" rel="nofollow">
                                <MudCard Outlined="true">
                                    <MudCardContent Style="padding: 0;">
                                        <MudImage Src="@item?.url" Alt="@item?.title" FallbackSrc="images/no-image.png" Style="width: 100%; max-height: 94px;" ObjectFit="ObjectFit.Contain"></MudImage>
                                    </MudCardContent>
                                    <MudCardContent Style="text-align: center; padding: 4px; line-height: normal; font-size: 0.8rem;">
                                        @item?.title.GetResume(50)
                                    </MudCardContent>
                                </MudCard>
                            </MudLink>
                        </div>
                    }
                </div>
                <div class="swiper-button-next"></div>
                <div class="swiper-button-prev"></div>
                @* <div class="swiper-pagination"></div> *@
            </div>
        </RenderControl>
    </BodyFragment>
</SectionComponent>

@code {
    public RenderControlCore<CacheDocument<TrailerModel>?> Core { get; set; } = new();
    private CacheDocument<TrailerModel>? TrailerModel { get; set; }

    private readonly string _gallerySwiperId = $"swiper-trailer-{Guid.NewGuid()}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("initGrid", _gallerySwiperId);

            await base.OnAfterRenderAsync(firstRender);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected override async Task LoadDataRender()
    {
        TrailerModel = await CacheYoutubeApi.GetTrailers("compact", Core);
    }

}