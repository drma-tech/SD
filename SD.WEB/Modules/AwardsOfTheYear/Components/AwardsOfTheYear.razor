@page "/best-awards-year"

@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@inherits PageCore<AwardsOfTheYear>

<SeoHeader Title="@EnumLists.AwardsOfTheYear.GetName()" Description="@GlobalTranslations.AwardsYearDescription" Keywords="@(new[] { "Best awards of the year" })" Url="/best-awards-year"></SeoHeader>

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Index" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<MediaListFull MediaListApi="TmdbListApi" List="@EnumLists.AwardsOfTheYear" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
               IsAuthenticated="IsAuthenticated" CommentsIsImage="true" IconName="@IconsFA.Solid.Icon("trophy").Font" FullPage="true"
               Description="@GlobalTranslations.AwardsYearDescription">
</MediaListFull>

@code {
    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }

}