@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Profile.Core
@inherits ComponentCore<AwardsOfTheYearComponent>

@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<SectionComponent Title="@EnumLists.AwardsOfTheYear.GetName()" IconName="@IconsFA.Solid.Icon("trophy").Font">
    <ActionFragment>
        <MudIconButton Icon="@IconsFA.Solid.Icon("expand").Font" Variant="Variant.Filled" Color="Color.Primary" Href="@("/best-awards-year")" />
    </ActionFragment>
    <BodyFragment>
        <MediaList MediaListApi="TmdbListApi" List="@EnumLists.AwardsOfTheYear" Watched="Watched" Watching="Watching" Wish="Wish"
                   ShowPrivateAction="@ShowPrivateAction" IsAuthenticated="IsAuthenticated" CommentsIsImage="true" ShowHead="false" FullPage="true">
        </MediaList>
    </BodyFragment>
</SectionComponent>

@code {
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    protected override void OnInitialized()
    {
        WatchedListApi.DataChanged += model =>
        {
            Watched = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            Watching = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            Wish = model;
            StateHasChanged();
        };
    }

}