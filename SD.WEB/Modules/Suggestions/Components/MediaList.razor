@using SD.WEB.Modules.Suggestions.Core
@using SD.WEB.Modules.Suggestions.Interface;
@using SD.WEB.Modules.Profile.Core;
@using SD.Shared.Models;

@inherits ComponentCore<MediaList>

@inject ExternalIdApi ExternalIdApi
@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@implements IDisposable
@inject IJSRuntime JsRuntime

@if (ShowHead)
{
    <HeaderComponent Title="@Title" IconImage="@IconImage">
        <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@OpenCompleteList">
            <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
        </Button>
        @if (ShowFilter)
        {
            <RadioGroup CheckedValue="TypeSelected" CheckedValueChanged="@(async(MediaType type)=>await TypeSelectedChanged(type))" Buttons="true" Float="Float.End" Size="Size.ExtraSmall" Margin="Margin.Is2.FromEnd">
                <Radio Value="MediaType.movie">@MediaType.movie.GetName()</Radio>
                <Radio Value="MediaType.tv">@MediaType.tv.GetName()</Radio>
            </RadioGroup>
        }
    </HeaderComponent>
}

<RenderControl Core="Core" Model="Items" ExpressionEmpty="@((HashSet<MediaDetail> list) => list.Empty())">
    <div id="@SwiperId" class="swiper mb-2">
        <div class="swiper-wrapper">
            @foreach (var item in Items)
            {
                <div class="swiper-slide">
                    <Card>
                        <PosterComponent Date="@(item.release_date??DateTime.MaxValue)" Rating="@item.rating" Poster="@item.poster_small" Title="@item.title" Comments="@item.comments"
                                         TmdbId="@item.tmdb_id" MediaType="@item.MediaType" Clicked="@(() => OpenPopupMedia(item))" RankUpDown="@item.RankUpDown"
                                         WatchedList="Watched" WishList="Wish" OnlyYear="OnlyYear" CommentImage="CommentImage"></PosterComponent>
                    </Card>
                </div>
            }
        </div>
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
    </div>
</RenderControl>

@code {
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public bool ShowHead { get; set; } = true;
    [Parameter] public string? TitleHead { get; set; }
    [Parameter] public string? IconImage { get; set; }
    [Parameter] public bool ShowFilter { get; set; } = false;
    [Parameter] public bool OnlyYear { get; set; } = false;
    [Parameter] public bool OrderByComments { get; set; } = false;
    [Parameter] public bool CommentImage { get; set; } = false;

    [Parameter] public IMediaListApi? MediaListApi { get; set; }
    [Parameter] public EnumLists? List { get; set; } = null;
    [Parameter] public Dictionary<string, string> StringParameters { get; set; } = new();
    [Parameter] public bool IsIMDB { get; set; } = false;

    [Parameter] public bool MultiplesRegions { get; set; } = false;
    [Parameter] public bool MultipleLanguages { get; set; } = true;

    [Parameter] public int TotalItemsFullHD { get; set; } = 10;
    [Parameter] public int TotalItemsNotFullHD { get; set; } = 8;

    [Parameter] public MediaType TypeSelected { get; set; } = MediaType.movie;
    private string Title => TitleHead ?? List?.GetName() ?? "Title Error";

    public RenderControlCore<HashSet<MediaDetail>>? Core { get; set; } = new();
    public HashSet<MediaDetail> Items { get; set; } = new();

    private readonly string SwiperId = $"swiper-{Guid.NewGuid()}";

    protected override void OnInitialized()
    {
        try
        {
            if (MediaListApi == null) throw new ArgumentNullException(nameof(MediaListApi));
            if (ShowHead && List == null && string.IsNullOrEmpty(TitleHead)) throw new ArgumentNullException(nameof(TitleHead));

            if (MultiplesRegions) AppStateStatic.RegionChanged += LoadGenericVoid;
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JsRuntime.InvokeVoidAsync("initSwiper", SwiperId);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    protected override async Task LoadDataRender()
    {
        Core?.ShowLoading();
        await LoadItems(TypeSelected);
        Core?.HideLoading(Items);
    }

    protected async void LoadGenericVoid()
    {
        Core?.ShowLoading();
        await LoadItems(TypeSelected);
        Core?.HideLoading(Items);
    }

    private async Task TypeSelectedChanged(MediaType type)
    {
        Core?.ShowLoading();
        TypeSelected = type;
        await LoadItems(type);
        Core?.HideLoading(Items);
    }

    private async Task LoadItems(MediaType type)
    {
        try
        {
            if (MediaListApi != null)
            {
                var result = await MediaListApi.GetList(new(), TypeSelected, StringParameters, List, 1);
                Items = result.list;

                if (Items.Count < 10) //force reload, if the filters bring few records
                {
                    var result2 = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, 2);
                    foreach (var item in result2.list)
                    {
                        Items.Add(item);
                    }
                }

                if (OrderByComments) Items = Items.OrderByDescending(o => int.Parse(o.comments?.Split(",").Last() ?? "0")).ToHashSet();
            }
        }
        catch (Exception ex)
        {
            Core?.ShowError(ex.Message);
        }
    }

    public async Task OpenCompleteList()
    {
        await ModalService.CompleteListPopup(TitleHead, Watched, Watching, Wish, Items, MediaListApi, List, IsIMDB, TypeSelected, StringParameters, 
            ShowPrivateAction, IsAuthenticated, CommentImage);
    }

    private async Task OpenPopupMedia(MediaDetail? media)
    {
        try
        {
            var tmdb_id = "";

            if (IsIMDB)
            {
                //for now, only tv series (imdb) need this kind of workaround (tmdb api only work with imdb id from movies - this info is not documented)
                tmdb_id = await ExternalIdApi.GetTmdbId(media?.MediaType, media?.tmdb_id);
            }
            else
            {
                tmdb_id = media?.tmdb_id;
            }

            await ModalService.MediaPopup(Watched, Watching, Wish, media?.MediaType, tmdb_id, ShowPrivateAction, IsAuthenticated);
        }
        catch (Exception ex)
        {
            Core?.ShowError(ex.Message);
        }
    }

    void IDisposable.Dispose()
    {
        AppStateStatic.RegionChanged -= LoadGenericVoid;
    }
}