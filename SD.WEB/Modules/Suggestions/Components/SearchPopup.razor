@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Suggestions.Core;
@inherits ComponentCore<SearchPopup>

@inject TmdbSearchApi TmdbSearch
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">
        @TitleHead
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <RenderControl Core="Core" Model="Items" ExpressionEmpty="@((HashSet<MediaDetail> list) => list.Empty())">
        <MediaListFull @ref="MediaListFull" MediaListApi="TmdbSearch" StringParameters="@StringParameters" Items="Items" ShowHead="false"
                       Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="ShowPrivateAction" IsAuthenticated="IsAuthenticated"></MediaListFull>
    </RenderControl>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End" Size="Size.Small">
        @WEB.Resources.Button.Close
    </Button>
</ModalFooter>

@code {
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter] public EventCallback<WatchedList?> WatchedChanged { get; set; }
    [Parameter] public EventCallback<WatchingList?> WatchingChanged { get; set; }
    [Parameter] public EventCallback<WishList?> WishChanged { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public string? TitleHead { get; set; }
    
    [Parameter] public string? Search { get; set; }

    private HashSet<MediaDetail> Items { get; set; } = new();
    private RenderControlCore<HashSet<MediaDetail>> Core { get; set; } = new();
    private MediaListFull? MediaListFull;
    private Dictionary<string, string> StringParameters => new Dictionary<string, string>() { { "query", Search ?? "" } };

    protected override void OnInitialized()
    {
        WatchedListApi.DataChanged += (WatchedList? model) => { Watched = model; WatchedChanged.InvokeAsync(model); StateHasChanged(); };
        WatchingListApi.DataChanged += (WatchingList? model) => { Watching = model; WatchingChanged.InvokeAsync(model); StateHasChanged(); };
        WishListApi.DataChanged += (WishList? model) => { Wish = model; WishChanged.InvokeAsync(model); StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        Core?.LoadingStarted?.Invoke();
        var result = await TmdbSearch.GetList(Items, null, StringParameters);
        Items = result.list;
        Core?.LoadingFinished?.Invoke(Items);
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }
}
