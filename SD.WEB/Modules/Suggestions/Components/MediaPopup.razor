@using SD.Shared.Models;
@using SD.Shared.Models.List.Imdb;
@using SD.Shared.Models.List.Tmdb;
@using SD.Shared.Models.List;
@using SD.WEB.Modules.Suggestions.Core;
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Core;
@using SD.WEB.Modules.Suggestions.Resources
@using System.Globalization

@inherits ComponentCore<MediaPopup>

@inject TmdbApi TmdbApi
@inject CacheRatingsApi CacheRatingsApi
@inject ExternalIdApi ExternalIdApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">
        @media?.title
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <RenderControl Model="media" Core="Core" ExpressionEmpty="@((MediaDetail? obj)=>obj==null)">
        <Row HorizontalGutter="8" VerticalGutter="8">
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is4.OnDesktop">
                @if (string.IsNullOrEmpty(media?.poster_large))
                {
                    <CardImage Source="images/noimage.png" Alt="@media?.title"></CardImage>
                }
                else
                {
                    <Div Style="position:relative;">
                        @if (@media?.release_date < DateTime.Now.AddMonths(-3))
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="position: absolute; top: 5px; left: 5px;">@media?.release_date?.Year</Badge>
                        }
                        else
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="position: absolute; top: 5px; left: 5px;">@media?.release_date?.ToShortDateString()</Badge>
                        }
                        <Image Source="@media?.poster_large" Text="@media?.title" alt="@media?.title" Style="width: 100%;" onclick="animationShake('.alertLoginNeeded')"></Image>
                    </Div>
                }
            </Column>
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is8.OnDesktop">
                <Tabs @bind-SelectedTab="@selectedTab" FullWidth="true" RenderMode="TabsRenderMode.LazyLoad">
                    <Items>
                        <Tab Name="About">
                            @Translations.TabAbout
                        </Tab>
                        <Tab Name="WhereToWatch">
                            @Translations.TabWhereToWatch
                        </Tab>
                        <Tab Name="Credits">
                            @Translations.TabCredits
                        </Tab>
                        @if (media?.Collection.Any() ?? false)
                        {
                            <Tab Name="Collection">@(media.MediaType == MediaType.movie ? Translations.TabCollection1 : Translations.TabCollection2)</Tab>
                        }
                        <Tab Name="Reviews">Reviews</Tab>
                    </Items>
                    <Content>
                        <TabPanel Name="About" Class="mt-2">
                            <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd.Is1.FromBottom">
                                @media?.runtime.FormatRuntime()
                            </Badge>
                            @foreach (var item in media?.Genres ?? new List<string>())
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd.Is1.FromBottom">@item</Badge>
                            }
                            <Paragraph>
                                <RenderControl PartialComponent="true" Core="CoreRatings" Model="ratingsCache" ExpressionEmpty="@((CacheDocument<Ratings>? obj)=>obj?.Data==null)">
                                    @if (ratingsCache != null && !string.IsNullOrEmpty(ratingsCache.Data?.imdb))
                                    {
                                        <Badge Color="GetColorByRating(ratingsCache.Data?.imdb)" Margin="Margin.Is1.FromEnd" Padding="Padding.Is1.FromStart.Is1.OnY" title="IMDb">
                                            <Image Source="logo/imdb.png" Style="height: 20px;" alt="imdb" Margin="Margin.Is1.FromEnd"></Image>@ratingsCache.Data?.imdb
                                        </Badge>
                                    }
                                    @if (ratingsCache != null && !string.IsNullOrEmpty(ratingsCache.Data?.tmdb))
                                    {
                                        <Badge Color="GetColorByRating(ratingsCache.Data?.tmdb)" Margin="Margin.Is1.FromEnd" Padding="Padding.Is1.FromStart.Is1.OnY" title="TMDB">
                                            <Image Source="logo/tmdb.png" Style="height: 20px;" alt="tmdb" Margin="Margin.Is1.FromEnd"></Image>@ratingsCache.Data?.tmdb
                                        </Badge>
                                    }
                                    @if (ratingsCache != null && !string.IsNullOrEmpty(ratingsCache.Data?.metacritic))
                                    {
                                        <Badge Color="GetColorByRating(ratingsCache.Data?.metacritic)" Margin="Margin.Is1.FromEnd" Padding="Padding.Is1.FromStart.Is1.OnY" title="Metacritic">
                                            <Image Source="logo/metacritic.png" Style="height: 20px;" alt="metacritic" Margin="Margin.Is1.FromEnd"></Image>@ratingsCache.Data?.metacritic
                                        </Badge>
                                    }
                                    @if (ratingsCache != null && !string.IsNullOrEmpty(ratingsCache.Data?.trakt))
                                    {
                                        <Badge Color="GetColorByRating(ratingsCache.Data?.trakt)" Margin="Margin.Is1.FromEnd" Padding="Padding.Is1.FromStart.Is1.OnY" title="Trakt">
                                            <Image Source="logo/trakt.png" Style="height: 20px;" alt="trakt" Margin="Margin.Is1.FromEnd"></Image>@ratingsCache.Data?.trakt
                                        </Badge>
                                    }
                                    @if (ratingsCache != null && !string.IsNullOrEmpty(ratingsCache.Data?.rottenTomatoes))
                                    {
                                        <Badge Color="GetColorByRating(ratingsCache.Data?.rottenTomatoes)" Margin="Margin.Is1.FromEnd" Padding="Padding.Is1.FromStart.Is1.OnY" title="Rotten Tomatoes">
                                            <Image Source="logo/rotten-tomatoes.png" Style="height: 20px;" alt="rotten tomatoes" Margin="Margin.Is1.FromEnd"></Image>@ratingsCache.Data?.rottenTomatoes
                                        </Badge>
                                    }
                                    @if (ratingsCache != null && !string.IsNullOrEmpty(ratingsCache.Data?.filmAffinity))
                                    {
                                        <Badge Color="GetColorByRating(ratingsCache.Data?.filmAffinity)" Margin="Margin.Is1.FromEnd" Padding="Padding.Is1.FromStart.Is1.OnY" title="Film Affinity">
                                            <Image Source="logo/film-affinity.png" Style="height: 20px;" alt="film affinity" Margin="Margin.Is1.FromEnd"></Image>@ratingsCache.Data?.filmAffinity
                                        </Badge>
                                    }
                                </RenderControl>
                            </Paragraph>
                            <Paragraph TextAlignment="TextAlignment.Justified">
                                @media?.plot
                            </Paragraph>
                            @if (media != null && media.Videos.Any())
                            {
                                <ListGroup Margin="Margin.Is2.FromTop" Scrollable="true" Style="max-height: 190px">
                                    @foreach (var item in media.Videos)
                                    {
                                        <ListGroupItem Padding="Padding.Is1">
                                            <Button Type="ButtonType.Link" To="@($"https://www.youtube.com/watch?v={item.key}")" Target="Target.Blank" Color="Color.Light"
                                                    TextAlignment="TextAlignment.Justified" Width="Width.Is100">
                                                <Blazorise.Icon Name="FontAwesomeIcons.Youtube" Class="fa-brands"></Blazorise.Icon>
                                                @item.name
                                            </Button>
                                        </ListGroupItem>
                                    }
                                </ListGroup>
                            }
                        </TabPanel>
                        <TabPanel Name="WhereToWatch" Class="mt-2">
                            <StreamingComponent tmdb_id="@tmdb_id" type="@type" homepage="@media?.homepage"></StreamingComponent>
                        </TabPanel>
                        <TabPanel Name="Credits" Class="mt-2">
                            <CreditsComponent tmdb_id="@tmdb_id" type="@type" WatchedList="Watched" WatchingList="Watching" WishList="Wish"
                                              ShowPrivateAction="ShowPrivateAction" IsAuthenticated="IsAuthenticated"></CreditsComponent>
                        </TabPanel>
                        @if (media?.Collection.Any() ?? false)
                        {
                            <TabPanel Name="Collection" Class="mt-2">
                                <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is1.FromBottom">
                                    @foreach (var item in media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue))
                                    {
                                        <Column ColumnSize="ColumnSize.Is6.OnMobile.Is4.OnWidescreen.Is3.OnFullHD">
                                            <Card>
                                                <Blazorise.Link Clicked="@(async() => await CollectionClicked(item))" Style="position: relative; text-decoration: none; color: var(--bs-card-color);">
                                                    @if (item.release_date.HasValue)
                                                    {
                                                        if (item.release_date.Value < DateTime.Now.AddMonths(-3))
                                                        {
                                                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date.Value.Year</Badge>
                                                        }
                                                        else
                                                        {
                                                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date.Value.ToShortDateString()</Badge>
                                                        }
                                                    }
                                                    @if (string.IsNullOrEmpty(item.poster_small))
                                                    {
                                                        <CardImage Source="images/noimage.png" Alt="@item.title" title="@item.title" Style="cursor: pointer;"></CardImage>
                                                    }
                                                    else
                                                    {
                                                        if (type == MediaType.movie) //you don't put seasons as wishes
                                                        {
                                                            var wishedMovie = Wish?.Contains(MediaType.movie, item.id) ?? false;
                                                            if (wishedMovie)
                                                            {
                                                                <Blazorise.Icon Name="FontAwesomeIcons.Bookmark" TextColor="TextColor.Light"
                                                                                Style="position: absolute; bottom: 5px; left: 5px; z-index: 1;"></Blazorise.Icon>
                                                            }
                                                        }

                                                        var movieWatched = Watched?.Contains(MediaType.movie, item.id) ?? false;
                                                        var showWatched = Watching?.GetWatchingItems(MediaType.tv, media.tmdb_id).Any(a => a == item.id) ?? false;
                                                        if (movieWatched || showWatched)
                                                        {
                                                            <Blazorise.Icon Name="FontAwesomeIcons.Eye" TextColor="TextColor.Light"
                                                                            Style="position: absolute; bottom: 2px; right: 5px; z-index: 1;"></Blazorise.Icon>
                                                        }

                                                        <CardImage Source="@item.poster_small" Alt="@item.title" title="@item.title" Style=@($"cursor: pointer;")></CardImage>
                                                    }
                                                    <CardBody Class="py-1" Style="cursor: pointer;">
                                                        @item.title
                                                    </CardBody>
                                                </Blazorise.Link>
                                            </Card>
                                        </Column>
                                    }
                                </Row>
                            </TabPanel>
                        }
                        <TabPanel Name="Reviews" Class="mt-2">
                            <ReviewComponent imdb_id="@imdb_id" english_title="@EnglishTitle?.RemoveSpecialCharacters().RemoveDiacritics().Replace(" ","-").ToLower()"
                                             type="@type" release_date="@media?.release_date"></ReviewComponent>
                        </TabPanel>
                    </Content>
                </Tabs>
            </Column>
        </Row>
    </RenderControl>
</ModalBody>
<ModalFooter>
    <Alert Color="Color.Info" Margin="Margin.Is0" Visible="true" Width="Width.Is100" Class="alertLoginNeeded">
        @if (!IsAuthenticated)
        {
            <AlertMessage Style="margin-right: 0.3rem;">
                @Resources.Translations.LoginNeeded
            </AlertMessage>
        }
        <AlertDescription>
            @Resources.Translations.PlatformForManaging
        </AlertDescription>
    </Alert>
</ModalFooter>
<ModalFooter>
    <Container Fluid="true" Margin="Margin.Is0" Padding="Padding.Is0.OnX">
        @if (ShowPrivateAction)
        {
            @if (Wish?.Movies.Any(a => a.id == tmdb_id) ?? false)
            {
                <Button Color="Color.Danger" Clicked="Remove" Margin="Margin.Is2.FromEnd" Size="Size.Small">
                    @Resources.Translations.RemoveWishlist
                </Button>
            }
            else if (Wish?.Shows.Any(a => a.id == tmdb_id) ?? false)
            {
                <Button Color="Color.Danger" Clicked="Remove" Margin="Margin.Is2.FromEnd" Size="Size.Small">
                    @Resources.Translations.RemoveWishlist
                </Button>
            }
            else if (!IsAuthenticated)
            {
                <span onclick="animationShake('.alertLoginNeeded')">
                    <Button Color="Color.Primary" Margin="Margin.Is2.FromEnd" Size="Size.Small">
                        @Resources.Translations.AddWishlist
                    </Button>
                </span>
            }
            else
            {
                <Button Color="Color.Primary" Clicked="Add" Margin="Margin.Is2.FromEnd" Size="Size.Small">
                    @Resources.Translations.AddWishlist
                </Button>
            }

            @if (Watched?.Movies.Contains(tmdb_id ?? "") ?? false)
            {
                <Button Color="Color.Danger" Clicked="IsNotWatched" Margin="Margin.Is2.FromEnd" Size="Size.Small">
                    @Resources.Translations.ButtonNotWatched
                </Button>
            }
            else if (Watched?.Shows.Contains(tmdb_id ?? "") ?? false)
            {
                <Button Color="Color.Danger" Clicked="IsNotWatched" Margin="Margin.Is2.FromEnd" Size="Size.Small">
                    @Resources.Translations.ButtonNotWatched
                </Button>
            }
            else if (!IsAuthenticated)
            {
                <span onclick="animationShake('.alertLoginNeeded')">
                    <Button Color="Color.Primary" Margin="Margin.Is2.FromEnd" Size="Size.Small">
                        @Resources.Translations.ButtonWatched
                    </Button>
                </span>
            }
            else
            {
                <Button Color="Color.Primary" Clicked="IsWatched" Margin="Margin.Is2.FromEnd" Size="Size.Small">
                    @Resources.Translations.ButtonWatched
                </Button>
            }
        }
        <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End" Size="Size.Small">
            @WEB.Resources.Button.Close
        </Button>
    </Container>
</ModalFooter>

@code {
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public WatchedList? Watched { get; set; }
    [Parameter] public WatchingList? Watching { get; set; }
    [Parameter] public WishList? Wish { get; set; }
    [Parameter] public EventCallback<WatchedList?> WatchedChanged { get; set; }
    [Parameter] public EventCallback<WatchingList?> WatchingChanged { get; set; }
    [Parameter] public EventCallback<WishList?> WishChanged { get; set; }
    [Parameter] public bool ShowPrivateAction { get; set; }

    [Parameter] public string? tmdb_id { get; set; }
    [Parameter] public MediaType? type { get; set; }

    public RenderControlCore<MediaDetail?>? Core { get; set; } = new();
    private MediaDetail? media { get; set; }
    public string? imdb_id { get; set; }
    public string? EnglishTitle { get; set; }

    string selectedTab = "About";

    public RenderControlCore<CacheDocument<Ratings>?> CoreRatings { get; set; } = new();
    private CacheDocument<Ratings>? ratingsCache;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(tmdb_id)) throw new ArgumentNullException(nameof(tmdb_id));
        if (type == null) throw new ArgumentNullException(nameof(type));

        WatchedListApi.DataChanged += (WatchedList? model) => { Watched = model; WatchedChanged.InvokeAsync(model); StateHasChanged(); };
        WatchingListApi.DataChanged += (WatchingList? model) => { Watching = model; WatchingChanged.InvokeAsync(model); StateHasChanged(); };
        WishListApi.DataChanged += (WishList? model) => { Wish = model; WishChanged.InvokeAsync(model); StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        Core?.LoadingStarted?.Invoke();
        media = await TmdbApi.GetMediaDetail(tmdb_id, type!.Value);
        media.Videos.Reverse();
        imdb_id = await ExternalIdApi.GetImdbId(type, tmdb_id);
        Core?.LoadingFinished?.Invoke(media);

        EnglishTitle = media?.original_title;

        if (media != null && media.original_language != "en")
        {
            //title must be in english
            var en_media = await TmdbApi.GetMediaDetail(tmdb_id, type!.Value, "en-US");
            EnglishTitle = en_media?.title;
        }

        EnglishTitle = EnglishTitle?.Replace("&", "");

        StateHasChanged();

        if (media?.MediaType == MediaType.movie)
        {
            ratingsCache = await CacheRatingsApi.GetMovieRatings(imdb_id, media?.tmdb_id, EnglishTitle, media?.release_date, media?.rating.ToString("#.#"), CoreRatings);
        }
        else
        {
            ratingsCache = await CacheRatingsApi.GetShowRatings(imdb_id, media?.tmdb_id, EnglishTitle, media?.release_date, media?.rating.ToString("#.#"), CoreRatings);
        }
    }

    private Color GetColorByRating(string? rating)
    {
        if (string.IsNullOrEmpty(rating)) return Color.Secondary;

        float.TryParse(rating.Replace(",", "."), NumberStyles.Any, CultureInfo.InvariantCulture, out float val);

        if (val > 10) val = val / 10;

        if (val >= 8)
        {
            return Color.Success;
        }
        else if (val >= 6)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Danger;
        }
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }

    private async Task CollectionClicked(Collection? item)
    {
        if (type == MediaType.movie)
            await OpenPopupMedia(item, type);
        else
            await OpenPopupSeason(item);
    }

    private async Task Add()
    {
        if (media == null) throw new ArgumentNullException(nameof(media));

        try
        {
            Wish ??= new();

            var item = new WishListItem(media.tmdb_id, media.title, media.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), media.runtime);
            var client = await PrincipalApi.Get(true);

            Wish = await WishListApi.Add(media.MediaType, Wish, item, client?.ClientePaddle);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove()
    {
        ArgumentNullException.ThrowIfNull(media);

        try
        {
            Wish = await WishListApi.Remove(media.MediaType, media?.tmdb_id);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task IsWatched()
    {
        if (media == null) throw new ArgumentNullException(nameof(media));

        try
        {
            var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

            if (hasCollection)
            {
                var watching = Watching ?? new WatchingList();
                var collectionId = media.MediaType == MediaType.movie ? media.collectionId?.ToString() : media.tmdb_id;

                await ModalService.SelectItemsCollection(
                    media.Collection,
                    watching.GetWatchingItems(media.MediaType, collectionId),
                    new EventCallbackFactory().Create(this, async (HashSet<string> list) => await SelectedItemsChanged(media, list, media.Collection.Count)));
            }
            else
            {
                var client = await PrincipalApi.Get(true);
                Watched = await WatchedListApi.Add(media.MediaType, Watched, media.tmdb_id, client?.ClientePaddle);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task SelectedItemsChanged(MediaDetail media, HashSet<string> items, int collectionItemsCount)
    {
        var client = await PrincipalApi.Get(true);

        //watched list

        if (media.MediaType == MediaType.movie)
        {
            Watched = await WatchedListApi.Add(MediaType.movie, Watched, string.Join(',', items), client?.ClientePaddle);
        }
        else
        {
            Watched = await WatchedListApi.Add(MediaType.tv, Watched, media.tmdb_id, client?.ClientePaddle);
        }

        //watching list

        WatchingListItem item;

        if (media.MediaType == MediaType.movie)
        {
            item = new WatchingListItem(media?.collectionId?.ToString(), media?.collectionName, media?.collectionLogo?.Replace(TmdbOptions.SmallPosterPath, ""), collectionItemsCount, items);
        }
        else
        {
            item = new WatchingListItem(media?.tmdb_id, media?.title, media?.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), collectionItemsCount, items);
        }

        Watching = await WatchingListApi.Add(type, Watching, item, client?.ClientePaddle);
    }

    private async Task IsNotWatched()
    {
        if (media == null) throw new ArgumentNullException(nameof(media));

        try
        {
            //watched

            Watched = await WatchedListApi.Remove(media.MediaType, media.tmdb_id);

            //watching

            var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

            if (hasCollection)
            {
                if (media.MediaType == MediaType.movie)
                {
                    Watching = await WatchingListApi.Remove(media.MediaType, media.collectionId?.ToString(), media.tmdb_id);
                }
                else if (media.MediaType == MediaType.tv)
                {
                    Watching = await WatchingListApi.Remove(media.MediaType, media.tmdb_id, null);
                }
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenPopupMedia(Collection? collection, MediaType? mediaType)
    {
        await ModalService.MediaPopup(Watched, Watching, Wish, mediaType, collection?.id?.ToString(), ShowPrivateAction, IsAuthenticated);
    }

    private async Task OpenPopupSeason(Collection? collection)
    {
        await ModalService.SeasonPopup(media?.title, collection?.title, tmdb_id, collection?.SeasonNumber, IsAuthenticated);
    }
}