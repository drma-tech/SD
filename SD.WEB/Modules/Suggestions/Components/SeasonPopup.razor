@using SD.Shared.Models.List.Tmdb;
@using SD.WEB.Modules.Suggestions.Core;

@inherits ComponentCore<SeasonPopup>
@inject TmdbApi TmdbApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@ShowTitle (@ShowSeasonName)</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody MaxHeight="70">
        <RenderControl Core="Core" Model="Season" ExpressionEmpty="@((TmdbSeason? obj)=> obj == null || obj.episodes.Empty())">
            <ListGroup Flush>
            @foreach (var item in Season?.episodes ?? new())
            {
                <ListGroupItem Padding="Padding.Is2">
                    <Row VerticalGutter="8" HorizontalGutter="8">
                        <Column ColumnSize="ColumnSize.Is3">
                            @if (string.IsNullOrEmpty(item.still_path))
                            {
                                <CardImage Source="images/noimage.png" Alt="@item.name" title="@item.name" Style="height: 100px;"></CardImage>
                            }
                            else
                            {
                                <CardImage Source="@(TmdbOptions.SmallPosterPath +  item.still_path)" Alt="@item.name"></CardImage>
                            }
                        </Column>
                        <Column>
                            <Heading Size="HeadingSize.Is6" Margin="Margin.Is1.FromBottom">@(item.episode_number + " - " + item.name)</Heading>
                            <Small TextAlignment="TextAlignment.Justified">@item.overview</Small>
                            </Column>
                        </Row>
                    </ListGroupItem>
            }
        </ListGroup>
    </RenderControl>
</ModalBody>
@if (!IsAuthenticated)
{
    <ModalFooter>
        <Alert Color="Color.Info" Margin="Margin.Is0" Visible="true" Width="Width.Is100">
            <AlertMessage>
                @Resources.Translations.LoginNeeded
            </AlertMessage>
            <AlertDescription>
                @Resources.Translations.PlatformForManaging
            </AlertDescription>
        </Alert>
    </ModalFooter>
}
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End" Size="Size.Small" Margin="Margin.Is0">
        @WEB.Resources.Button.Close
    </Button>
</ModalFooter>

@code {
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public string? ShowTitle { get; set; }
    [Parameter] public string? ShowSeasonName { get; set; }
    [Parameter] public string? tmdb_id { get; set; }
    [Parameter] public int? season_number { get; set; }

    public RenderControlCore<TmdbSeason?>? Core { get; set; } = new();
    public TmdbSeason? Season { get; set; }

    protected override async Task LoadDataRender()
    {
        var parameters = new Dictionary<string, string>()
            {
                { "api_key", TmdbOptions.ApiKey },
                { "language", AppStateStatic.Language.GetName(false) ?? "en-US" }
            };

        Core?.LoadingStarted?.Invoke();
        Season = await TmdbApi.GetSeason(tmdb_id, season_number, parameters);
        Core?.LoadingFinished?.Invoke(Season);
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }
}
