@using SD.Shared.Models.List.Tmdb;
@using SD.WEB.Modules.Provider.Core;
@using SD.WEB.Modules.Suggestions.Core;
@using SD.WEB.Modules.Suggestions.Resources
@inherits ComponentCore<StreamingComponent>

@inject AllProvidersApi AllProvidersApi
@inject TmdbApi TmdbApi
@inject IJSRuntime JS

<RenderControl Core="Core" Model="Providers" ExpressionEmpty="@((MediaProviders? obj)=>obj==null)">
    @{
        var hasProvider = false;

        if (Providers?.GetFreeListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;
            <Row HorizontalGutter="4" VerticalGutter="4">
                <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                    <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">
                        @Translations.DeliveryModelFree
                    </Button>
                </Column>
                @foreach (var item in Providers.GetFreeListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                            <Button Type="ButtonType.Link" Target="Target.Blank" To="@provider.link" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" alt="@item.provider_name" Style="width: 100%"></Image>
                                <AuthorizeView Roles="administrator">
                                    <Authorized>
                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.FREE))
                                        {
                                            <span>false</span>
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </Button>
                        </Column>
                    }
                }
            </Row>
        }
        if (Providers?.GetAdsListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;
            <Row HorizontalGutter="4" VerticalGutter="4">
                <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                    <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">
                        @Translations.DeliveryModelAds
                    </Button>
                </Column>
                @foreach (var item in Providers.GetAdsListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                            <Button Type="ButtonType.Link" Target="Target.Blank" To="@provider.link" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" alt="@item.provider_name" Style="width: 100%"></Image>
                                <AuthorizeView Roles="administrator">
                                    <Authorized>
                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.AVOD))
                                        {
                                            <span>false</span>
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </Button>
                        </Column>
                    }
                }
            </Row>
        }
        if (Providers?.GetFlatRateListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;
            <Row HorizontalGutter="4" VerticalGutter="4">
                <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                    <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">
                        @Translations.DeliveryModelFlatRate
                    </Button>
                </Column>
                @foreach (var item in Providers.GetFlatRateListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                            <Button Type="ButtonType.Link" Target="Target.Blank" To="@provider.link" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" alt="@item.provider_name" Style="width: 100%"></Image>
                                <AuthorizeView Roles="administrator">
                                    <Authorized>
                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.SVOD))
                                        {
                                            <span>false</span>
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </Button>
                        </Column>
                    }
                }
            </Row>
        }
        if (Providers?.GetFlatRateBuyListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;
            <Row HorizontalGutter="4" VerticalGutter="4">
                <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                    <Button Color="Color.Warning" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">
                        @Translations.DeliveryModelFlatRateBuy
                    </Button>
                </Column>
                @foreach (var item in Providers.GetFlatRateBuyListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                            <Button Type="ButtonType.Link" Target="Target.Blank" To="@provider.link" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" alt="@item.provider_name" Style="width: 100%"></Image>
                                <AuthorizeView Roles="administrator">
                                    <Authorized>
                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.PVOD))
                                        {
                                            <span>false</span>
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </Button>
                        </Column>
                    }
                }
            </Row>
        }
        if (Providers?.GetRentListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;
            <Row HorizontalGutter="4" VerticalGutter="4">
                <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                    <Button Color="Color.Primary" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">
                        @Translations.DeliveryModelRent
                    </Button>
                </Column>
                @foreach (var item in Providers.GetRentListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                            <Button Type="ButtonType.Link" Target="Target.Blank" To="@provider.link" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" alt="@item.provider_name" Style="width: 100%"></Image>
                                <AuthorizeView Roles="administrator">
                                    <Authorized>
                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.TVOD))
                                        {
                                            <span>false</span>
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </Button>
                        </Column>
                    }
                }
            </Row>
        }
        if (Providers?.GetBuyListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;
            <Row HorizontalGutter="4" VerticalGutter="4">
                <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                    <Button Color="Color.Danger" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">
                        @Translations.DeliveryModelBuy
                    </Button>
                </Column>
                @foreach (var item in Providers.GetBuyListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                            <Button Type="ButtonType.Link" Target="Target.Blank" To="@provider.link" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" alt="@item.provider_name" Style="width: 100%"></Image>
                                <AuthorizeView Roles="administrator">
                                    <Authorized>
                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.TVOD))
                                        {
                                            <span>false</span>
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </Button>
                        </Column>
                    }
                }
            </Row>
        }

        if (hasProvider)
        {
            <Row Margin="Margin.Is2.FromTop">
                <Column>
                    <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is0.FromBottom" Visible="true">
                        @Translations.Offering: <a href=@("https://www.justwatch.com/") target="_blank" rel="nofollow">@(new Uri("https://www.justwatch.com/").Host) <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon></a>
                    </Alert>
                </Column>
            </Row>
        }
        else
        {
            <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is2.FromTop" Visible="true">
                @Translations.TitleNotAvailable
            </Alert>
        }

        var link = Providers?.GetLink(AppStateStatic.Region);
        if (string.IsNullOrEmpty(link))
        {
            link = Providers?.GetLink(Region.US);
        }
        @if (!string.IsNullOrEmpty(link))
        {
            var uri_link = new Uri(link);
            var fomatted_link = "https://" + uri_link.Host + string.Join("", uri_link.Segments.SkipLast(1));
            <Row Margin="Margin.Is2.FromTop">
                <Column>
                    <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is0.FromBottom" Visible="true">
                        @Translations.MoreInformation: <a href="@fomatted_link" target="_blank" rel="nofollow">@(uri_link.Host) <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon></a>
                    </Alert>
                </Column>
            </Row>
        }

        <AuthorizeView Roles="administrator">
            <Authorized>
                <Button Color="Color.Secondary" Clicked="@Atualizar" Disabled="false" Margin="Margin.Is2.FromTop">Atualizar</Button>
            </Authorized>
        </AuthorizeView>
    }
</RenderControl>

@code {
    [Parameter] public string? tmdb_id { get; set; }
    [Parameter] public MediaType? type { get; set; }

    public RenderControlCore<MediaProviders?>? Core { get; set; } = new();
    private MediaProviders? Providers { get; set; }
    private AllProviders? AllProviders { get; set; }

    protected override async Task LoadDataRender()
    {
        AllProviders = await AllProvidersApi.GetAll(null);

        Core?.LoadingStarted?.Invoke();
        Providers = await TmdbApi.GetWatchProvidersList(tmdb_id, type);
        Core?.LoadingFinished?.Invoke(Providers);
    }

    private async Task Atualizar()
    {
        if (Providers == null) return;

        foreach (var item in Providers.GetFreeListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.FREE;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetAdsListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.AVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetFlatRateListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.SVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetBuyListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.TVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetRentListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.TVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetFlatRateBuyListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.PVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        if (AllProviders != null)
        {
            await JS.InvokeVoidAsync("window.localStorage.setItem", new object[] { "AllProviders", System.Text.Json.JsonSerializer.Serialize(AllProviders) });
        }
    }
}
