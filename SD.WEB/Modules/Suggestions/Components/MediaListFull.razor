@using SD.Shared.Models.List.Tmdb
@using SD.WEB.Modules.Suggestions.Core
@using SD.WEB.Modules.Suggestions.Interface
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<MediaListFull>

@inject ExternalIdApi ExternalIdApi
@inject TmdbCreditApi TmdbCreditApi

@if (ShowHead)
{
    <HeaderComponent Title="@GetTitle"></HeaderComponent>
}
<RenderControl Core="Core" Model="Items" ExpressionEmpty="@((HashSet<MediaDetail> list) => list.Empty())">
    <div class="grid-relative-container-sm">
        @for (var i = 1; i <= Items.Count; i++)
        {
            var item = Items.ElementAt(i - 1);
            <Card TextAlignment="TextAlignment.Center">
                <PosterComponent Date="@item.release_date" Rating="@item.rating" Poster="@item.poster_small" Title="@item.title" Comments="@item.comments" CommentsSeparator="@CommentsSeparator"
                                 TmdbId="@item.tmdb_id" MediaType="@item.MediaType" Clicked="@(() => OpenPopupMedia(item))" WatchedList="Watched" WishList="Wish" CommentImage="CommentImage">
                </PosterComponent>
            </Card>
        }
    </div>
</RenderControl>
@if (MediaListApi != null)
{
    <Div TextAlignment="TextAlignment.Center">
        <Button Color="Color.Secondary" Size="Size.Small" Margin="Margin.Is2" Clicked="LoadMore" Disabled="DisableLoadMore">
            @Button.LoadMore
        </Button>
    </Div>
}

@code {
    [Parameter] [EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter] [EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter] [EditorRequired] public WishList? Wish { get; set; }
    [Parameter] [EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter] [EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public bool ShowHead { get; set; } = true;
    [Parameter] public string? TitleHead { get; set; }

    [Parameter] public RenderControlCore<HashSet<MediaDetail>>? Core { get; set; } = new();
    [Parameter] public HashSet<MediaDetail> Items { get; set; } = new();
    [Parameter] public EventCallback<HashSet<MediaDetail>> ItemsChanged { get; set; }

    [Parameter] public bool IsIMDB { get; set; }
    [Parameter] public IMediaListApi? MediaListApi { get; set; }
    [Parameter] public MediaType? TypeSelected { get; set; }
    [Parameter] public Dictionary<string, string> StringParameters { get; set; } = new();
    [Parameter] public EnumLists? List { get; set; }
    [Parameter] public string? CommentsSeparator { get; set; } = ",";
    [Parameter] public bool CommentImage { get; set; }

    private string? GetTitle => List != null ? List.GetName() : TitleHead;
    public bool DisableLoadMore { get; set; }
    private int currentPage = 1;

    // protected override void OnInitialized()
    // {
    //     //if (!string.IsNullOrEmpty(list_id) && !NextPage.HasDelegate) throw new ArgumentNullException(nameof(NextPage));
    //     //if (NextPage.HasDelegate && string.IsNullOrEmpty(list_id)) throw new ArgumentNullException(nameof(list_id));

    //     //TODO: analyse this
    //     // AppState.WishListChanged += StateHasChanged;
    //     // AppState.WatchedListChanged += StateHasChanged;
    // }

    protected override async Task LoadDataRender()
    {
        Core?.ShowLoading();
        await LoadItems();
        Core?.HideLoading(Items);
    }

    private async Task LoadItems()
    {
        if (MediaListApi != null)
        {
            var result = await MediaListApi.GetList(new HashSet<MediaDetail>(), TypeSelected, StringParameters, List);
            // await Task.Delay(1); //TODO: for some reason, changing the media type is not updating the post image (probably because of the lazyload css class)

            Items = result.list;
            DisableLoadMore = result.lastPage || Items.Count >= 250;

            if (Items.Count < 10) //force reload, if the filters bring few records
            {
                var result2 = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, ++currentPage);
                foreach (var item in result2.list)
                {
                    Items.Add(item);
                }

                DisableLoadMore = result.lastPage || Items.Count >= 250;
            }
        }
    }

    private async Task OpenPopupMedia(MediaDetail? media)
    {
        var tmdb_id = "";

        if (IsIMDB) //for now, only tv series (imdb) need this kind of workaround
        {
            tmdb_id = await ExternalIdApi.GetTmdbId(media?.MediaType, media?.tmdb_id);
        }
        else
        {
            tmdb_id = media?.tmdb_id;
        }

        if (media?.MediaType == MediaType.person)
        {
            var result = await TmdbCreditApi.GetListByPerson(tmdb_id);
            var items = new HashSet<MediaDetail>();

            foreach (var item in result?.crew ?? Enumerable.Empty<CrewByPerson>())
            {
                var type = item.media_type == "tv" ? MediaType.tv : MediaType.movie;
                items.Add(new MediaDetail
                {
                    tmdb_id = item.id.ToString(),
                    title = type == MediaType.movie ? item.title : item.name,
                    plot = string.IsNullOrEmpty(item.overview) ? "No plot found" : item.overview,
                    release_date = type == MediaType.movie ? item.release_date?.GetDate() : item.first_air_date?.GetDate(),
                    poster_small = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.SmallPosterPath + item.poster_path,
                    poster_large = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.LargePosterPath + item.poster_path,
                    rating = item.vote_count > 10 ? item.vote_average ?? 0 : 0,
                    MediaType = type
                });
            }

            foreach (var item in result?.cast ?? new List<CastByPerson>())
            {
                var type = item.media_type == "tv" ? MediaType.tv : MediaType.movie;

                if (type == MediaType.movie && item.order > 24) continue;
                if (type == MediaType.tv && item.episode_count < 3) continue;

                items.Add(new MediaDetail
                {
                    tmdb_id = item.id.ToString(),
                    title = type == MediaType.movie ? item.title : item.name,
                    plot = string.IsNullOrEmpty(item.overview) ? "No plot found" : item.overview,
                    release_date = type == MediaType.movie ? item.release_date?.GetDate() : item.first_air_date?.GetDate(),
                    poster_small = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.SmallPosterPath + item.poster_path,
                    poster_large = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.LargePosterPath + item.poster_path,
                    rating = item.vote_count > 10 ? item.vote_average ?? 0 : 0,
                    MediaType = type,
                    comments = type == MediaType.tv ? $"{item.episode_count} episodes" : ""
                });
            }

            await ModalService.CompleteListPopup($"{media?.title}", Watched, Watching, Wish, items.OrderByDescending(o => o.release_date).ToHashSet(), ShowPrivateAction, IsAuthenticated);
        }
        else
        {
            await ModalService.MediaPopup(Watched, Watching, Wish, media?.MediaType, tmdb_id, ShowPrivateAction, IsAuthenticated);
        }
    }

    private async Task LoadMore()
    {
        if (MediaListApi != null)
        {
            var result = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, ++currentPage);
            Items = result.list;
            DisableLoadMore = result.lastPage || Items.Count >= 250;

            await ItemsChanged.InvokeAsync(Items);
        }
    }

}