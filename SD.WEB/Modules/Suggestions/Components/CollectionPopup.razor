@using SD.Shared.Models.List.Tmdb
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Suggestions.Core
@using SD.WEB.Modules.Suggestions.Resources
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<CollectionPopup>

@inject TmdbApi TmdbApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@collection?.name</ModalTitle>
    <CloseButton/>
</ModalHeader>
<ModalBody MaxHeight="70">
    <RenderControl Core="Core" Model="collection" ExpressionEmpty="@((TmdbCollection? obj) => obj == null || obj.parts.Empty())">
        <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is1.FromBottom">
            @foreach (var item in collection?.parts.OrderBy(o => o.release_date.GetDate()) ?? Enumerable.Empty<Part>())
            {
                <Column ColumnSize="ColumnSize.Is4.OnMobile.Is3.OnWidescreen.Is2.OnFullHD">
                    <Card>
                        <Blazorise.Link Clicked="@(async () => await CollectionClicked(item))" Style="position: relative;">
                            @{
                                var release_date = item.release_date.GetDate();
                            }
                            @if (release_date.HasValue)
                            {
                                if (release_date.Value < DateTime.Now.AddMonths(-3))
                                {
                                    <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@release_date.Value.Year</Badge>
                                }
                                else
                                {
                                    <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@release_date.Value.ToShortDateString()</Badge>
                                }
                            }
                            @if (string.IsNullOrEmpty(item.poster_path))
                            {
                                <CardImage Source="images/noimage.png" Alt="@item.title" title="@item.title" Style="cursor: pointer;"></CardImage>
                            }
                            else
                            {
                                if (type == MediaType.movie) //you don't put seasons as wishes
                                {
                                    var wishedMovie = Wish?.Contains(MediaType.movie, item.id.ToString()) ?? false;
                                    if (wishedMovie)
                                    {
                                        <Blazorise.Icon Name="FontAwesomeIcons.Bookmark" TextColor="TextColor.Light"
                                                        Style="position: absolute; bottom: 5px; left: 5px; z-index: 1;">
                                        </Blazorise.Icon>
                                    }
                                }

                                var watching = Watching?.GetWatchingItems(type, collection?.id.ToString()).Any(a => a == item.id.ToString()) ?? false;
                                if (watching)
                                {
                                    <Blazorise.Icon Name="FontAwesomeIcons.Eye" TextColor="TextColor.Light"
                                                    Style="position: absolute; bottom: 2px; right: 5px; z-index: 1;">
                                    </Blazorise.Icon>
                                }

                                <CardImage Source="@(TmdbOptions.SmallPosterPath + item.poster_path)" Alt="@item.title" title="@item.title"
                                           Style=@($"cursor: pointer; {(watching ? "filter: grayscale(100%);" : "")}")>
                                </CardImage>
                            }
                        </Blazorise.Link>

                        <CardBody Class="py-1">
                            @item.title
                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
    </RenderControl>
</ModalBody>
<ModalFooter>
    @if (ShowPrivateAction)
    {
        <Button Color="Color.Primary" Size="Size.Small" Clicked="@IsWatched" Float="Float.Start" title="Mark all these items as watched">
            @Translations.ButtonWatched
        </Button>
        <Button Color="Color.Danger" Size="Size.Small" Clicked="@RemoveCollection" Float="Float.Start" title="Remove this collection from my list">
            @GlobalTranslations.RemoveCollection
        </Button>
    }
    <Button Color="Color.Secondary" Size="Size.Small" Clicked="@HideModal" Float="Float.End">
        @Button.Close
    </Button>
</ModalFooter>

@code {
    [Parameter] [EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter] [EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter] [EditorRequired] public WishList? Wish { get; set; }
    [Parameter] public EventCallback<WatchedList?> WatchedChanged { get; set; }
    [Parameter] public EventCallback<WatchingList?> WatchingChanged { get; set; }
    [Parameter] public EventCallback<WishList?> WishChanged { get; set; }
    [Parameter] [EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter] [EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public string? collection_id { get; set; }
    [Parameter] public MediaType? type { get; set; }

    private RenderControlCore<TmdbCollection?>? Core { get; } = new();
    private TmdbCollection? collection { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(collection_id)) throw new ArgumentNullException(nameof(collection_id));
        if (type == null) throw new ArgumentNullException(nameof(type));

        WatchedListApi.DataChanged += model =>
        {
            Watched = model;
            WatchedChanged.InvokeAsync(model);
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            Watching = model;
            WatchingChanged.InvokeAsync(model);
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            Wish = model;
            WishChanged.InvokeAsync(model);
            StateHasChanged();
        };
    }

    protected override async Task LoadDataRender()
    {
        Core?.LoadingStarted?.Invoke();

        if (type == MediaType.movie)
        {
            var parameters = new Dictionary<string, string>
            {
                { "api_key", TmdbOptions.ApiKey },
                { "language", AppStateStatic.Language.GetName(false) ?? "en-US" }
            };

            collection = await TmdbApi.GetCollection(collection_id, parameters);
        }
        else
        {
            var show = await TmdbApi.GetMediaDetail(collection_id, MediaType.tv);

            collection = new TmdbCollection();
            collection.id = int.Parse(show.tmdb_id ?? "0");
            collection.name = show.title ?? "error";

            foreach (var season in show.Collection)
            {
                collection.parts.Add(new Part
                {
                    id = int.Parse(season.id ?? "0"),
                    season_number = season.SeasonNumber,
                    title = season.title ?? "error",
                    release_date = season.release_date.ToString() ?? "",
                    poster_path = string.IsNullOrEmpty(season.poster_small) ? "" : TmdbOptions.SmallPosterPath + season.poster_small
                });
            }
        }

        Core?.LoadingFinished?.Invoke(collection);
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }

    private async Task CollectionClicked(Part? item)
    {
        if (type == MediaType.movie)
            await OpenPopupMedia(item, type);
        else
            await OpenPopupSeason(item);
    }

    private async Task OpenPopupMedia(Part? part, MediaType? mediaType)
    {
        await ModalService.MediaPopup(Watched, Watching, Wish, mediaType, part?.id.ToString(), ShowPrivateAction, IsAuthenticated);
    }

    private async Task OpenPopupSeason(Part? part)
    {
        await ModalService.SeasonPopup(collection?.name, part?.title, collection_id, part?.season_number, IsAuthenticated);
    }

    private async Task IsWatched()
    {
        await ModalService.SelectItemsCollection(
            collection?.parts.Select(s => TmdbApi.ConvertToCollection(s)).ToList() ?? [],
            Watching?.GetWatchingItems(type, collection?.id.ToString()).ToHashSet() ?? [],
            new EventCallbackFactory().Create(this, async (HashSet<string> list) => await SelectedItemsChanged(type, collection, collection_id, list, collection?.parts.Count ?? 0)));
    }

    private async Task SelectedItemsChanged(MediaType? type, TmdbCollection? collection, string? tmdb_id, HashSet<string> items, int collectionItemsCount)
    {
        if (type == null) throw new ArgumentNullException(nameof(type));
        if (collection == null) throw new ArgumentNullException(nameof(collection));
        if (tmdb_id.Empty()) throw new ArgumentNullException(nameof(tmdb_id));
        if (items.Empty()) throw new ArgumentNullException(nameof(items));
        var client = await PrincipalApi.Get(true);

        //watched list

        if (type == MediaType.movie)
        {
            Watched = await WatchedListApi.Add(type, Watched, string.Join(',', items), client?.ClientePaddle);
        }

        //watching list

        WatchingListItem item;

        if (type == MediaType.movie)
        {
            item = new WatchingListItem(collection?.id.ToString(), collection?.name, collection?.poster_path?.Replace(TmdbOptions.SmallPosterPath, ""), collectionItemsCount, items);
        }
        else
        {
            var media = await TmdbApi.GetMediaDetail(tmdb_id, type.Value);

            item = new WatchingListItem(tmdb_id, media?.title, media?.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), collectionItemsCount, items);
        }

        Watching = await WatchingListApi.Add(type, Watching, item, client?.ClientePaddle);

        await HideModal();
    }

    private async Task RemoveCollection()
    {
        Watching = await WatchingListApi.Remove(type, collection_id);

        await HideModal();
    }

}