@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<SelectItemsCollection>

<ModalHeader>
    <ModalTitle>Quais itens já assistiu?</ModalTitle>
    <CloseButton/>
</ModalHeader>
<ModalBody MaxHeight="70">
    @foreach (var item in ItemsCollection.OrderBy(o => o.release_date ?? DateTime.MaxValue))
    {
        <Check TValue="bool" Checked="@SelectedItems.Any(a => a == item.id)" CheckedChanged="(bool value) => CheckedChanged(item.id, value)">@item.title (@item.release_date?.Year)</Check>
    }
</ModalBody>
<ModalFooter>
    <Button Color="Color.Primary" Clicked="SelectAll">
        All
    </Button>
    <Button Color="Color.Primary" Clicked="@Confirm" Disabled="SelectedItems.Empty()">
        @Button.Ok
    </Button>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End">
        @Button.Cancel
    </Button>
</ModalFooter>

@code {
    [Parameter] public List<Collection> ItemsCollection { get; set; } = new();
    [Parameter] public HashSet<string> SelectedItems { get; set; } = new();
    [Parameter] public EventCallback<HashSet<string>> SelectedItemsChanged { get; set; }

    private void CheckedChanged(string? id, bool value)
    {
        if (id == null) return;

        if (value)
            SelectedItems.Add(id);
        else
            SelectedItems.Remove(id);
    }

    private void SelectAll()
    {
        foreach (var item in ItemsCollection)
        {
            if (!string.IsNullOrEmpty(item?.id))
                SelectedItems.Add(item.id);
        }
    }

    private async Task Confirm()
    {
        try
        {
            await SelectedItemsChanged.InvokeAsync(SelectedItems);
            await ModalService.Hide();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task HideModal()
    {
        await ModalService.Hide();
    }

}