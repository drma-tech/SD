@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Suggestions.Resources
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<HeadPage>

@inject MyProvidersApi MyProvidersApi
@inject IJSRuntime Js

<Alert Color="Color.Info" Visible="true" Padding="Padding.Is2">
    <AlertDescription>
        <Row HorizontalGutter="8" VerticalGutter="8">
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (string.IsNullOrEmpty(Link))
                {
                    <Image Source="@ImageSource" Style="height: 60px;" alt="@ImageSource"></Image>
                }
                else
                {
                    <a href="@Link" target="_blank" rel="nofollow">
                        <Image Source="@ImageSource" Style="height: 60px;" alt="@ImageSource"></Image>
                    </a>
                }
            </Column>
            <Column>
                <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom" Display="Display.Block.None.OnTablet">
                    @if (string.IsNullOrEmpty(Link))
                    {
                        @Title
                    }
                    else
                    {
                        <Div>@Title</Div>
                        <a href="@Link" target="_blank" rel="nofollow">@(new Uri(Link ?? "").Host)</a>
                    }
                </Paragraph>
                <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom" Display="Display.None.Block.OnTablet">
                    @if (string.IsNullOrEmpty(Link))
                    {
                        @Title
                    }
                    else
                    {
                        @($"{Title} ▪ ")

                        <a href="@Link" target="_blank" rel="nofollow">@(new Uri(Link ?? "").Host)</a>
                    }
                </Paragraph>
                <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is0.FromBottom" Display="Display.None.Block.OnTablet">
                    @Text
                </Paragraph>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (ShowShare)
                {
                    <Button Color="Color.Primary" Clicked="@(() => Share(Navigation.Uri))" Size="Size.Small" Style="display: block; width: 100%;" Class="mb-1">
                        <Blazorise.Icon Name="FontAwesomeIcons.Share"></Blazorise.Icon> Share
                    </Button>
                }
                @if (Provider != null)
                {
                    <RenderControl PartialComponent="true" PrivateContent="true" Core="Core" Model="MyProviders"
                                   ExpressionEmpty="@((MyProviders? obj) => obj == null || obj.Items.Empty())">
                        @if (MyProviders?.Items.Any(a => a.id == Provider?.id) ?? false)
                        {
                            <Button Color="Color.Danger" Clicked="Remove" Size="Size.Small" Disabled="@(!IsAuthenticated)" Style="display: block; width: 100%;">
                                <Blazorise.Icon Name="FontAwesomeIcons.Star"></Blazorise.Icon> @Button.Remove
                            </Button>
                        }
                        else
                        {
                            <Button Color="Color.Primary" Clicked="Add" Size="Size.Small" Disabled="@(!IsAuthenticated)" Style="display: block; width: 100%;">
                                <Blazorise.Icon Name="FontAwesomeIcons.Star"></Blazorise.Icon> @Button.Add
                            </Button>
                        }
                    </RenderControl>
                }
            </Column>
        </Row>
        @if (Provider != null)
        {
            <Row HorizontalGutter="8" VerticalGutter="8">
                <Column>
                    <Badge Color="Color.Primary" Margin="Margin.Is1.FromEnd">
                        @Modules.Provider.Resources.Translations.DeliveryModel:
                    </Badge>
                    @foreach (var item in Provider?.models ?? [])
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd" title="@item.GetDescription()" Style="cursor: help;">
                            @item.GetName() <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle"></Blazorise.Icon>
                        </Badge>
                    }
                    <Badge Color="Color.Primary">
                        Countries:
                    </Badge>
                    <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">
                        @Provider?.regions.Count
                    </Badge>
                    @if (Provider?.models.Any(a => a == DeliveryModel.SVOD) ?? false)
                    {
                        <Badge Color="Color.Primary" Margin="Margin.Is1.FromEnd">
                            @Modules.Provider.Resources.Translations.Plans:
                        </Badge>
                        @if (Provider.plans.Any())
                        {
                            @foreach (var item in Provider.plans)
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.name: @item.price.ToString("C")</Badge>
                            }
                        }
                        else
                        {
                            <Badge Color="Color.Danger">@Modules.Provider.Resources.Translations.NotFound</Badge>
                        }
                    }
                </Column>
            </Row>
        }
    </AlertDescription>
</Alert>

@code {
    [Parameter] [EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public string? ImageSource { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? Link { get; set; }
    [Parameter] public bool ShowShare { get; set; }

    [Parameter] public ProviderModel? Provider { get; set; }

    public RenderControlCore<MyProviders?>? Core { get; set; } = new();
    [Parameter] public MyProviders? MyProviders { get; set; }

    protected override async Task LoadDataRender()
    {
        MyProviders = await MyProvidersApi.Get(IsAuthenticated, Core);
    }

    private async Task Add()
    {
        try
        {
            MyProviders ??= new MyProviders();

            var item = new MyProvidersItem { id = Provider?.id, name = Provider?.name, logo = Provider?.logo_path, region = AppStateStatic.Region };
            var client = await PrincipalApi.Get(true);
            MyProviders = await MyProvidersApi.Add(MyProviders, item, client?.ClientePaddle);

            await Toast.Success(Translations.PlatformAdded);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove()
    {
        try
        {
            MyProviders ??= new MyProviders();

            MyProviders = await MyProvidersApi.Remove(MyProviders.Items.First(f => f.id == Provider?.id));

            await Toast.Success(Translations.PlatformRemoved);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Share(string? link)
    {
        await Js.InvokeVoidAsync("share", link);
    }

}