@using SD.Shared.Models.Reviews
@inherits ComponentCore<ReviewComponent>

@inject CacheMetaCriticApi CacheMetaCriticApi

<RenderControl Core="Core" Model="Model" ExpressionEmpty="@((CacheDocument<ReviewModel>? obj) => obj?.Data == null || obj.Data.Items.Empty())">
    <ListGroup Flush>
        @foreach (var item in Model?.Data?.Items ?? [])
        {
            <ListGroupItem Padding="Padding.Is2">
                <Heading Size="HeadingSize.Is6" Margin="Margin.Is1.FromBottom">
                    <Badge Color="GetColorByRating(item?.score)" Margin="Margin.Is2.FromEnd">
                        @item?.score
                    </Badge> @(item?.reviewSite + (string.IsNullOrEmpty(item?.reviewer) ? "" : " | " + item?.reviewer))
                </Heading>
                <Small TextAlignment="TextAlignment.Justified">
                    @item.quote
                </Small>
                <Blazorise.Link To="@item.reviewUrl" Target="Target.Blank" Style="font-size: 80%;">Read full review</Blazorise.Link>
            </ListGroupItem>
        }
    </ListGroup>
</RenderControl>

@code {
    [Parameter] public string? ImdbId { get; set; }
    [Parameter] public string? EnglishTitle { get; set; }
    [Parameter] public DateTime? ReleaseDate { get; set; }
    [Parameter] public MediaType? Type { get; set; }

    public RenderControlCore<CacheDocument<ReviewModel>?> Core { get; set; } = new();
    public CacheDocument<ReviewModel>? Model { get; set; }

    protected override async Task LoadDataRender()
    {
        if (!string.IsNullOrEmpty(ImdbId))
        {
            if (Type == MediaType.movie)
            {
                Model = await CacheMetaCriticApi.GetMovieReviews(ImdbId, EnglishTitle, ReleaseDate, Core);
            }
            else
            {
                Model = await CacheMetaCriticApi.GetShowReviews(ImdbId, EnglishTitle, ReleaseDate, Core);
            }
        }
        else
        {
            Core.LoadingFinished?.Invoke(null);
        }
    }

    private static Color GetColorByRating(int? val)
    {
        if (!val.HasValue) return Color.Secondary;

        val = val / 10;

        return val switch
        {
            >= 8 => Color.Success,
            >= 6 => Color.Warning,
            _ => Color.Danger
        };
    }

}