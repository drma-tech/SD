@page "/suggestions/tmdb"
<SeoHeader Title="Suggestions | TMDB" Keywords="@(new []{"TMDB"})" Url="/suggestions/tmdb"></SeoHeader>
@inherits PageCore<Tmdb>

@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Resources
@using SD.WEB.Modules.Suggestions.Core
@using SD.WEB.Modules.Suggestions.Components
@inject TmdbPopularApi TmdbPopularApi
@inject TmdbTopRatedApi TmdbTopRatedApi
@inject TmdbUpcomingApi TmdbUpcomingApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<HeadPage Title="TMDB" ImageSource="logo/tmdb.png" Text="@Translations.tmdb_desc" Link="https://www.themoviedb.org/" IsAuthenticated="IsAuthenticated"></HeadPage>

@if (Settings != null && Settings.ShowAdSense)
{
    <Div TextAlignment="TextAlignment.Center">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5922021468622891" data-ad-slot="1935613755"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </Div>
}

<MediaList TitleHead="@Translations.Popular" MediaListApi="TmdbPopularApi" ShowFilter="true"
           Watched="WatchedList" Watching="WatchingList" Wish="WishList" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>
<MediaList TitleHead="@($"{Translations.TopRated} ({AppStateStatic.Region})")" MediaListApi="TmdbTopRatedApi" ShowFilter="true"
           MultiplesRegions="true" Watched="WatchedList" Watching="WatchingList" Wish="WishList" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>
<MediaList TitleHead="@($"{Translations.ComingSoon} ({AppStateStatic.Region})")" MediaListApi="TmdbUpcomingApi"
           MultiplesRegions="true" Watched="WatchedList" Watching="WatchingList" Wish="WishList" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>

@code {
    public Settings? Settings { get; set; }
    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AppStateStatic.RegionChanged += StateHasChanged;

        WatchedListApi.DataChanged += (WatchedList? model) => { WatchedList = model; StateHasChanged(); };
        WatchingListApi.DataChanged += (WatchingList? model) => { WatchingList = model; StateHasChanged(); };
        WishListApi.DataChanged += (WishList? model) => { WishList = model; StateHasChanged(); };

        Settings = await CacheSettingsApi.GetSettings();
    }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }
}