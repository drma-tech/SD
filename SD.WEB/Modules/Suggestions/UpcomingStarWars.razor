@page "/suggestions/upcoming-star-wars"
<SeoHeader Title="Suggestions | Upcoming Star Wars Movies & TV Shows" Keywords="@(new[] { "Upcoming Star Wars Movies & TV Shows" })" Url="/suggestions/upcoming-star-wars"></SeoHeader>
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Suggestions.Components
@using SD.WEB.Modules.Suggestions.Core
@inherits PageCore<UpcomingStarWars>
@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

@if (Settings != null && Settings.ShowAdSense && (Principal == null || Principal.ClientePaddle == null || !Principal.ClientePaddle.IsPaidUser))
{
    <Div TextAlignment="TextAlignment.Center">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5922021468622891" data-ad-slot="1935613755"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </Div>
}

<MediaListFull MediaListApi="TmdbListApi" List="@EnumLists.UpcomingStarWarsMoviesTVShows" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
               ShowPrivateAction="true" IsAuthenticated="IsAuthenticated">
</MediaListFull>

@code {
    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += model =>
        {
            WatchedList = model;
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            WatchingList = model;
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            WishList = model;
            StateHasChanged();
        };

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }

}