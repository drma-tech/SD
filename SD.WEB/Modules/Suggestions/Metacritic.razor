@page "/suggestions/metacritic"
<SeoHeader Title="Suggestions | Metacritic" Keywords="@(new []{"Metacritic"})" Url="/suggestions/metacritic"></SeoHeader>

@inherits PageCore<Metacritic>
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Suggestions.Core
@using SD.WEB.Modules.Suggestions.Components
@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<HeadPage Title="Metacritic" ImageSource="logo/metacritic.png" Text="Metacritic aggregates music, game, tv, and movie reviews from the leading critics. Only Metacritic.com uses METASCORES, which let you know at a glance how each item was reviewed."
          Link="https://www.metacritic.com/" IsAuthenticated="IsAuthenticated"></HeadPage>

@if (Settings != null && Settings.ShowAdSense)
{
    <Div TextAlignment="TextAlignment.Center">
        @if (Navigation.BaseUri.Contains("localhost") || Navigation.BaseUri.Contains("dev"))
        {
            <div class="adsbygoogle google-ads" style="background-color: black;"></div>
        }
        else
        {
            <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5922021468622891" data-ad-slot="1935613755"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        }
    </Div>
}

<MediaList MediaListApi="TmdbListApi" List="@EnumLists.MetacriticBestMoviesofAllTime" MaxItens="100" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
           ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>
<MediaList MediaListApi="TmdbListApi" List="@EnumLists.MetacriticBestTVShowsofAllTime" MaxItens="100" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
           ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>

@code {
    public Settings? Settings { get; set; }
    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += (WatchedList? model) => { WatchedList = model; StateHasChanged(); };
        WatchingListApi.DataChanged += (WatchingList? model) => { WatchingList = model; StateHasChanged(); };
        WishListApi.DataChanged += (WishList? model) => { WishList = model; StateHasChanged(); };

        Settings = await CacheSettingsApi.GetSettings();
    }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }
}