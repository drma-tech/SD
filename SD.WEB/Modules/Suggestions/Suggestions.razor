@page "/suggestions"
<SeoHeader Title="@SeoTranslations.SuggestionsTitle" Description="@SeoTranslations.SuggestionsDescription" Url="/suggestions"></SeoHeader>
@inherits PageCore<Suggestions>

@inject IJSRuntime JsRuntime

@* <Div TextAlignment="TextAlignment.Center">
    @if (Navigation.BaseUri.Contains("localhost") || Navigation.BaseUri.Contains("dev"))
    {
        <div class="adsbygoogle google-ads" style="background-color: black;"></div>
    }
    else
    {
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-3885428939386350" data-ad-slot="2627626432"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    }
</Div> *@

<HeaderComponent Title="@Resources.Translations.TitleAwards"></HeaderComponent>
<div id="@SwiperAwards" class="swiper mb-2">
    <div class="swiper-wrapper">
        @foreach (var item in Awards)
        {
            <div class="swiper-slide">
                <Card Class="p-0" Border="Border.Secondary" Background="Background.Light">
                    <Blazorise.Link To="@item.link" Title="@item.name">
                        <CardImage Source="@(item.logo_path)" Alt="@item.name" Style="cursor: pointer;"></CardImage>
                    </Blazorise.Link>
                    <CardBody Padding="Padding.Is1" Style="min-height: 38px">
                        <CardTitle Size="3" Margin="Margin.Is0" Style="font-size: 0.75rem;">@item.name</CardTitle>
                    </CardBody>
                </Card>
            </div>
        }
    </div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
</div>

<HeaderComponent Title="@Resources.Translations.TitleSpecializedSites"></HeaderComponent>
<div id="@SwiperSites" class="swiper mb-2">
    <div class="swiper-wrapper">
        @foreach (var item in Sites)
        {
            <div class="swiper-slide">
                <Card Class="p-0" Border="Border.Secondary" Background="Background.Light">
                    <Blazorise.Link To="@item.link" Title="@item.name">
                        <CardImage Source="@(item.logo_path)" Alt="@item.name" Style="cursor: pointer;"></CardImage>
                    </Blazorise.Link>
                    <CardBody Padding="Padding.Is1" Style="min-height: 38px">
                        <CardTitle Size="3" Margin="Margin.Is0" Style="font-size: 0.75rem;">@item.name</CardTitle>
                    </CardBody>
                </Card>
            </div>
        }
    </div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
</div>

<HeaderComponent Title="@Resources.Translations.TitleSpecials"></HeaderComponent>
<div id="@SwiperSpecials" class="swiper mb-2">
    <div class="swiper-wrapper">
        @foreach (var item in Specials)
        {
            <div class="swiper-slide">
                <Card Class="p-0" Border="Border.Secondary" Background="Background.Light">
                    <Blazorise.Link To="@item.link" Title="@item.name">
                        <CardImage Source="@(item.logo_path)" Alt="@item.name" Style="cursor: pointer;"></CardImage>
                    </Blazorise.Link>
                    <CardBody Padding="Padding.Is1" Style="min-height: 38px">
                        <CardTitle Size="3" Margin="Margin.Is0" Style="font-size: 0.75rem;">@item.name</CardTitle>
                    </CardBody>
                </Card>
            </div>
        }
    </div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
</div>

@code {
    private List<Item> Awards { get; set; } = new();
    private List<Item> Sites { get; set; } = new();
    private List<Item> Specials { get; set; } = new();

    private readonly string SwiperAwards = $"swiper-{Guid.NewGuid()}";
    private readonly string SwiperSites = $"swiper-{Guid.NewGuid()}";
    private readonly string SwiperSpecials = $"swiper-{Guid.NewGuid()}";

    public class Item
    {
        public string? name { get; set; }
        public string? logo_path { get; set; }
        public string? link { get; set; }
    }

    protected override void OnInitialized()
    {
        Awards.Add(new Item() { name = "Oscar", logo_path = "logo/oscar.png", link = "/suggestions/oscar" });
        Awards.Add(new Item() { name = "Emmy Awards", logo_path = "logo/emmy-awards.png", link = "/suggestions/emmy-awards" });
        Awards.Add(new Item() { name = "Golden Globe Awards", logo_path = "logo/golden-globes.png", link = "/suggestions/golden-globes" });
        Awards.Add(new Item() { name = "Bafta", logo_path = "logo/bafta.png", link = "/suggestions/bafta" });
        Awards.Add(new Item() { name = "Critics Choice Awards", logo_path = "logo/critics.png", link = "/suggestions/critics-choice" });
        Awards.Add(new Item() { name = "People's Choise Awards", logo_path = "logo/peoples.png", link = "/suggestions/peoples" });
        Awards.Add(new Item() { name = "Festival de Cannes", logo_path = "logo/festival-cannes.png", link = "/suggestions/festival-cannes" });
        Awards.Add(new Item() { name = "Crunchyroll Anime Awards", logo_path = "logo/crunchyroll.png", link = "/suggestions/crunchyroll" });
        Awards.Add(new Item() { name = "Annie Awards", logo_path = "logo/annie.png", link = "/suggestions/annie" });

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Sites.Add(new Item() { name = "IMDB", logo_path = "logo/imdb.png", link = "/suggestions/imdb" });
        Sites.Add(new Item() { name = "Rotten Tomatoes", logo_path = "logo/rotten-tomatoes.png", link = "/suggestions/rotten-tomatoes" });
        Sites.Add(new Item() { name = "Metacritic", logo_path = "logo/metacritic.png", link = "/suggestions/metacritic" });
        Sites.Add(new Item() { name = "TMDB", logo_path = "logo/tmdb.png", link = "/suggestions/tmdb" });
        Sites.Add(new Item() { name = "Trakt", logo_path = "logo/trakt.png", link = "/suggestions/trakt" });
        Sites.Add(new Item() { name = "Hollywood Reporter", logo_path = "logo/hollywood-reporter.png", link = "/suggestions/hollywood-reporter" });
        Sites.Add(new Item() { name = "Empire", logo_path = "logo/empire.png", link = "/suggestions/empire" });
        Sites.Add(new Item() { name = "Rolling Stone", logo_path = "logo/rolling-stone.png", link = "/suggestions/rolling-stone" });
        Sites.Add(new Item() { name = "Filmaffinity", logo_path = "logo/film-affinity.png", link = "/suggestions/film-affinity" });

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Specials.Add(new Item() { name = "Marvel", logo_path = "logo/marvel.png", link = "/suggestions/upcoming-marvel" });
        Specials.Add(new Item() { name = "DC", logo_path = "logo/dc.png", link = "/suggestions/upcoming-dc" });
        Specials.Add(new Item() { name = "Star Wars", logo_path = "logo/star-wars.png", link = "/suggestions/upcoming-star-wars" });
        Specials.Add(new Item() { name = "Netflix", logo_path = "logo/netflix-logo.png", link = "/suggestions/upcoming-netflix" });
        Specials.Add(new Item() { name = "Walt Disney Pictures", logo_path = "logo/disney.png", link = "/suggestions/upcoming-disney" });
        Specials.Add(new Item() { name = "Highest grossing movies", logo_path = "logo/grossing-movies.png", link = "/suggestions/grossing-movies" });
        Specials.Add(new Item() { name = "Most Expected Movies of 2025", logo_path = "logo/rotten-tomatoes.png", link = "/suggestions/movies-2025" });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JsRuntime.InvokeVoidAsync("initSwiper", SwiperAwards);
            await JsRuntime.InvokeVoidAsync("initSwiper", SwiperSites);
            await JsRuntime.InvokeVoidAsync("initSwiper", SwiperSpecials);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}