@page "/suggestions"
<SeoHeader Title="@SeoTranslations.SuggestionsTitle" Description="@SeoTranslations.SuggestionsDescription" Url="/suggestions"></SeoHeader>
@using SD.WEB.Modules.Suggestions.Resources
@inherits PageCore<Suggestions>

@inject IJSRuntime JsRuntime

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <Div TextAlignment="TextAlignment.Center">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5922021468622891" data-ad-slot="3652800350"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </Div>
}

<HeaderComponent Title="@Translations.TitleAwards"></HeaderComponent>
<div id="@_swiperAwards" class="swiper mb-2">
    <div class="swiper-wrapper">
        @foreach (var item in Awards)
        {
            <div class="swiper-slide">
                <Card Class="p-0" Border="Border.Secondary" Background="Background.Light">
                    <Blazorise.Link To="@item.Link" Title="@item.Name" TextDecoration="TextDecoration.None" TextColor="TextColor.Dark">
                        <CardImage Source="@(item.LogoPath)" Alt="@item.Name" Style="cursor: pointer;"></CardImage>
                        <CardBody Padding="Padding.Is1" Style="min-height: 38px">
                            <CardTitle Size="3" Margin="Margin.Is0" Style="font-size: 0.73rem;">@item.Name</CardTitle>
                        </CardBody>
                    </Blazorise.Link>
                </Card>
            </div>
        }
    </div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
</div>

<HeaderComponent Title="@Translations.TitleSpecializedSites"></HeaderComponent>
<div id="@_swiperSites" class="swiper mb-2">
    <div class="swiper-wrapper">
        @foreach (var item in Sites)
        {
            <div class="swiper-slide">
                <Card Class="p-0" Border="Border.Secondary" Background="Background.Light">
                    <Blazorise.Link To="@item.Link" Title="@item.Name" TextDecoration="TextDecoration.None" TextColor="TextColor.Dark">
                        <CardImage Source="@(item.LogoPath)" Alt="@item.Name" Style="cursor: pointer;"></CardImage>
                        <CardBody Padding="Padding.Is1" Style="min-height: 38px">
                            <CardTitle Size="3" Margin="Margin.Is0" Style="font-size: 0.73rem;">@item.Name</CardTitle>
                        </CardBody>
                    </Blazorise.Link>
                </Card>
            </div>
        }
    </div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
</div>

<HeaderComponent Title="@Translations.TitleSpecials"></HeaderComponent>
<div id="@_swiperSpecials" class="swiper mb-2">
    <div class="swiper-wrapper">
        @foreach (var item in Specials)
        {
            <div class="swiper-slide">
                <Card Class="p-0" Border="Border.Secondary" Background="Background.Light">
                    <Blazorise.Link To="@item.Link" Title="@item.Name" TextDecoration="TextDecoration.None" TextColor="TextColor.Dark">
                        <CardImage Source="@(item.LogoPath)" Alt="@item.Name" Style="cursor: pointer;"></CardImage>
                        <CardBody Padding="Padding.Is1" Style="min-height: 38px">
                            <CardTitle Size="3" Margin="Margin.Is0" Style="font-size: 0.73rem;">@item.Name</CardTitle>
                        </CardBody>
                    </Blazorise.Link>
                </Card>
            </div>
        }
    </div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
</div>

@code {
    private List<Item> Awards { get; } = [];
    private List<Item> Sites { get; } = [];
    private List<Item> Specials { get; } = [];

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    private readonly string _swiperAwards = $"swiper-{Guid.NewGuid()}";
    private readonly string _swiperSites = $"swiper-{Guid.NewGuid()}";
    private readonly string _swiperSpecials = $"swiper-{Guid.NewGuid()}";

    public class Item
    {
        public string? Name { get; set; }
        public string? LogoPath { get; set; }
        public string? Link { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);

        Awards.Add(new Item { Name = "Oscar", LogoPath = "logo/oscar.png", Link = "/suggestions/oscar" });
        Awards.Add(new Item { Name = "Emmy Awards", LogoPath = "logo/emmy-awards.png", Link = "/suggestions/emmy-awards" });
        Awards.Add(new Item { Name = "Golden Globe Awards", LogoPath = "logo/golden-globes.png", Link = "/suggestions/golden-globes" });
        Awards.Add(new Item { Name = "Bafta", LogoPath = "logo/bafta.png", Link = "/suggestions/bafta" });
        Awards.Add(new Item { Name = "Critics Choice Awards", LogoPath = "logo/critics.png", Link = "/suggestions/critics-choice" });
        Awards.Add(new Item { Name = "People's Choice Awards", LogoPath = "logo/peoples.png", Link = "/suggestions/peoples" });
        Awards.Add(new Item { Name = "Festival de Cannes", LogoPath = "logo/festival-cannes.png", Link = "/suggestions/festival-cannes" });
        Awards.Add(new Item { Name = "Crunchyroll Anime Awards", LogoPath = "logo/crunchyroll.png", Link = "/suggestions/crunchyroll" });
        Awards.Add(new Item { Name = "Annie Awards", LogoPath = "logo/annie.png", Link = "/suggestions/annie" });

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Sites.Add(new Item { Name = "IMDB", LogoPath = "logo/imdb.png", Link = "/suggestions/imdb" });
        Sites.Add(new Item { Name = "Rotten Tomatoes", LogoPath = "logo/rotten-tomatoes.png", Link = "/suggestions/rotten-tomatoes" });
        Sites.Add(new Item { Name = "Metacritic", LogoPath = "logo/metacritic.png", Link = "/suggestions/metacritic" });
        Sites.Add(new Item { Name = "TMDB", LogoPath = "logo/tmdb.png", Link = "/suggestions/tmdb" });
        Sites.Add(new Item { Name = "Trakt", LogoPath = "logo/trakt.png", Link = "/suggestions/trakt" });
        Sites.Add(new Item { Name = "Hollywood Reporter", LogoPath = "logo/hollywood-reporter.png", Link = "/suggestions/hollywood-reporter" });
        Sites.Add(new Item { Name = "Empire", LogoPath = "logo/empire.png", Link = "/suggestions/empire" });
        Sites.Add(new Item { Name = "Rolling Stone", LogoPath = "logo/rolling-stone.png", Link = "/suggestions/rolling-stone" });
        Sites.Add(new Item { Name = "Filmaffinity", LogoPath = "logo/film-affinity.png", Link = "/suggestions/film-affinity" });

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Specials.Add(new Item { Name = "Marvel", LogoPath = "logo/marvel.png", Link = "/suggestions/upcoming-marvel" });
        Specials.Add(new Item { Name = "DC", LogoPath = "logo/dc.png", Link = "/suggestions/upcoming-dc" });
        Specials.Add(new Item { Name = "Star Wars", LogoPath = "logo/star-wars.png", Link = "/suggestions/upcoming-star-wars" });
        Specials.Add(new Item { Name = "Netflix", LogoPath = "logo/netflix-logo.png", Link = "/suggestions/upcoming-netflix" });
        Specials.Add(new Item { Name = "Walt Disney Pictures", LogoPath = "logo/disney.png", Link = "/suggestions/upcoming-disney" });
        Specials.Add(new Item { Name = "Highest grossing movies", LogoPath = "logo/grossing-movies.png", Link = "/suggestions/grossing-movies" });
        Specials.Add(new Item { Name = "Most Expected Movies of 2025", LogoPath = "logo/rotten-tomatoes.png", Link = "/suggestions/movies-2025" });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JsRuntime.InvokeVoidAsync("initSwiper", _swiperAwards);
            await JsRuntime.InvokeVoidAsync("initSwiper", _swiperSites);
            await JsRuntime.InvokeVoidAsync("initSwiper", _swiperSpecials);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

}