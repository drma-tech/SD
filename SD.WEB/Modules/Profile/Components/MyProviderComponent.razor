@using Button = SD.WEB.Resources.Button
@using SD.WEB.Modules.Platform.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@inherits ComponentCore<MyProviderComponent>

@inject MyProvidersApi MyProvidersApi
@inject AllProvidersApi AllProvidersApi
@inject IJSRuntime JsRuntime

<SectionComponent IconName="@IconsFA.Solid.Icon("clapperboard").Font" Title="@Translations.MyPlatforms">
    <ActionFragment>
        @if (ProvidersChanged)
        {
            <MudIconButton Icon="@IconsFA.Solid.Icon("rotate").Font" Color="Color.Warning" Variant="Variant.Filled" OnClick="UpdateProviders" />
        }
    </ActionFragment>
    <BodyFragment>
        <RenderControl Core="Core" Model="MyProviders" ExpressionEmpty="(MyProviders? obj) => obj == null || obj.Items.Empty()" PrivateContent="true"
                       CustomMessageWarning="@Resources.Translations.MarkPlatforms">
            <div id="@_swiperId" class="swiper">
                <div class="swiper-wrapper">
                    @foreach (var item in MyProviders?.Items.Take(AccountProduct.Premium.GetRestrictions().MySuggestions) ?? new List<MyProvidersItem>())
                    {
                        <div class="swiper-slide" style="height: auto !important;">
                            <div style="position: relative; cursor: pointer;" @onclick="@(() => ShowProviderPopup(item))">
                                <MudChip T="string" Color="Color.Info" Label="true" Style="padding: 0.2rem; position: absolute; top: 0; left: 0; height: auto; z-index: 1;">
                                    @item.region?.ToString()
                                </MudChip>
                                @if (AllProviders != null && (AllProviders.Items.All(a => a.id != item.id) || !AllProviders.Items.Any(a => a.id == item.id && a.regions.Contains(item.region ?? AppStateStatic.Region))))
                                {
                                    <MudChip T="string" Color="Color.Error" Style="padding: 0.2rem; position: absolute; bottom: 5px; height: auto; z-index: 1; width: 90%;">
                                        <MudIcon Icon="@IconsFA.Solid.Icon("trash").Font"></MudIcon> Deleted
                                    </MudChip>
                                }
                                <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo)" Alt="@item.name" FallbackSrc="images/no-image.png" Style="vertical-align: bottom;"></MudImage>
                            </div>
                        </div>
                    }
                </div>
                <div class="swiper-button-next"></div>
                <div class="swiper-button-prev"></div>
            </div>
        </RenderControl>
    </BodyFragment>
</SectionComponent>

@code {
    [Parameter][EditorRequired] public WatchedList? WatchedList { get; set; }
    [Parameter][EditorRequired] public WatchingList? WatchingList { get; set; }
    [Parameter][EditorRequired] public WishList? WishList { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    public RenderControlCore<MyProviders?> Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }
    private MyProviders? MyProviders { get; set; }
    private bool ProvidersChanged { get; set; }

    private readonly string _swiperId = $"swiper-{Guid.NewGuid()}";

    protected override void OnInitialized()
    {
        MyProvidersApi.DataChanged += model =>
        {
            MyProviders = model;
            Core.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JsRuntime.InvokeVoidAsync("initSwiper", _swiperId, 100);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        MyProviders = await MyProvidersApi.Get(IsAuthenticated, Core);
        AllProviders ??= await AllProvidersApi.GetAll(null);

        foreach (var item in MyProviders?.Items ?? [])
        {
            var provider = AllProviders?.Items.Find(f => f.id == item.id);

            if (provider?.name != item.name || provider?.logo_path != item.logo)
            {
                ProvidersChanged = true;
            }
        }

        if (MyProviders != null)
        {
            if (MyProviders.Items.Any(a => !a.region.HasValue)) //update region (legacy)
            {
                foreach (var item in MyProviders.Items)
                {
                    if (!item.region.HasValue)
                    {
                        var provider = AllProviders?.Items.FirstOrDefault(f => f.id == item.id);

                        if (provider != null)
                        {
                            item.region = provider.regions.Any(a => a == AppStateStatic.Region) ? AppStateStatic.Region : provider.regions[0];
                        }
                    }
                }

                var client = await PrincipalApi.Get(IsAuthenticated);
                Snackbar.Add(Translations.RegionsApplied, Severity.Warning);
                await MyProvidersApi.Update(MyProviders, client?.AuthPaddle);

                StateHasChanged();
            }
        }
    }

    public async Task ShowProviderPopup(MyProvidersItem item)
    {
        AllProviders ??= await AllProvidersApi.GetAll(null);

        await DialogService.PlatformPopup(AllProviders?.Items.FirstOrDefault(f => f.id == item.id), WatchedList, WatchingList, WishList,
            item.region?.ToString(), item.id, IsAuthenticated);
    }

    private async Task UpdateProviders()
    {
        foreach (var item in MyProviders?.Items ?? [])
        {
            var provider = AllProviders?.Items.Find(f => f.id == item.id);

            if (provider == null) continue;
            item.name = provider.name;
            item.logo = provider.logo_path;
        }

        MyProviders = await MyProvidersApi.Update(MyProviders, null, false);
        ProvidersChanged = false;
    }

}