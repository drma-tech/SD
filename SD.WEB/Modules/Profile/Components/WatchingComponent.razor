@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Collections.Core
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<WatchingComponent>

@inject TmdbApi TmdbApi
@inject WatchingListApi WatchingApi
@inject WatchedListApi WatchedApi

<PageSection Icon="@IconsFA.Solid.Icon("eye").Font" Title="@Title" ShowHead="ShowHeader">
    <ActionFragment>
        @if ((Watching?.CanSync(MediaType) ?? false) && (Watching?.Items(MediaType).Any() ?? false))
        {
            <MudButton StartIcon="@IconsFA.Solid.Icon("rotate").Font" Variant="Variant.Filled" Color="Color.Warning" Class="me-2"
                       OnClick="() => ImportFromWatched()" Disabled="@Updating" Size="AppStateStatic.Size">
                @Button.Update
            </MudButton>
        }
        <MudTooltip Text="@GlobalTranslations.SeeAllItems">
            <MudIconButton Icon="@IconsFA.Solid.Icon("expand").Font" Variant="Variant.Filled" Color="Color.Primary" Class="me-2" Disabled="Items.Empty()"
                           OnClick="@(async () => await OpenCompleteList())" Size="AppStateStatic.Size" />
        </MudTooltip>
    </ActionFragment>
    <BodyFragment>
        <RenderControl Core="Core" PrivateContent="true" Model="Watching" ExpressionEmpty="ExpressionEmpty"
                       CustomMessageWarning="@Resources.Translations.MarkTitlesWatched">
            @if (FullScreen)
            {
                <div class="grid-relative-container-poster">
                    @foreach (var item in Items.Take(GetTotalItems))
                    {
                        var logo = string.IsNullOrEmpty(item.logo) ? null : TmdbOptions.SmallPosterPath + item.logo;
                        var percentComplete = (int)Math.Round((double)(100 * item.watched.Count) / item.maxItems);

                        <PosterComponent Poster="@logo" Title="@item.name" Percent="@percentComplete"
                                         Clicked="@(async () => await ShowCollectionPopup(item.id, item.name))" WatchedList="Watched" WishList="Wish">
                        </PosterComponent>
                    }
                </div>
            }
            else
            {
                <div id="@_swiperId" class="swiper">
                    <div class="swiper-wrapper">
                        @foreach (var item in Items.Take(GetTotalItems))
                        {
                            var logo = string.IsNullOrEmpty(item.logo) ? "images/no-image.png" : TmdbOptions.SmallPosterPath + item.logo;
                            var percentComplete = (int)Math.Round((double)(100 * item.watched.Count) / item.maxItems);

                            <div class="swiper-slide" style="height: auto !important;">
                                <PosterComponent Poster="@logo" Title="@item.name" Percent="@percentComplete"
                                                 Clicked="@(async () => await ShowCollectionPopup(item.id, item.name))" WatchedList="Watched" WishList="Wish">
                                </PosterComponent>
                            </div>
                        }
                    </div>
                    <div class="swiper-button-next"></div>
                    <div class="swiper-button-prev"></div>
                </div>
            }
        </RenderControl>
    </BodyFragment>
</PageSection>

@code {
    [Parameter][EditorRequired] public RenderControlCore<WatchingList?> Core { get; set; } = new();
    [Parameter][EditorRequired] public MediaType MediaType { get; set; }
    [Parameter][EditorRequired] public bool ShowHeader { get; set; }
    [Parameter][EditorRequired] public bool FullScreen { get; set; }
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public Func<WatchingList?, bool> ExpressionEmpty { get; set; } = null!;
    [Parameter][EditorRequired] public string? UserId { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }
    [Parameter] public string? CustomTitle { get; set; }

    private HashSet<WatchingListItem> Items => MediaType == MediaType.movie ? Watching?.Movies ?? [] : Watching?.Shows ?? [];

    private int GetTotalItems => FullScreen ? AccountProduct.Premium.GetRestrictions().Watching : AccountProduct.Basic.GetRestrictions().Watching;
    private string? Title => CustomTitle ?? (MediaType == MediaType.movie ? Translations.MyMovieWatching : Translations.MyShowWatching);

    public bool Updating { get; set; }
    private readonly string _swiperId = $"swiper-{Guid.NewGuid()}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JavascriptVoidAsync("initSwiper", _swiperId);
        }
        catch (Exception ex)
        {
            await ProcessException(ex);
        }
    }

    private async Task OpenCompleteList()
    {
        await DialogService.MyWatchingListPopup(Core, MediaType, Watched, Watching, Wish, IsAuthenticated, UserId);
    }

    public Task ShowMediaPopup(string? tmdbId, string? name)
    {
        return string.IsNullOrEmpty(tmdbId) ? null! : DialogService.MediaPopup(Watched, Watching, Wish, MediaType, tmdbId, IsAuthenticated);
    }

    public Task ShowCollectionPopup(string? collectionId, string? name)
    {
        return string.IsNullOrEmpty(collectionId) ? null! : DialogService.CollectionPopup(Watched, Watching, Wish, MediaType, collectionId, IsAuthenticated);
    }

    private async Task ImportFromWatched()
    {
        try
        {
            var watching = await WatchingApi.Get(IsAuthenticated, Core); //get a new one (memory may be compromised/corrupted)
            var client = await PrincipalApi.Get(IsAuthenticated);

            if (MediaType == MediaType.movie)
            {
                watching?.Movies.Clear();
                Updating = true;
                StateHasChanged();
                Core?.ShowProcessing();

                foreach (var tmdbId in Watched?.GetItems(MediaType.movie) ?? [])
                {
                    try
                    {
                        var media = await TmdbApi.GetMediaDetail(tmdbId, MediaType.movie);
                        var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

                        if (hasCollection && watching!.DeletedMovies.All(a => a != media.collectionId.ToString()))
                        {
                            var item = watching?.GetItem(MediaType.movie, media.collectionId?.ToString());

                            if (item == null)
                            {
                                var items = new HashSet<string> { tmdbId };

                                item = new WatchingListItem(media.collectionId?.ToString(), media.collectionName, media.collectionLogo?.Replace(TmdbOptions.SmallPosterPath, ""), media.Collection.Count, items);
                            }
                            else
                            {
                                item.maxItems = media.Collection.Count;
                                item.watched.Add(tmdbId);
                            }

                            watching?.AddItem(MediaType.movie, item);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (ex.Message.Contains("The resource you requested could not be found"))
                        {
                            Watched = await WatchedApi.Remove(MediaType.movie, tmdbId);
                        }
                        else
                        {
                            throw;
                        }
                    }
                }

                watching = await WatchingApi.Sync(MediaType.movie, watching, Core);

                Updating = false;
                StateHasChanged();
                Core?.HideProcessing(watching);
            }
            else
            {
                watching?.Shows.Clear();
                Updating = true;
                StateHasChanged();
                Core?.ShowProcessing();

                foreach (var tmdbId in Watched?.GetItems(MediaType.tv) ?? [])
                {
                    try
                    {
                        var media = await TmdbApi.GetMediaDetail(tmdbId, MediaType.tv);
                        var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

                        if (hasCollection && watching!.DeletedShows.All(a => a != media.tmdb_id))
                        {
                            var item = watching?.GetItem(MediaType.tv, media.tmdb_id);

                            if (item == null)
                            {
                                var items = new HashSet<string> { media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).FirstOrDefault()?.id ?? "" };

                                item = new WatchingListItem(media.tmdb_id, media.title, media.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), media.Collection.Count, items);
                            }
                            else
                            {
                                item.maxItems = media.Collection.Count;
                                item.watched.Add(media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).FirstOrDefault()?.id ?? "");
                            }

                            watching?.AddItem(MediaType.tv, item);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (ex.Message.Contains("The resource you requested could not be found"))
                        {
                            Watched = await WatchedApi.Remove(MediaType.tv, tmdbId);
                        }
                        else
                        {
                            throw;
                        }
                    }
                }

                watching = await WatchingApi.Sync(MediaType.tv, watching, Core);

                Updating = false;
                StateHasChanged();
                Core?.HideProcessing(watching);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Updating = false;
            Core?.ShowError(ex.Message);
            await ProcessException(ex);
        }
    }

}