@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Suggestions.Core
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<WatchingComponent>
@inject TmdbApi TmdbApi
@inject WatchingListApi WatchingApi
@inject WatchedListApi WatchedApi

@inject IJSRuntime JsRuntime

@if (ShowHeader)
{
    <HeaderComponent IconName="@FontAwesomeIcons.Eye" Title="@Title">
        @if (ShowPrivateAction)
        {
            @if (Items.Empty())
            {
                <span onclick="@($"animationShake('.{(MediaType == MediaType.movie ? "classWatchingMovie" : "classWatchingShow")}')")">
                    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" title="@GlobalTranslations.SeeAllItems" Class="ms-1">
                        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
                    </Button>
                </span>
                <span onclick="@($"animationShake('.{(MediaType == MediaType.movie ? "classWatchingMovie" : "classWatchingShow")}')")">
                    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" title="@GlobalTranslations.Share">
                        <Blazorise.Icon Name="FontAwesomeIcons.Share"></Blazorise.Icon>
                    </Button>
                </span>
            }
            else
            {
                <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async () => await OpenCompleteList())"
                        title="@GlobalTranslations.SeeAllItems" Class="ms-1">
                    <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
                </Button>
                <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Clicked="@(() => Share($"{Navigation.BaseUri}shared/watching/{MediaType}/{UserId}"))"
                        title="@GlobalTranslations.Share">
                    <Blazorise.Icon Name="FontAwesomeIcons.Share"></Blazorise.Icon>
                </Button>
            }

            @if ((Watching?.CanSync(MediaType) ?? false) && (Watching?.Items(MediaType).Any() ?? false))
            {
                <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Warning" Margin="Margin.Is1.FromEnd" Clicked="() => ImportFromWatched()"
                        title="@Button.Update" Disabled="Updating">
                    <Blazorise.Icon Name="FontAwesomeIcons.Rotate"></Blazorise.Icon> @Button.Update
                </Button>
            }
        }
    </HeaderComponent>
}
<RenderControl Core="Core" PrivateContent="ShowPrivateAction" Model="Watching" ExpressionEmpty="ExpressionEmpty"
               ClassAnimationShake="@(MediaType == MediaType.movie ? "classWatchingMovie" : "classWatchingShow")">
    @if (FullScreen)
    {
        <div class="grid-relative-container-sm mb-2">
            @foreach (var item in Items.Take(GetTotalItems))
            {
                var logo = string.IsNullOrEmpty(item.logo) ? "" : TmdbOptions.SmallPosterPath + item.logo;
                var percentComplete = (int)Math.Round((double)(100 * item.watched.Count) / item.maxItems);
                var resultPerc = $"{percentComplete}%";

                <Card Style="position: relative; max-width: 100px;" TextAlignment="TextAlignment.Center">
                    @if (percentComplete == 100)
                    {
                        <Badge Color="Color.Success" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                    }
                    else
                    {
                        <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                    }

                    @if (string.IsNullOrEmpty(item.logo))
                    {
                        <CardImage Source="images/noimage.png" Alt="@item.name" title="@item.name"
                                   onclick="@(async () => await ShowCollectionPopup(item.id, item.name))" Style="cursor: pointer;">
                        </CardImage>

                        <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 2rem; color: black; text-align: center; font-weight: 500;">
                            @item.name
                        </Div>
                    }
                    else
                    {
                        <CardImage Source="@logo" Alt="@item.name" title="@item.name"
                                   onclick="@(async () => await ShowCollectionPopup(item.id, item.name))" Style="cursor: pointer;">
                        </CardImage>
                    }
                </Card>
            }
        </div>
    }
    else
    {
        <div id="@_swiperId" class="swiper mb-2">
            <div class="swiper-wrapper">
                @foreach (var item in Items.Take(GetTotalItems))
                {
                    var logo = string.IsNullOrEmpty(item.logo) ? "" : TmdbOptions.SmallPosterPath + item.logo;
                    var percentComplete = (int)Math.Round((double)(100 * item.watched.Count) / item.maxItems);
                    var resultPerc = $"{percentComplete}%";

                    <div class="swiper-slide">
                        <Card Style="position: relative;">
                            @if (percentComplete == 100)
                            {
                                <Badge Color="Color.Success" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                            }
                            else
                            {
                                <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                            }

                            @if (string.IsNullOrEmpty(item.logo))
                            {
                                <CardImage Source="images/noimage.png" Alt="@item.name" title="@item.name"
                                           onclick="@(async () => await ShowCollectionPopup(item.id, item.name))" Style="cursor: pointer;">
                                </CardImage>

                                <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 2rem; color: black; text-align: center; font-weight: 500;">
                                    @item.name
                                </Div>
                            }
                            else
                            {
                                <CardImage Source="@logo" Alt="@item.name" title="@item.name"
                                           onclick="@(async () => await ShowCollectionPopup(item.id, item.name))" Style="cursor: pointer;">
                                </CardImage>
                            }
                        </Card>
                    </div>
                }
            </div>
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
        </div>
    }

</RenderControl>

@code {
    [Parameter] [EditorRequired] public RenderControlCore<WatchingList?> Core { get; set; } = new();
    [Parameter] [EditorRequired] public MediaType MediaType { get; set; }
    [Parameter] [EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter] [EditorRequired] public bool ShowHeader { get; set; }
    [Parameter] [EditorRequired] public bool FullScreen { get; set; }
    [Parameter] [EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter] [EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter] [EditorRequired] public WishList? Wish { get; set; }
    [Parameter] [EditorRequired] public Func<WatchingList?, bool> ExpressionEmpty { get; set; } = null!;
    [Parameter] [EditorRequired] public string? UserId { get; set; }
    [Parameter] [EditorRequired] public bool IsAuthenticated { get; set; }
    [Parameter] public string? CustomTitle { get; set; }

    private HashSet<WatchingListItem> Items => MediaType == MediaType.movie ? Watching?.Movies ?? [] : Watching?.Shows ?? [];

    private int GetTotalItems => FullScreen ? AccountProduct.Premium.GetRestrictions().Watching : AccountProduct.Basic.GetRestrictions().Watching;
    private string? Title => CustomTitle ?? (MediaType == MediaType.movie ? Translations.MyMovieWatching : Translations.MyShowWatching);

    public bool Updating { get; set; }
    private readonly string _swiperId = $"swiper-{Guid.NewGuid()}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JsRuntime.InvokeVoidAsync("initSwiper", _swiperId);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenCompleteList()
    {
        await ModalService.MyWatchingListPopup(Core, MediaType, Watched, Watching, Wish, ShowPrivateAction, IsAuthenticated, UserId);
    }

    public Task ShowMediaPopup(string? tmdbId, string? name)
    {
        return string.IsNullOrEmpty(tmdbId) ? null! : ModalService.MediaPopup(Watched, Watching, Wish, MediaType, tmdbId, ShowPrivateAction, IsAuthenticated);
    }

    public Task ShowCollectionPopup(string? collectionId, string? name)
    {
        return string.IsNullOrEmpty(collectionId) ? null! : ModalService.CollectionPopup(Watched, Watching, Wish, MediaType, collectionId, ShowPrivateAction, IsAuthenticated);
    }

    private async Task ImportFromWatched()
    {
        try
        {
            var watching = await WatchingApi.Get(IsAuthenticated, Core); //get a new one (memory may be compromised/corrupted)
            var client = await PrincipalApi.Get(IsAuthenticated);

            if (MediaType == MediaType.movie)
            {
                watching?.Movies.Clear();
                Updating = true;
                StateHasChanged();
                Core?.ShowProcessing();

                foreach (var tmdbId in Watched?.GetItems(MediaType.movie) ?? [])
                {
                    try
                    {
                        var media = await TmdbApi.GetMediaDetail(tmdbId, MediaType.movie);
                        var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

                        if (hasCollection && watching!.DeletedMovies.All(a => a != media.collectionId.ToString()))
                        {
                            var item = watching?.GetItem(MediaType.movie, media.collectionId?.ToString());

                            if (item == null)
                            {
                                var items = new HashSet<string> { tmdbId };

                                item = new WatchingListItem(media.collectionId?.ToString(), media.collectionName, media.collectionLogo?.Replace(TmdbOptions.SmallPosterPath, ""), media.Collection.Count, items);
                            }
                            else
                            {
                                item.maxItems = media.Collection.Count;
                                item.watched.Add(tmdbId);
                            }

                            watching?.AddItem(MediaType.movie, item);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (ex.Message.Contains("The resource you requested could not be found"))
                        {
                            Watched = await WatchedApi.Remove(MediaType.movie, tmdbId);
                        }
                        else
                        {
                            throw;
                        }
                    }
                }

                watching = await WatchingApi.Sync(MediaType.movie, watching, Core);

                Updating = false;
                StateHasChanged();
                Core?.HideProcessing(watching);
            }
            else
            {
                watching?.Shows.Clear();
                Updating = true;
                StateHasChanged();
                Core?.ShowProcessing();

                foreach (var tmdbId in Watched?.GetItems(MediaType.tv) ?? [])
                {
                    try
                    {
                        var media = await TmdbApi.GetMediaDetail(tmdbId, MediaType.tv);
                        var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

                        if (hasCollection && watching!.DeletedShows.All(a => a != media.tmdb_id))
                        {
                            var item = watching?.GetItem(MediaType.tv, media.tmdb_id);

                            if (item == null)
                            {
                                var items = new HashSet<string> { media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).FirstOrDefault()?.id ?? "" };

                                item = new WatchingListItem(media.tmdb_id, media.title, media.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), media.Collection.Count, items);
                            }
                            else
                            {
                                item.maxItems = media.Collection.Count;
                                item.watched.Add(media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).FirstOrDefault()?.id ?? "");
                            }

                            watching?.AddItem(MediaType.tv, item);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (ex.Message.Contains("The resource you requested could not be found"))
                        {
                            Watched = await WatchedApi.Remove(MediaType.tv, tmdbId);
                        }
                        else
                        {
                            throw;
                        }
                    }
                }

                watching = await WatchingApi.Sync(MediaType.tv, watching, Core);

                Updating = false;
                StateHasChanged();
                Core?.HideProcessing(watching);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Updating = false;
            Core?.ShowError(ex.Message);
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Share(string? link)
    {
        await JsRuntime.InvokeVoidAsync("share", link);
    }

}