@using SD.WEB.Modules.Profile.Resources
@inherits ComponentCore<Wishlist>

@inject IJSRuntime JsRuntime

@if (ShowHeader)
{
    <HeaderComponent IconName="@FontAwesomeIcons.Bookmark" Title="@Title">
        @if (ShowPrivateAction)
        {
            @if (Items.Empty())
            {
                <span onclick="@($"animationShake('.{(MediaType == MediaType.movie ? "classWishlistMovie" : "classWishlistShow")}')")">
                    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" title="@GlobalTranslations.SeeAllItems" Class="ms-1">
                        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
                    </Button>
                </span>
                <span onclick="@($"animationShake('.{(MediaType == MediaType.movie ? "classWishlistMovie" : "classWishlistShow")}')")">
                    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" title="@GlobalTranslations.Share">
                        <Blazorise.Icon Name="FontAwesomeIcons.Share"></Blazorise.Icon>
                    </Button>
                </span>
            }
            else
            {
                <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Clicked="@(async () => await OpenCompleteList())"
                        title="@GlobalTranslations.SeeAllItems" Class="ms-1">
                    <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
                </Button>
                <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Clicked="@(() => Share($"{Navigation.BaseUri}shared/wishlist/{MediaType}/{UserId}"))"
                        title="@GlobalTranslations.Share">
                    <Blazorise.Icon Name="FontAwesomeIcons.Share"></Blazorise.Icon>
                </Button>
            }
        }
    </HeaderComponent>
}
<RenderControl Core="Core" PrivateContent="ShowPrivateAction" Model="Wish" ExpressionEmpty="ExpressionEmpty"
               ClassAnimationShake="@(MediaType == MediaType.movie ? "classWishlistMovie" : "classWishlistShow")">
    @if (FullScreen)
    {
        <div class="grid-relative-container-sm mb-2">
            @foreach (var item in Items.Take(GetTotalItems))
            {
                var logo = string.IsNullOrEmpty(item.logo) ? "" : TmdbOptions.SmallPosterPath + item.logo;
                <Card Style="max-width: 100px;" TextAlignment="TextAlignment.Center">
                    <PosterComponent Poster="@logo" Title="@item.name" Runtime="item.runtime" TmdbId="@item.id" MediaType="MediaType"
                                     Clicked="@(async () => await ShowMediaPopup(item.id, item.name))" ShowWished="false"
                                     WatchedList="Watched" WishList="Wish">
                    </PosterComponent>
                </Card>
            }
        </div>
    }
    else
    {
        <div id="@_swiperId" class="swiper mb-2">
            <div class="swiper-wrapper">
                @foreach (var item in Items.Take(GetTotalItems))
                {
                    var logo = string.IsNullOrEmpty(item.logo) ? "" : TmdbOptions.SmallPosterPath + item.logo;
                    <div class="swiper-slide">
                        <Card>
                            <PosterComponent Poster="@logo" Title="@item.name" Runtime="item.runtime" TmdbId="@item.id" MediaType="MediaType"
                                             Clicked="@(async () => await ShowMediaPopup(item.id, item.name))" ShowWished="false"
                                             WatchedList="Watched" WishList="Wish">
                            </PosterComponent>
                        </Card>
                    </div>
                }
            </div>
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
        </div>
    }
</RenderControl>

@code {
    [Parameter] [EditorRequired] public RenderControlCore<WishList?> Core { get; set; } = new();
    [Parameter] [EditorRequired] public MediaType MediaType { get; set; }
    [Parameter] [EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter] [EditorRequired] public bool ShowHeader { get; set; }
    [Parameter] [EditorRequired] public bool FullScreen { get; set; }
    [Parameter] [EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter] [EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter] [EditorRequired] public WishList? Wish { get; set; }
    [Parameter] [EditorRequired] public Func<WishList?, bool> ExpressionEmpty { get; set; } = null!;
    [Parameter] [EditorRequired] public string? UserId { get; set; }
    [Parameter] [EditorRequired] public bool IsAuthenticated { get; set; }
    [Parameter] public string? CustomTitle { get; set; }

    private HashSet<WishListItem> Items => MediaType == MediaType.movie ? Wish?.Movies ?? [] : Wish?.Shows ?? [];

    private int GetTotalItems => FullScreen ? AccountProduct.Premium.GetRestrictions().Wishlist : AccountProduct.Basic.GetRestrictions().Wishlist;
    private string? Title => CustomTitle ?? (MediaType == MediaType.movie ? Translations.MyMovieWishlist : Translations.MyShowWishlist);

    private readonly string _swiperId = $"swiper-{Guid.NewGuid()}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JsRuntime.InvokeVoidAsync("initSwiper", _swiperId);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenCompleteList()
    {
        await ModalService.MyWishListPopup(Core, Watched, Watching, Wish, MediaType, ShowPrivateAction, IsAuthenticated, UserId);
    }

    public Task ShowMediaPopup(string? tmdbId, string? name)
    {
        return string.IsNullOrEmpty(tmdbId) ? null! : ModalService.MediaPopup(Watched, Watching, Wish, MediaType, tmdbId, ShowPrivateAction, IsAuthenticated);
    }

    private async Task Share(string? link)
    {
        await JsRuntime.InvokeVoidAsync("share", link);
    }

}