@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<MyWatchingListPopup>

@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi

<MudDialog Style="width: 100%">
    <DialogContent>
        @if (MediaType == MediaType.movie)
        {
            <WatchingComponent MediaType="MediaType" ShowHeader="false" FullScreen="true" Watched="Watched" Watching="Watching" Wish="Wish"
                               Core="Core" ExpressionEmpty="(WatchingList? list) => list == null || list.Movies.Empty()" IsAuthenticated="IsAuthenticated" UserId="@UserId">
            </WatchingComponent>
        }
        else
        {
            <WatchingComponent MediaType="MediaType" ShowHeader="false" FullScreen="true" Watched="Watched" Watching="Watching" Wish="Wish"
                               Core="Core" ExpressionEmpty="(WatchingList? list) => list == null || list.Shows.Empty()" IsAuthenticated="IsAuthenticated" UserId="@UserId">
            </WatchingComponent>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })">
            @Button.Close
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter][EditorRequired] public RenderControlCore<WatchingList?>? Core { get; set; }
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }
    [Parameter][EditorRequired] public string? UserId { get; set; }

    [Parameter] public EventCallback<WatchedList?> WatchedChanged { get; set; }
    [Parameter] public EventCallback<WatchingList?> WatchingChanged { get; set; }
    [Parameter] public EventCallback<WishList?> WishChanged { get; set; }
    [Parameter] public MediaType MediaType { get; set; }

    private string Title => MediaType == MediaType.movie ? Translations.MyMovieWatching : Translations.MyShowWatching;
    private int Quantity => MediaType == MediaType.movie ? Watching?.Movies.Count ?? 0 : Watching?.Shows.Count ?? 0;

    protected override void OnInitialized()
    {
        WatchedApi.DataChanged += model =>
        {
            Watched = model;
            WatchedChanged.InvokeAsync(model);
            StateHasChanged();
        };
        WatchingApi.DataChanged += model =>
        {
            Watching = model;
            WatchingChanged.InvokeAsync(model);
            Core?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WishApi.DataChanged += model =>
        {
            Wish = model;
            WishChanged.InvokeAsync(model);
            StateHasChanged();
        };
    }

}