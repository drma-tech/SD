@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Provider.Core;
@inherits ComponentCore<MyProviderComponent>

@inject MyProvidersApi MyProvidersApi
@inject AllProvidersApi AllProvidersApi
@inject IJSRuntime JsRuntime

<HeaderComponent IconName="@FontAwesomeIcons.Star" Title="@Translations.MyProviders">
    @if (ProvidersChanged)
    {
        <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Margin="Margin.Is1.FromEnd" Clicked="UpdateProviders"
                title="@WEB.Resources.Button.Update">
            @WEB.Resources.Button.Update
        </Button>
    }
</HeaderComponent>

<RenderControl Core="Core" Model="myProviders" ExpressionEmpty="((MyProviders? obj)=> obj == null || obj.Items.Empty())" PrivateContent="true">
     <div id="@SwiperId" class="swiper mb-2">
        <div class="swiper-wrapper">
            @foreach (var item in myProviders?.Items.Take(SubscriptionHelper.GetRestrictions(AccountProduct.Premium).MySuggestions) ?? new List<MyProvidersItem>())
            {
                <div class="swiper-slide">
                    <Card Style="position: relative;">
                        <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="padding: 0.15rem; font-size: 0.65rem; position: absolute; top: 3px; left: 3px; z-index: 1;"
                               title="@item.region?.GetCustomAttribute()?.Name">
                            @item.region?.ToString()
                        </Badge>
                        @if (allProviders != null && (!allProviders.Items.Any(a => a.id == item.id) || !allProviders.Items.Any(a => a.id == item.id && a.regions.Contains(item.region ?? AppStateStatic.Region))))
                        {
                            <Badge Color="Color.Danger" Style="position: absolute; bottom: 0; z-index: 1; width: 100%;">
                                <Blazorise.Icon Name="FontAwesomeIcons.Trash" TextColor="TextColor.Light" IconSize="IconSize.x2"></Blazorise.Icon>
                            </Badge>
                        }
                        <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(()=>ShowProviderPopup(item))" Style="cursor: pointer;"></CardImage>
                    </Card>
                </div>
            }
        </div>
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
    </div>
</RenderControl>

@code {
    [Parameter][EditorRequired] public WatchedList? WatchedList { get; set; }
    [Parameter][EditorRequired] public WatchingList? WatchingList { get; set; }
    [Parameter][EditorRequired] public WishList? WishList { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    public RenderControlCore<MyProviders?> Core { get; set; } = new();
    private AllProviders? allProviders { get; set; }
    private MyProviders? myProviders { get; set; }
    private bool ProvidersChanged { get; set; } = false;

    private readonly string SwiperId = $"swiper-{Guid.NewGuid()}";

    protected override void OnInitialized()
    {
        MyProvidersApi.DataChanged += (MyProviders? model) => { myProviders = model; Core?.LoadingFinished?.Invoke(model); StateHasChanged(); };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await JsRuntime.InvokeVoidAsync("initSwiper", SwiperId);
    }

    protected override async Task LoadDataRender()
    {
        myProviders = await MyProvidersApi.Get(IsAuthenticated, Core);
        if (allProviders == null) allProviders = await AllProvidersApi.GetAll(null);

        foreach (var item in myProviders?.Items ?? [])
        {
            var provider = allProviders?.Items.Find(f => f.id == item.id);

            if (provider?.name != item.name || provider?.logo_path != item.logo)
            {
                ProvidersChanged = true;
            }
        }

        if (myProviders != null)
        {
            if (myProviders.Items.Any(a => !a.region.HasValue)) //update region (legacy)
            {
                foreach (var item in myProviders.Items)
                {
                    if (!item.region.HasValue)
                    {
                        var provider = allProviders?.Items.FirstOrDefault(f => f.id == item.id);

                        if (provider != null)
                        {
                            if (provider.regions.Any(a => a == AppStateStatic.Region))
                            {
                                item.region = AppStateStatic.Region;
                            }
                            else
                            {
                                item.region = provider.regions[0];
                            }
                        }
                    }
                }

                var client = await PrincipalApi.Get(IsAuthenticated);
                await Toast.Warning(Translations.RegionsApplied);
                await MyProvidersApi.Update(myProviders, client?.ClientePaddle);

                StateHasChanged();
            }
        }
    }

    public async Task ShowProviderPopup(MyProvidersItem item)
    {
        if (allProviders == null) allProviders = await AllProvidersApi.GetAll(null);

        await ModalService.ProviderPopup(allProviders?.Items.FirstOrDefault(f => f.id == item.id), WatchedList, WatchingList, WishList, ShowPrivateAction,
            item.region?.ToString(), item.id, IsAuthenticated);
    }

    private async Task UpdateProviders()
    {
        foreach (var item in myProviders?.Items ?? [])
        {
            var provider = allProviders?.Items.Find(f => f.id == item.id);

            if (provider != null)
            {
                item.name = provider.name;
                item.logo = provider.logo_path;
            }
        }

        myProviders = await MyProvidersApi.Update(myProviders, null, false);
        ProvidersChanged = false;
    }
}
