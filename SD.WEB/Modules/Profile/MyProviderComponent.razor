@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Provider.Core
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<MyProviderComponent>

@inject MyProvidersApi MyProvidersApi
@inject AllProvidersApi AllProvidersApi
@inject IJSRuntime JsRuntime

<HeaderComponent IconName="@FontAwesomeIcons.Star" Title="@Translations.MyProviders">
    @if (ProvidersChanged)
    {
        <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Margin="Margin.Is1.FromEnd" Clicked="UpdateProviders"
                title="@Button.Update">
            @Button.Update
        </Button>
    }
</HeaderComponent>

<RenderControl Core="Core" Model="MyProviders" ExpressionEmpty="(MyProviders? obj) => obj == null || obj.Items.Empty()" PrivateContent="true">
    <div id="@_swiperId" class="swiper mb-2">
        <div class="swiper-wrapper">
            @foreach (var item in MyProviders?.Items.Take(AccountProduct.Premium.GetRestrictions().MySuggestions) ?? new List<MyProvidersItem>())
            {
                <div class="swiper-slide">
                    <Card Style="position: relative;">
                        <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="padding: 0.15rem; font-size: 0.65rem; position: absolute; top: 3px; left: 3px; z-index: 1;"
                               title="@item.region?.GetCustomAttribute()?.Name">
                            @item.region?.ToString()
                        </Badge>
                        @if (AllProviders != null && (AllProviders.Items.All(a => a.id != item.id) || !AllProviders.Items.Any(a => a.id == item.id && a.regions.Contains(item.region ?? AppStateStatic.Region))))
                        {
                            <Badge Color="Color.Danger" Style="position: absolute; bottom: 0; z-index: 1; width: 100%;">
                                <Blazorise.Icon Name="FontAwesomeIcons.Trash" TextColor="TextColor.Light" IconSize="IconSize.x2"></Blazorise.Icon>
                            </Badge>
                        }
                        <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(() => ShowProviderPopup(item))" Style="cursor: pointer;">
                        </CardImage>
                    </Card>
                </div>
            }
        </div>
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
    </div>
</RenderControl>

@code {
    [Parameter] [EditorRequired] public WatchedList? WatchedList { get; set; }
    [Parameter] [EditorRequired] public WatchingList? WatchingList { get; set; }
    [Parameter] [EditorRequired] public WishList? WishList { get; set; }
    [Parameter] [EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter] [EditorRequired] public bool IsAuthenticated { get; set; }

    public RenderControlCore<MyProviders?> Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }
    private MyProviders? MyProviders { get; set; }
    private bool ProvidersChanged { get; set; }

    private readonly string _swiperId = $"swiper-{Guid.NewGuid()}";

    protected override void OnInitialized()
    {
        MyProvidersApi.DataChanged += model =>
        {
            MyProviders = model;
            Core.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JsRuntime.InvokeVoidAsync("initSwiper", _swiperId);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    protected override async Task LoadDataRender()
    {
        MyProviders = await MyProvidersApi.Get(IsAuthenticated, Core);
        AllProviders ??= await AllProvidersApi.GetAll(null);

        foreach (var item in MyProviders?.Items ?? [])
        {
            var provider = AllProviders?.Items.Find(f => f.id == item.id);

            if (provider?.name != item.name || provider?.logo_path != item.logo)
            {
                ProvidersChanged = true;
            }
        }

        if (MyProviders != null)
        {
            if (MyProviders.Items.Any(a => !a.region.HasValue)) //update region (legacy)
            {
                foreach (var item in MyProviders.Items)
                {
                    if (!item.region.HasValue)
                    {
                        var provider = AllProviders?.Items.FirstOrDefault(f => f.id == item.id);

                        if (provider != null)
                        {
                            item.region = provider.regions.Any(a => a == AppStateStatic.Region) ? AppStateStatic.Region : provider.regions[0];
                        }
                    }
                }

                var client = await PrincipalApi.Get(IsAuthenticated);
                await Toast.Warning(Translations.RegionsApplied);
                await MyProvidersApi.Update(MyProviders, client?.ClientePaddle);

                StateHasChanged();
            }
        }
    }

    public async Task ShowProviderPopup(MyProvidersItem item)
    {
        AllProviders ??= await AllProvidersApi.GetAll(null);

        await ModalService.ProviderPopup(AllProviders?.Items.FirstOrDefault(f => f.id == item.id), WatchedList, WatchingList, WishList, ShowPrivateAction,
            item.region?.ToString(), item.id, IsAuthenticated);
    }

    private async Task UpdateProviders()
    {
        foreach (var item in MyProviders?.Items ?? [])
        {
            var provider = AllProviders?.Items.Find(f => f.id == item.id);

            if (provider == null) continue;
            item.name = provider.name;
            item.logo = provider.logo_path;
        }

        MyProviders = await MyProvidersApi.Update(MyProviders, null, false);
        ProvidersChanged = false;
    }

}