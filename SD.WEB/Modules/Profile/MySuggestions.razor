@using SD.Shared.Models.Auth
@using SD.Shared.Models.List.Tmdb
@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Suggestions.Core;
@inherits ComponentCore<MySuggestions>

@inject MyProvidersApi MyProvidersApi
@inject MySuggestionsApi MySuggestionsApi
@inject TmdbDiscoveryApi TmdbDiscoveryApi
@inject TmdbApi TmdbApi
@inject IJSRuntime JsRuntime

<HeaderComponent IconName="@FontAwesomeIcons.ThumbsUp" Title="@Translations.MySuggestions">
    @if (Client?.ClientePaddle?.IsPaidUser ?? false)
    {
        <Button Float="Float.End" Size="Size.ExtraSmall" Color="(GenresChanged ? Color.Secondary : Color.Primary)" Clicked="@(async()=>await OpenConfigurations())" Disabled="(myProviders == null || myProviders.Items.Empty())" title="Settings">
            <Blazorise.Icon Name="FontAwesomeIcons.Filter"></Blazorise.Icon>
        </Button>
        <RadioGroup CheckedValue="SearchType" CheckedValueChanged="(MediaType type)=>CheckedValueChanged(type)" Buttons="true" Float="Float.End" Size="Size.ExtraSmall" Margin="Margin.Is1.FromEnd">
            <Radio Value="MediaType.movie">@(MediaType.movie.GetName())</Radio>
            <Radio Value="MediaType.tv">@(MediaType.tv.GetName())</Radio>
        </RadioGroup>
        @if (SearchType == MediaType.movie && (mySuggestions == null || mySuggestions.MovieCanSync) && (myProviders?.Items.Any() ?? false))
        {
            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Margin="Margin.Is1.FromEnd" Clicked="()=>ImportFromProviders(MediaType.movie)" title="@WEB.Resources.Button.Update" Disabled="MovieUpdating">
                @WEB.Resources.Button.Update
            </Button>
        }
        @if (SearchType == MediaType.tv && (mySuggestions == null || mySuggestions.ShowCanSync) && (myProviders?.Items.Any() ?? false))
        {
            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Margin="Margin.Is1.FromEnd" Clicked="()=>ImportFromProviders(MediaType.tv)" title="@WEB.Resources.Button.Update" Disabled="ShowUpdating">
                @WEB.Resources.Button.Update
            </Button>
        }
    }
</HeaderComponent>

<RenderControl @ref="render" Core="Core" Model="mySuggestions" ExpressionEmpty="@((SD.Shared.Models.MySuggestions? obj) => obj == null || obj.Items(SearchType).Empty())"
               PrivateContent="true" PremiumFeature="true" PremiumDescription="@Translations.OurSuggestions2">

    <div id="@SwiperId" class="swiper mb-2">
        <div class="swiper-wrapper">
            @foreach (var item in mySuggestions?.Items(SearchType).Where(w => !IsWatched(SearchType, w)) ?? new List<SuggestionListItem>())
            {
                <div class="swiper-slide">
                    <Card>
                        <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowMediaPopup(item.id, item.name, SearchType))" Style="cursor: pointer;"></CardImage>
                        <CardBody Padding="Padding.Is1">
                            <Row HorizontalGutter="4" VerticalGutter="4">
                                @foreach (var provider in item.Providers)
                                {
                                    <Column ColumnSize="ColumnSize.Is6.OnMobile.Is4.OnWidescreen">
                                        <Image Source="@(TmdbOptions.OriginalPosterPath + provider)" alt="@provider" Style="width: 100%"></Image>
                                    </Column>
                                }
                            </Row>
                        </CardBody>
                    </Card>
                </div>
            }
        </div>
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
    </div>
</RenderControl>

@code {
    private MyProviders? myProviders { get; set; }
    private SD.Shared.Models.MySuggestions? mySuggestions { get; set; }
    public MediaType SearchType { get; set; } = MediaType.movie;

    public bool MovieUpdating { get; set; } = false;
    public bool ShowUpdating { get; set; } = false;
    private RenderControl<SD.Shared.Models.MySuggestions>? render;

    public RenderControlCore<SD.Shared.Models.MySuggestions?>? Core { get; set; } = new();
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    public ClientePrincipal? Client { get; set; }
    private readonly string SwiperId = $"swiper-{Guid.NewGuid()}";

    private bool GenresChanged => (mySuggestions?.MovieGenres.Any() ?? false) || (mySuggestions?.TvGenres.Any() ?? false);

    protected override void OnInitialized()
    {
        PrincipalApi.DataChanged += async (ClientePrincipal? model) => { Client = model; await LoadData(); StateHasChanged(); };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await JsRuntime.InvokeVoidAsync("initSwiper", SwiperId);
    }

    protected override async Task LoadDataRender()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Core?.ShowLoading();

        myProviders = await MyProvidersApi.Get(IsAuthenticated, null);

        if (myProviders == null || myProviders.Items.Empty())
        {
            Core?.ShowWarning(Translations.OurSuggestions1);
        }
        else
        {
            if (Client != null && render != null) render.Status = LoadingStatus.Loading; //force reset Premium status

            Client ??= await PrincipalApi.Get(IsAuthenticated);
            mySuggestions = await MySuggestionsApi.Get(Client?.ClientePaddle?.ActiveProduct, IsAuthenticated, Core);

            if (mySuggestions == null || mySuggestions.Items(SearchType).Empty())
            {
                Core?.ShowWarning(Translations.OurSuggestions2);
            }
        }

        Core?.HideLoading(mySuggestions);
    }

    public Task ShowMediaPopup(string? tmdb_id, string? name, MediaType type)
    {
        if (string.IsNullOrEmpty(tmdb_id)) return default!;

        return ModalService.MediaPopup(Watched, Watching, Wish, type, tmdb_id, ShowPrivateAction, IsAuthenticated);
    }

    private Dictionary<string, string> GetExtraParameters(string? provider_id, string? region, string sort_by)
    {
        if (provider_id == null) throw new ArgumentNullException(nameof(provider_id));
        if (region == null) throw new ArgumentNullException(nameof(region));

        var genres = "";

        if (SearchType == MediaType.movie)
        {
            genres = string.Join("|", mySuggestions?.MovieGenres.Select(s => (int)s) ?? Enumerable.Empty<int>());
        }
        else
        {
            genres = string.Join("|", mySuggestions?.TvGenres.Select(s => (int)s) ?? Enumerable.Empty<int>());
        }

        return new Dictionary<string, string>() { { "with_watch_providers", provider_id }, { "sort_by", sort_by }, { "with_genres", genres }, { "watch_region", region } };
    }

    private async Task ImportFromProviders(MediaType type)
    {
        try
        {
            mySuggestions ??= new();

            var qtd = 0;
            if (Client?.ClientePaddle?.ActiveProduct == AccountProduct.Standard) qtd = AccountProduct.Standard.GetRestrictions().MySuggestions;
            if (Client?.ClientePaddle?.ActiveProduct == AccountProduct.Premium) qtd = AccountProduct.Premium.GetRestrictions().MySuggestions;

            var regions = myProviders?.Items.Select(s => s.region).Distinct().ToList() ?? [];

            if (type == MediaType.movie)
            {
                mySuggestions.Movies.Clear();
                MovieUpdating = true;
                Core?.ShowProcessing();

                //search best titles by provider (TMDB)
                var titles = new HashSet<MediaDetail>();
                foreach (var provider in myProviders?.Items ?? new())
                {
                    var result = await TmdbDiscoveryApi.GetList(new(), MediaType.movie, GetExtraParameters(provider.id, provider.region.ToString(), "vote_average.desc"));

                    foreach (var item in result.list)
                    {
                        titles.Add(item);
                    }
                }

                //select titles for the user
                foreach (var item in titles.OrderByDescending(o => o.rating))
                {
                    if (Watched != null && Watched.Movies.Any(a => a == item.tmdb_id)) continue;
                    if (Wish != null && Wish.Movies.Any(a => a.id == item.tmdb_id)) continue;

                    if (mySuggestions.Movies.Count < qtd)
                    {
                        var providers = await TmdbApi.GetWatchProvidersList(item.tmdb_id, MediaType.movie);
                        if (providers != null && myProviders != null)
                        {
                            List<ProviderBase> allProviders = [];
                            foreach (var region in regions) //test all possible regions added by user
                            {
                                var FreeList = providers.GetFreeListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var AdsList = providers.GetAdsListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var FlatRateList = providers.GetFlatRateListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var FlatRateBuyList = providers.GetFlatRateBuyListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var RentList = providers.GetRentListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var BuyList = providers.GetBuyListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));

                                allProviders.AddRange(FreeList.Concat(AdsList).Concat(FlatRateList).Concat(FlatRateBuyList).Concat(RentList).Concat(BuyList) ?? []);
                            }

                            mySuggestions.Items(MediaType.movie).Add(new SuggestionListItem(item.tmdb_id, item.title, item.poster_small, allProviders.Select(s => s.logo_path ?? "").Distinct().ToArray()));
                        }
                    }
                }

                if (mySuggestions.Items(MediaType.movie).Empty()) Core?.ShowWarning(null);

                mySuggestions = await MySuggestionsApi.Sync(MediaType.movie, mySuggestions, Core);
                MovieUpdating = false;
                Core?.HideProcessing(mySuggestions);
            }
            else
            {
                mySuggestions.Shows.Clear();
                ShowUpdating = true;
                Core?.ShowProcessing();

                //search best titles by provider (TMDB)
                var titles = new HashSet<MediaDetail>();
                foreach (var provider in myProviders?.Items ?? new())
                {
                    var result = await TmdbDiscoveryApi.GetList(new(), MediaType.tv, GetExtraParameters(provider.id, provider.region.ToString(), "vote_average.desc"));

                    foreach (var item in result.list)
                    {
                        titles.Add(item);
                    }
                }

                //select titles for the user
                foreach (var item in titles.OrderByDescending(o => o.rating))
                {
                    if (Watched != null && Watched.Shows.Any(a => a == item.tmdb_id)) continue;
                    if (Wish != null && Wish.Shows.Any(a => a.id == item.tmdb_id)) continue;

                    if (mySuggestions.Shows.Count < qtd)
                    {
                        var providers = await TmdbApi.GetWatchProvidersList(item.tmdb_id, MediaType.tv);
                        if (providers != null && myProviders != null)
                        {
                            List<ProviderBase> allProviders = [];
                            foreach (var region in regions) //test all possible regions added by user
                            {
                                var FreeList = providers.GetFreeListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var AdsList = providers.GetAdsListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var FlatRateList = providers.GetFlatRateListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var FlatRateBuyList = providers.GetFlatRateBuyListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var RentList = providers.GetRentListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));
                                var BuyList = providers.GetBuyListProviders(region).Where(w => myProviders.Items.Any(a => a.id == w.provider_id.ToString()));

                                allProviders.AddRange(FreeList.Concat(AdsList).Concat(FlatRateList).Concat(FlatRateBuyList).Concat(RentList).Concat(BuyList) ?? []);
                            }

                            mySuggestions.Items(MediaType.tv).Add(new SuggestionListItem(item.tmdb_id, item.title, item.poster_small, allProviders.Select(s => s.logo_path ?? "").Distinct().ToArray()));
                        }
                    }
                }

                if (mySuggestions.Items(MediaType.tv).Empty()) Core?.ShowWarning(null);

                mySuggestions = await MySuggestionsApi.Sync(MediaType.tv, mySuggestions, Core);
                ShowUpdating = false;
                Core?.HideProcessing(mySuggestions);
            }
        }
        catch (Exception ex)
        {
            MovieUpdating = false;
            ShowUpdating = false;
            Core?.ShowError(ex.Message);
            ex.ProcessException(Toast, Logger);
        }
    }

    private bool IsWatched(MediaType type, SuggestionListItem item)
    {
        if (type == MediaType.movie)
        {
            if (Watched != null && Watched.Movies.Any(a => a == item.id)) return true;
            if (Wish != null && Wish.Movies.Any(a => a.id == item.id)) return true;

            return false;
        }
        else
        {
            if (Watched != null && Watched.Shows.Any(a => a == item.id)) return true;
            if (Wish != null && Wish.Shows.Any(a => a.id == item.id)) return true;

            return false;
        }
    }

    private async Task OpenConfigurations()
    {
        mySuggestions ??= new();

        await ModalService.MySuggestionsPopup(mySuggestions,
            new EventCallbackFactory().Create(this, async (SD.Shared.Models.MySuggestions value) => await UpdateMySuggestions(value)));
    }

    private async Task UpdateMySuggestions(SD.Shared.Models.MySuggestions obj)
    {
        mySuggestions = await MySuggestionsApi.Add(obj);

        StateHasChanged();

        await Toast.Warning(Translations.UpdateMySuggestions);
    }

    private void CheckedValueChanged(MediaType type)
    {
        SearchType = type;
        Core?.LoadingFinished?.Invoke(mySuggestions);
    }
}
