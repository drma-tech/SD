@page "/shared/watching/{type}/{token}"
<SeoHeader Title="@($"Watching ({Email}) | {(Type == "movie" ? MediaType.movie.GetName() : MediaType.tv.GetName())}")"></SeoHeader>

@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core
@inherits PageCore<SharedWatchingList>
@inject WishListApi WishApi
@inject WatchingListApi WatchingApi
@inject WatchedListApi WatchedApi

@if (Type == "movie")
{
    <WatchingComponent Core="CoreWatching" MediaType="MediaType.movie" ShowPrivateAction="false" ShowHeader="true" FullScreen="true"
                       Watched="Watched" Watching="Watching" Wish="Wish" IsAuthenticated="IsAuthenticated" UserId="@UserId"
                       ExpressionEmpty="(WatchingList? list) => list == null || list.Movies.Empty()" CustomTitle="@($"Watching ({Email}) | {MediaType.movie.GetName()}")">
    </WatchingComponent>
}
else
{
    <WatchingComponent Core="CoreWatching" MediaType="MediaType.tv" ShowPrivateAction="false" ShowHeader="true" FullScreen="true"
                       Watched="Watched" Watching="Watching" Wish="Wish" IsAuthenticated="IsAuthenticated" UserId="@UserId"
                       ExpressionEmpty="(WatchingList? list) => list == null || list.Shows.Empty()" CustomTitle="@($"Watching ({Email}) | {MediaType.tv.GetName()}")">
    </WatchingComponent>
}

@code {
    [Parameter] public string? Type { get; set; }
    [Parameter] public string? Token { get; set; }

    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public string? Email { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Email = await PrincipalApi.GetEmail(Token);
    }

    protected override async Task LoadDataRender()
    {
        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, null, Token), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, null, Token));
    }

}