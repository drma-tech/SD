@inherits FormBase<TValue, FieldSelect<TValue, TEnum>>
@typeparam TValue
@typeparam TEnum where TEnum : struct, Enum, IConvertible

@if (Visible)
{
    <Field Horizontal="true">
        <FieldLabel ColumnSize="@GetLabelSize()">
            <Blazorise.Icon Name="@CssIcon"></Blazorise.Icon> @For?.GetCustomAttribute().Name
            @if (Required)
            {
                <div style="color: red; display: initial;"> *</div>
            }
        </FieldLabel>
        <FieldBody ColumnSize="@GetBodySize()">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    @if (Multiple)
                    {
                        <div @attributes="@GetAttributes("height: auto; min-height: 38px;")">
                            @if (SelectedValues != null)
                            {
                                @foreach (var item in SelectedValues)
                                {
                                    <Badge Color="Color.Secondary" Style="font-size: 90%;" Margin="Margin.Is1.FromEnd">
                                        @item.GetName()
                                    </Badge>
                                }
                            }
                        </div>
                    }
                    else
                    {
                        <Select TValue="TValue" SelectedValue="@SelectedValue" SelectedValueChanged="SelectedValueChanged" Disabled="@Disabled">
                            @if (ShowGroup)
                            {
                                <SelectItem></SelectItem>
                                @foreach (var group in EnumHelper.GetList<TEnum>().OrderBy(o => o.Group).ThenBy(Order).Select(s => s.Group).Distinct())
                                {
                                    if (string.IsNullOrEmpty(group))
                                    {
                                        @foreach (var item in EnumHelper.GetList<TEnum>().Where(w => w.Group == group).OrderBy(Order))
                                        {
                                            <SelectItem Value="@item.Value">@item.Name</SelectItem>
                                        }
                                    }
                                    else
                                    {
                                        <SelectGroup Label="@group">
                                            @foreach (var item in EnumHelper.GetList<TEnum>().Where(w => w.Group == group).OrderBy(Order))
                                            {
                                                <SelectItem Value="@item.Value">@item.Name</SelectItem>
                                            }
                                        </SelectGroup>
                                    }
                                }
                            }
                            else
                            {
                                <SelectItem></SelectItem>
                                @foreach (var item in EnumHelper.GetList<TEnum>().OrderBy(Order))
                                {
                                    <SelectItem Value="@item.Value">@item.Name</SelectItem>
                                }
                            }
                        </Select>
                    }
                </Addon>
                @if (ButtonClicked.HasDelegate) //custom button
                {
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Outline="true" Clicked="@ButtonClicked" title="@ButtonTitle" Disabled="@Disabled">
                            <Blazorise.Icon Name="@ButtonCssIcon"></Blazorise.Icon>
                        </Button>
                    </Addon>
                }
                @if (ShowSwitch) //switch
                {
                    <Addon AddonType="AddonType.End">
                        <AddonLabel Style="padding-right: 2px;">
                            <Switch TValue="bool" Disabled="@Disabled"></Switch>
                        </AddonLabel>
                    </Addon>
                }
                @* @if (ShowHelper & !Multiple) //help
                {
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Outline="true" Clicked="() => UpdateDataHelp(For)" Disabled="@Disabled">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Question"></Blazorise.Icon>
                        </Button>
                    </Addon>
                }*@
                @if (Multiple) //add
                {
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Primary" Outline="true" Clicked="() => UpdateDataSelect(For)" Disabled="@Disabled">
                            <Blazorise.Icon Name="FontAwesomeIcons.Plus"></Blazorise.Icon>
                        </Button>
                    </Addon>
                }
            </Addons>

            @*<ValidationMessage For="@For"></ValidationMessage>*@
        </FieldBody>
        @if (!string.IsNullOrEmpty(Description) && ShowDescription)
        {
            <Column>
                <FieldHelp Style="color: #17a2b8 !important">@Description</FieldHelp>
            </Column>
        }
        @if (!string.IsNullOrEmpty(CustomInfo))
        {
            <Column>
                <FieldHelp Style="color: #17a2b8 !important">@CustomInfo</FieldHelp>
            </Column>
        }
        @if (!string.IsNullOrEmpty(HelpLink))
        {
            <Column ColumnSize="ColumnSize.IsFull">
                <a href="@HelpLink" target="_blank" style="display: block; font-size: 80%;" rel="nofollow">@(new Uri(HelpLink).Host)</a>
            </Column>
        }
    </Field>
}