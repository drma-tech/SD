@page "/profile"

@using SD.Shared.Models.Auth
@using SD.WEB.Modules.Auth
@using SD.WEB.Modules.Auth.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Subscription.Core

@inherits PageCore<Profile>

@inject IHttpClientFactory httpClientFactory
@inject IJSRuntime JsRuntime
@inject MyProvidersApi MyProvidersApi
@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@inject PaddleConfigurationApi ConfigurationApi

<SeoHeader Title="@SeoTranslations.ProfileTitle" Description="@SeoTranslations.ProfileDescription" Url="/profile"></SeoHeader>

@if (IsAuthenticated)
{
    @* @if (Platform.NotEmpty() && Reviewed.Empty() && Client != null
     && (Client.ClientePaddle == null || !Client.ClientePaddle.IsPaidUser))
    {
        <Alert Visible="true" Color="Color.Info" Class="mb-3">
            <AlertMessage Display="Display.Inline.OnTablet.Block.OnMobile">
                @GlobalTranslations.WriteReviewTitle
            </AlertMessage>
            <AlertDescription>
                <Span Margin="Margin.Is2.FromEnd">@GlobalTranslations.WriteReviewMessage</Span>
                @if (Platform == "play")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://play.google.com/store/apps/details?id=com.streamingdiscovery.www.twa" Type="ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/google-play.png" Width="Width.Px(16)"></Image> Google Play
                    </Button>
                }
                @if (Platform == "windows")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://apps.microsoft.com/detail/9PB1PKRDD8L0" Type="ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/microsoft-store.png" Width="Width.Px(16)"></Image> Microsoft Store
                    </Button>
                }
                @if (Platform == "webapp")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://www.trustpilot.com/review/streamingdiscovery.com" Type="ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/trustpilot.png" Width="Width.Px(16)"></Image> Trustpilot
                    </Button>
                }
            </AlertDescription>
        </Alert>
    } *@
}

<Row Gutter="(8,8)">
    <Column ColumnSize="ColumnSize.Is3.OnFullHD.Is6.OnMobile">
        <Alert Visible="true" Color="Color.Secondary">
            <AlertMessage>
                <Blazorise.Icon Name="@FontAwesomeIcons.Star" Margin="Margin.Is1.FromEnd"></Blazorise.Icon>@Translations.Providers
            </AlertMessage>
            <Div>
                <Badge Color="Color.Secondary" Padding="Padding.Is1">@(myProviders?.Items.Count ?? 0)</Badge>
            </Div>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnFullHD.Is6.OnMobile">
        <Alert Visible="true" Color="Color.Secondary">
            <AlertMessage>
                <Blazorise.Icon Name="@FontAwesomeIcons.Bookmark" Margin="Margin.Is1.FromEnd"></Blazorise.Icon>@Translations.Wishlist
            </AlertMessage>
            <Div>
                <Badge Color="Color.Secondary" Padding="Padding.Is1">@(Wish?.Movies.Count ?? 0) @SD.Shared.Resources.Enum.PopularType.MovieName</Badge>
                <Badge Color="Color.Secondary" Padding="Padding.Is1">@(Wish?.Shows.Count ?? 0) @SD.Shared.Resources.Enum.PopularType.ShowName</Badge>
            </Div>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnFullHD.Is6.OnMobile">
        <Alert Visible="true" Color="Color.Secondary">
            <AlertMessage>
                <Blazorise.Icon Name="@FontAwesomeIcons.Eye" Margin="Margin.Is1.FromEnd"></Blazorise.Icon>@Translations.Watching
            </AlertMessage>
            <Div>
                <Badge Color="Color.Secondary" Padding="Padding.Is1">@(Watching?.Movies.Count ?? 0) @SD.Shared.Resources.Enum.PopularType.MovieName</Badge>
                <Badge Color="Color.Secondary" Padding="Padding.Is1">@(Watching?.Shows.Count ?? 0) @SD.Shared.Resources.Enum.PopularType.ShowName</Badge>
            </Div>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnFullHD.Is6.OnMobile">
        <Alert Visible="true" Color="Color.Secondary">
            <AlertMessage>
                <Blazorise.Icon Name="@FontAwesomeIcons.ClockRotateLeft" Margin="Margin.Is1.FromEnd"></Blazorise.Icon>@Translations.Watched
            </AlertMessage>
            <Div>
                <Badge Color="Color.Secondary" Padding="Padding.Is1">@(Watched?.Movies.Count ?? 0) @SD.Shared.Resources.Enum.PopularType.MovieName</Badge>
                <Badge Color="Color.Secondary" Padding="Padding.Is1">@(Watched?.Shows.Count ?? 0) @SD.Shared.Resources.Enum.PopularType.ShowName</Badge>
            </Div>
        </Alert>
    </Column>
</Row>

@* <Div TextAlignment="TextAlignment.Center">
    @if (Navigation.BaseUri.Contains("localhost") || Navigation.BaseUri.Contains("dev"))
    {
        <div class="adsbygoogle google-ads" style="background-color: black;"></div>
    }
    else
    {
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-3885428939386350" data-ad-slot="7834182664"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    }
</Div> *@

<MyProviderComponent Fake="Fake" WatchedList="Watched" WatchingList="Watching" WishList="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MyProviderComponent>

<MySuggestions Fake="Fake" Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MySuggestions>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <MyWishListComponent Watched="Watched" Watching="Watching" Wish="Wish" CoreWishlist="CoreWish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated" UserId="@UserId"></MyWishListComponent>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <MyWatchingListComponent Watched="Watched" Watching="Watching" Wish="Wish" CoreWatching="CoreWatching" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated" UserId="@UserId"></MyWatchingListComponent>
    </Column>
</Row>

@code {
    [SupplyParameterFromQuery][Parameter] public string? _ptxn { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "Fake")] public bool Fake { get; set; } = false;

    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    private MyProviders? myProviders { get; set; }
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public string? Platform { get; set; }
    public string? Reviewed { get; set; }

    protected override void OnInitialized()
    {
        WatchedApi.DataChanged += (WatchedList? model) => { Watched = model; CoreWatched?.LoadingFinished?.Invoke(model); StateHasChanged(); };
        WatchingApi.DataChanged += (WatchingList? model) => { Watching = model; CoreWatching?.LoadingFinished?.Invoke(model); StateHasChanged(); };
        WishApi.DataChanged += (WishList? model) => { Wish = model; CoreWish?.LoadingFinished?.Invoke(model); StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        if (!string.IsNullOrEmpty(_ptxn))
        {
            var config = await ConfigurationApi.GetConfigurations();
            if (config == null) throw new NotificationException("server comunication error");

            await JsRuntime.InvokeVoidAsync("startPaddle", config.Token);
        }

        if (Fake)
        {
            var http = httpClientFactory.CreateClient("RetryHttpClient");

            Watched = await http.GetFromJsonAsync<WatchedList>("/data/WatchedList.json");
            Watching = await http.GetFromJsonAsync<WatchingList>("/data/WatchingList.json");
            Wish = await http.GetFromJsonAsync<WishList>("/data/WishList.json");
        }
        else
        {
            (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));
        }

        myProviders = await MyProvidersApi.Get(IsAuthenticated, null);
        Platform = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "platform");
        Reviewed = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "reviewed");
    }

    // protected async Task OpenCheckout(string? priceId)
    // {
    //     var locale = AppStateStatic.Language.ToString()?.Substring(0, 2);

    //     await JsRuntime.InvokeVoidAsync("openCheckout", null, null, locale, null, null, _ptxn);
    // }

    // private async Task SetReviewed()
    // {
    //     await JsRuntime.InvokeAsync<string>("SetLocalStorage", "reviewed", "true");
    //     Reviewed = "true";
    // }
}