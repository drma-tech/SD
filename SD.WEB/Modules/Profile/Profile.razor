@page "/profile"

@using SD.Shared.Resources.Enum
@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Subscription.Core
@inherits PageCore<Profile>

@inject IJSRuntime JsRuntime
@inject MyProvidersApi MyProvidersApi
@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@inject PaddleConfigurationApi ConfigurationApi

<SeoHeader Title="@SeoTranslations.ProfileTitle" Description="@SeoTranslations.ProfileDescription" Url="/profile"></SeoHeader>

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <div style="text-align: center;">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5145928155833172" data-ad-slot="1353899488"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
}

@if (IsAuthenticated)
{
    @* @if (Platform.NotEmpty() && Reviewed.Empty() && Client != null
     && (Client.ClientePaddle == null || !Client.ClientePaddle.IsPaidUser))
    {
        <Alert Visible="true" Color="Color.Info" Class="mb-3">
            <AlertMessage Display="Display.Inline.OnTablet.Block.OnMobile">
                @GlobalTranslations.WriteReviewTitle
            </AlertMessage>
            <AlertDescription>
                <Span Margin="Margin.Is2.FromEnd">@GlobalTranslations.WriteReviewMessage</Span>
                @if (Platform == "play")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://play.google.com/store/apps/details?id=com.streamingdiscovery.www.twa" Type="@ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/google-play.png" Width="Width.Px(16)"></Image> Google Play
                    </Button>
                }
                @if (Platform == "windows")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://apps.microsoft.com/detail/9PB1PKRDD8L0" Type="@ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/microsoft-store.png" Width="Width.Px(16)"></Image> Microsoft Store
                    </Button>
                }
                @if (Platform == "webapp")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://www.trustpilot.com/review/streamingdiscovery.com" Type="@ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/trustpilot.png" Width="Width.Px(16)"></Image> Trustpilot
                    </Button>
                }
            </AlertDescription>
        </Alert>
    } *@
}
else
{
    <MudCard Class="mb-2 mud-theme-primary" Outlined="true">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h3">@Translations.HeroTitle</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.h6">@Translations.HeroText</MudText>
            <MudText Typo="Typo.caption">@Translations.HeroNote</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/login-providers">@Translations.HeroButton</MudButton>
        </MudCardActions>
    </MudCard>
}

<MudGrid Spacing="2" Class="mb-2">
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Platforms
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(MyProviders?.Items.Count ?? 0)
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@Icons.Material.Filled.Bookmark" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Wishlist
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Wish?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Wish?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Watching
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watching?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watching?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@Icons.Material.Filled.History" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Watched
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watched?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watched?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
</MudGrid>

<MyProviderComponent WatchedList="Watched" WatchingList="Watching" WishList="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MyProviderComponent>

<MySuggestions Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MySuggestions>

<MudGrid Spacing="2" Class="mb-2">
    <MudItem xs="12" md="6">
        <MyWishListGroup Watched="Watched" Watching="Watching" Wish="Wish" CoreWishlist="CoreWish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"
                         UserId="@UserId"></MyWishListGroup>
    </MudItem>
    <MudItem xs="12" md="6">
        <MyWatchingListGroup Watched="Watched" Watching="Watching" Wish="Wish" CoreWatching="CoreWatching" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"
                             UserId="@UserId"></MyWatchingListGroup>
    </MudItem>
</MudGrid>

@code {
    [SupplyParameterFromQuery][Parameter] public string? _ptxn { get; set; }

    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    private MyProviders? MyProviders { get; set; }
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public string? Platform { get; set; }
    public string? Reviewed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedApi.DataChanged += model =>
        {
            Watched = model;
            CoreWatched?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WatchingApi.DataChanged += model =>
        {
            Watching = model;
            CoreWatching?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WishApi.DataChanged += model =>
        {
            Wish = model;
            CoreWish?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    protected override async Task LoadDataRender()
    {
        if (!string.IsNullOrEmpty(_ptxn))
        {
            var config = await ConfigurationApi.GetConfigurations();
            if (config == null) throw new NotificationException("server comunication error");

            await JsRuntime.InvokeVoidAsync("startPaddle", config.Token);
        }

        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));

        MyProviders = await MyProvidersApi.Get(IsAuthenticated, null);
        Platform = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "platform");
        Reviewed = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "reviewed");
    }

    // protected async Task OpenCheckout(string? priceId)
    // {
    //     var locale = AppStateStatic.Language.ToString()?.Substring(0, 2);

    //     await JsRuntime.InvokeVoidAsync("openCheckout", null, null, locale, null, null, _ptxn);
    // }

    // private async Task SetReviewed()
    // {
    //     await JsRuntime.InvokeAsync<string>("SetLocalStorage", "reviewed", "true");
    //     Reviewed = "true";
    // }
}