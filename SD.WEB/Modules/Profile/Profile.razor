@page "/profile"

@using SD.Shared.Resources.Enum
@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Subscription.Core
@inherits PageCore<Profile>

@inject IJSRuntime JsRuntime
@inject MyProvidersApi MyProvidersApi
@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@inject PaddleConfigurationApi ConfigurationApi

<SeoHeader Title="@SeoTranslations.ProfileTitle" Description="@SeoTranslations.ProfileDescription" Url="/profile" Index="false" Keywords="@([])"></SeoHeader>

<GoogleAdSense Section="@GoogleAdSense.AdUnit.Profile" IsAuthenticated="IsAuthenticated" Format="horizontal"></GoogleAdSense>

<MudGrid Spacing="2" Class="mb-2">
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@IconsFA.Solid.Icon("clapperboard").Font" Color="Color.Primary" Class="me-2"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Platforms
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(MyProviders?.Items.Count ?? 0)
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@IconsFA.Solid.Icon("bookmark").Font" Color="Color.Primary" Class="me-2"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Wishlist
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Wish?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Wish?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@IconsFA.Solid.Icon("eye").Font" Color="Color.Primary" Class="me-2"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Watching
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watching?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watching?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@IconsFA.Solid.Icon("clock-rotate-left").Font" Color="Color.Primary" Class="me-2"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Watched
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watched?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watched?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
</MudGrid>

<MyProviderComponent WatchedList="Watched" WatchingList="Watching" WishList="Wish" IsAuthenticated="IsAuthenticated"></MyProviderComponent>

<MySuggestions Watched="Watched" Watching="Watching" Wish="Wish" IsAuthenticated="IsAuthenticated"></MySuggestions>

<MudGrid Spacing="2" Class="mb-2">
    <MudItem xs="12" md="6">
        <MyWishListGroup Watched="Watched" Watching="Watching" Wish="Wish" CoreWishlist="CoreWish" IsAuthenticated="IsAuthenticated"
                         UserId="@UserId"></MyWishListGroup>
    </MudItem>
    <MudItem xs="12" md="6">
        <MyWatchingListGroup Watched="Watched" Watching="Watching" Wish="Wish" CoreWatching="CoreWatching" IsAuthenticated="IsAuthenticated"
                             UserId="@UserId"></MyWatchingListGroup>
    </MudItem>
</MudGrid>

@code {
    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    private MyProviders? MyProviders { get; set; }
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public string? Reviewed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedApi.DataChanged += model =>
        {
            Watched = model;
            CoreWatched?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WatchingApi.DataChanged += model =>
        {
            Watching = model;
            CoreWatching?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WishApi.DataChanged += model =>
        {
            Wish = model;
            CoreWish?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));

        MyProviders = await MyProvidersApi.Get(IsAuthenticated, null);
        Reviewed = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "reviewed");
    }

    private void Login()
    {
        Navigation.NavigateTo("/.auth/login/aad?post_login_redirect_uri=" + Navigation.BaseUri + "login-success", true);
    }

    // private async Task SetReviewed()
    // {
    //     await JsRuntime.InvokeAsync<string>("SetLocalStorage", "reviewed", "true");
    //     Reviewed = "true";
    // }
}
