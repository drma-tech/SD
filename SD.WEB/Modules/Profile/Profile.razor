@page "/profile"

@using SD.Shared.Resources.Enum
@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Subscription.Core
@inherits PageCore<Profile>

@inject IJSRuntime JsRuntime
@inject MyProvidersApi MyProvidersApi
@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@inject PaddleConfigurationApi ConfigurationApi

<SeoHeader Title="@SeoTranslations.ProfileTitle" Description="@SeoTranslations.ProfileDescription" Index="false"></SeoHeader>

<GoogleAdSense Settings="@Settings" Principal="@Principal" Section="@GoogleAdSense.AdUnit.Profile"></GoogleAdSense>

@if (IsAuthenticated)
{
    @* @if (Platform.NotEmpty() && Reviewed.Empty() && Client != null
     && (Client.ClientePaddle == null || !Client.ClientePaddle.IsPaidUser))
    {
        <Alert Visible="true" Color="Color.Info" Class="mb-3">
            <AlertMessage Display="Display.Inline.OnTablet.Block.OnMobile">
                @GlobalTranslations.WriteReviewTitle
            </AlertMessage>
            <AlertDescription>
                <Span Margin="Margin.Is2.FromEnd">@GlobalTranslations.WriteReviewMessage</Span>
                @if (Platform == "play")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://play.google.com/store/apps/details?id=com.streamingdiscovery.www.twa" Type="@ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/google-play.png" Width="Width.Px(16)"></Image> Google Play
                    </Button>
                }
                @if (Platform == "windows")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://apps.microsoft.com/detail/9PB1PKRDD8L0" Type="@ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/microsoft-store.png" Width="Width.Px(16)"></Image> Microsoft Store
                    </Button>
                }
                @if (Platform == "webapp")
                {
                    <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                            To="https://www.trustpilot.com/review/streamingdiscovery.com" Type="@ButtonType.Link" Target="Target.Blank">
                        <Image Source="/logo/trustpilot.png" Width="Width.Px(16)"></Image> Trustpilot
                    </Button>
                }
            </AlertDescription>
        </Alert>
    } *@
}
else
{
    <MudCarousel ShowArrows="true" AutoCycle="true" TData="object" Class="mud-width-full mb-5" Style="@($"height: {(Breakpoint <= Breakpoint.Xs ? 450 : 300)}px;")">
        <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary" Class="px-12 pt-2 pb-6" Style="text-align: center; height: 100%;">
            <MudGrid Spacing="6" Justify="Justify.Center" Style="@($"{(Breakpoint <= Breakpoint.Xs ? "max-height" : "height")}: 100%; align-content: center;")">
                <MudItem xs="12" sm="6" Style="height: 100%; align-content: center;">
                    <MudImage Src="visitor-slide-1.png" Style="max-height: 100%; max-width: 100%;"></MudImage>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.h5" Align="Align.Center" Class="my-3">
                        Streaming Discovery
                    </MudText>
                    <MudText Typo="Typo.body1" Align="Align.Justify" Class="my-3">
                        Manage your streaming platforms, track your watch progress, and discover what to watch next with ease. Browse expert-curated lists like award winners and critic picks - all in one place.
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudCarouselItem>
        <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary" Class="px-12 pt-2 pb-6" Style="text-align: center; height: 100%;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="my-3">
                Top Features
            </MudText>
            <MudGrid Spacing="4" Justify="Justify.Center">
                <MudItem xs="12" sm="6" lg="3">
                    <MudPaper Class="pa-2" Elevation="3" Style="text-align:center">
                        <MudIcon Icon="@IconsFA.Solid.Icon("fire").Font" Size="Size.Large"></MudIcon>
                        <MudText Typo="Typo.subtitle1" Class="mt-2">
                            Discover What's Trending
                        </MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" lg="3">
                    <MudPaper Class="pa-2" Elevation="3" Style="text-align:center">
                        <MudIcon Icon="@IconsFA.Solid.Icon("circle-play").Font" Size="Size.Large"></MudIcon>
                        <MudText Typo="Typo.subtitle1" Class="mt-2">
                            Find New Streaming Platforms
                        </MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" lg="3">
                    <MudPaper Class="pa-2" Elevation="3" Style="text-align:center">
                        <MudIcon Icon="@IconsFA.Solid.Icon("list-check").Font" Size="Size.Large"></MudIcon>
                        <MudText Typo="Typo.subtitle1" Class="mt-2">
                            Manage Your Platforms and Wishlists
                        </MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" lg="3">
                    <MudPaper Class="pa-2" Elevation="3" Style="text-align:center">
                        <MudIcon Icon="@IconsFA.Solid.Icon("list-ol").Font" Size="Size.Large"></MudIcon>
                        <MudText Typo="Typo.subtitle1" Class="mt-2">
                            Explore Curated Collections
                        </MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudCarouselItem>
        <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary" Class="px-12 pt-2 pb-6" Style="text-align: center; height: 100%;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="my-3">
                Start tracking your watchlist today — it’s free!
            </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/login-providers" Class="my-4">
                @Translations.HeroButton
            </MudButton>
            <MudText Typo="Typo.caption" Align="Align.Center" Class="my-3 d-block" Style="bottom: 50px; position: absolute; left: 0; right: 0;">
                @Translations.HeroNote
            </MudText>
        </MudCarouselItem>
    </MudCarousel>
}

<MudGrid Spacing="2" Class="mb-2">
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@IconsFA.Solid.Icon("circle-play").Font" Color="Color.Primary" Class="me-2"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Platforms
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(MyProviders?.Items.Count ?? 0)
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@IconsFA.Solid.Icon("bookmark").Font" Color="Color.Primary" Class="me-2"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Wishlist
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Wish?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Wish?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@IconsFA.Solid.Icon("eye").Font" Color="Color.Primary" Class="me-2"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Watching
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watching?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watching?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
    <MudItem xs="6" md="3">
        <MudPaper Outlined="true" Class="pa-1">
            <div class="d-flex" style="align-self: center;">
                <MudIcon Icon="@IconsFA.Solid.Icon("clock-rotate-left").Font" Color="Color.Primary" Class="me-2"></MudIcon>
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    @Translations.Watched
                </MudText>
            </div>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watched?.Movies.Count ?? 0) @PopularType.MovieName
            </MudChip>
            <MudChip T="string" Color="Color.Secondary" Label="true" Style="padding: 0.2rem; height: auto;">
                @(Watched?.Shows.Count ?? 0) @PopularType.ShowName
            </MudChip>
        </MudPaper>
    </MudItem>
</MudGrid>

<MyProviderComponent WatchedList="Watched" WatchingList="Watching" WishList="Wish" IsAuthenticated="IsAuthenticated"></MyProviderComponent>

<MySuggestions Watched="Watched" Watching="Watching" Wish="Wish" IsAuthenticated="IsAuthenticated"></MySuggestions>

<MudGrid Spacing="2" Class="mb-2">
    <MudItem xs="12" md="6">
        <MyWishListGroup Watched="Watched" Watching="Watching" Wish="Wish" CoreWishlist="CoreWish" IsAuthenticated="IsAuthenticated"
                         UserId="@UserId"></MyWishListGroup>
    </MudItem>
    <MudItem xs="12" md="6">
        <MyWatchingListGroup Watched="Watched" Watching="Watching" Wish="Wish" CoreWatching="CoreWatching" IsAuthenticated="IsAuthenticated"
                             UserId="@UserId"></MyWatchingListGroup>
    </MudItem>
</MudGrid>

@code {
    [SupplyParameterFromQuery][Parameter] public string? _ptxn { get; set; }

    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }

    private MyProviders? MyProviders { get; set; }
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public string? Platform { get; set; }
    public string? Reviewed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedApi.DataChanged += model =>
        {
            Watched = model;
            CoreWatched?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WatchingApi.DataChanged += model =>
        {
            Watching = model;
            CoreWatching?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
        WishApi.DataChanged += model =>
        {
            Wish = model;
            CoreWish?.LoadingFinished?.Invoke(model);
            StateHasChanged();
        };
    }

    protected override async Task LoadDataRender()
    {
        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);

        if (!string.IsNullOrEmpty(_ptxn))
        {
            var config = await ConfigurationApi.GetConfigurations();
            if (config == null) throw new NotificationException("server comunication error");

            await JsRuntime.InvokeVoidAsync("startPaddle", config.Token);
        }

        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));

        MyProviders = await MyProvidersApi.Get(IsAuthenticated, null);
        Platform = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "platform");
        Reviewed = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "reviewed");
    }

    // private async Task SetReviewed()
    // {
    //     await JsRuntime.InvokeAsync<string>("SetLocalStorage", "reviewed", "true");
    //     Reviewed = "true";
    // }
}