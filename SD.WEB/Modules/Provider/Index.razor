@page "/providers"

@using SD.WEB.Modules.Profile
@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Provider.Core;
@using System.ComponentModel.DataAnnotations

@inherits PageCore<Provider.Index>

@inject AllProvidersApi AllProvidersApi
@inject MyProvidersApi MyProvidersApi

<SeoHeader Title="@SeoTranslations.ProvidersTitle" Description="@SeoTranslations.ProvidersDescription" Url="/providers"></SeoHeader>

@if (Settings != null && Settings.ShowAdSense)
{
    <Div TextAlignment="TextAlignment.Center">
        @if (Navigation.BaseUri.Contains("localhost") || Navigation.BaseUri.Contains("dev"))
        {
            <div class="adsbygoogle google-ads" style="background-color: black;"></div>
        }
        else
        {
            <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5922021468622891" data-ad-slot="5179836142"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        }
    </Div>
}

<HeaderComponent Title="@Provider.Resources.Translations.TitleProviders.Format(AppStateStatic.Region.GetName() ?? "invalid country")">
    <Select TValue="DeliveryModel?" @bind-SelectedValue="@DeliveryModel" Size="Size.ExtraSmall">
        <SelectItem></SelectItem>
        @foreach (var item in EnumHelper.GetList<DeliveryModel>())
        {
            <SelectItem Value="@item.Value">@item.Name</SelectItem>
        }
    </Select>
</HeaderComponent>
<RenderControl Core="Core" Model="AllProviders" ExpressionEmpty="@((AllProviders? obj) => obj == null || obj.Items.Empty())">
    @if (AppStateStatic.Region.GetName().Empty())
    {
        <Alert Color="Color.Danger" Padding="Padding.Is1" Margin="Margin.Is2.FromTop" Visible="true">
            <AlertMessage>
                There was an error detecting your region
            </AlertMessage>
            <AlertDescription>
                <Paragraph>Please contact support and provide the following information:</Paragraph>
                <Paragraph>CurrentRegion: @System.Globalization.RegionInfo.CurrentRegion.Name</Paragraph>
                <Paragraph>CurrentCulture: @System.Globalization.CultureInfo.CurrentCulture.Name</Paragraph>
            </AlertDescription>
        </Alert>
    }
    else
    {
        <div class="grid-relative-container-sm">
            @foreach (var item in GetFilteredProviders())
            {
                var favorite = myProviders?.Items.Any(a => a.id == item.id) ?? false;

                <Div>
                    <Card Background="(favorite ? Background.Success : Background.Transparent)" Style="@(favorite ? "padding: 3px;" : "")">
                        <Blazorise.Link To="@($"/providers/{item.id}")">
                            <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Alt="@item.name" Style="cursor: pointer;" title="@item.name"></CardImage>
                            @if (favorite)
                            {
                                <Badge Color="Color.Light" Style="padding: 0.15rem; font-size: 1rem; position: absolute; top: 6px; right: 6px; z-index: 1;">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Star" TextColor="TextColor.Success"></Blazorise.Icon>
                                </Badge>
                            }
                        </Blazorise.Link>
                    </Card>
                    <AuthorizeView Roles="administrator">
                        <Authorized>
                            @*  @if (string.IsNullOrEmpty(item.link))
                        {
                            <p class="m-0" style="color: red">link</p>
                        } *@
                            @*  @if (string.IsNullOrEmpty(item.description))
                        {
                            <p class="m-0" style="color: red">description</p>
                        } *@
                            @if (item.models.Empty())
                            {
                                <p class="m-0" style="color: red">model</p>
                            }
                            @*  @if (item.models.Any(a => a == SD.Shared.Enums.DeliveryModel.SVOD) && item.plans.Empty())
                        {
                            <p class="m-0" style="color: red">plan</p>
                        } *@
                        </Authorized>
                    </AuthorizeView>
                </Div>
            }
        </div>
    }
</RenderControl>

@code {
    public RenderControlCore<AllProviders?>? Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }

    public Settings? Settings { get; set; }
    private MyProviders? myProviders { get; set; }

    [Custom(Name = "Model")]
    public DeliveryModel? DeliveryModel { get; set; }

    public IEnumerable<ProviderModel> GetFilteredProviders() => AllProviders?.Items
    .Where(p => p.regions.Any(a => a == AppStateStatic.Region))
    .Where(p => p.models.Any(a => DeliveryModel == null ? true : a == DeliveryModel))
    .OrderBy(o => o.priority).AsEnumerable()
    ?? [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AppStateStatic.RegionChanged += StateHasChanged;

        Settings = await CacheSettingsApi.GetSettings();

        //it is in initialize so it can be recognized by link mapping
        AllProviders = await AllProvidersApi.GetAll(Core);
    }

    protected override async Task LoadDataRender()
    {
        myProviders = await MyProvidersApi.Get(IsAuthenticated, null);
    }
}
