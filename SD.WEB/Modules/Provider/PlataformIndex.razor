@page "/platforms"

@using System.Globalization
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Core
@using SD.WEB.Modules.Provider.Resources
@inherits PageCore<PlataformIndex>

@inject AllProvidersApi AllProvidersApi
@inject MyProvidersApi MyProvidersApi

<SeoHeader Title="@SeoTranslations.ProvidersTitle" Description="@SeoTranslations.ProvidersDescription" Url="/providers"></SeoHeader>

@if (Settings is { ShowAdSense: true } && Principal?.ClientePaddle is not { IsPaidUser: true })
{
    <div style="text-align: center;">
        <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5145928155833172" data-ad-slot="5359194302"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
}

<HeaderComponent Title="@Translations.TitleProviders.Format(AppStateStatic.Region.GetName() ?? "invalid country")">
    <MudSelect T="DeliveryModel?" @bind-SelectedValue="@DeliveryModel" Clearable="true" FitContent="true" Style="min-width: 150px;" Placeholder="Filter">
        @foreach (var item in EnumHelper.GetList<DeliveryModel>())
        {
            <MudSelectItem T="DeliveryModel?" Value="@item.Value">@item.Name</MudSelectItem>
        }
    </MudSelect>
</HeaderComponent>
<RenderControl Core="Core" Model="AllProviders" ExpressionEmpty="@((AllProviders? obj) => obj == null || obj.Items.Empty())">
    @if (AppStateStatic.Region.GetName().Empty())
    {
        <MudAlert Severity="Severity.Error" Dense="true" Variant="Variant.Outlined">
            <MudText Typo="Typo.h6">There was an error detecting your region</MudText>
            <MudText Typo="Typo.body1">Please contact support and provide the following information:</MudText>
            <MudText Typo="Typo.body1">CurrentRegion: @RegionInfo.CurrentRegion.Name</MudText>
            <MudText Typo="Typo.body1">CurrentCulture: @CultureInfo.CurrentCulture.Name</MudText>
        </MudAlert>
    }
    else
    {
        <div class="grid-relative-container-sm">
            @foreach (var item in GetFilteredProviders())
            {
                var favorite = MyProviders?.Items.Any(a => a.id == item.id) ?? false;

                <div>
                    <MudLink Href="@($"/platforms/{item.id}")" Target="_self" Style="position: relative;">
                        <MudCard Outlined="true">
                            <MudCardContent Style="padding: 0;">
                                <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo_path)" FallbackSrc="images/no-image.png" Alt="@item.name"
                                          Fluid="true" ObjectFit="ObjectFit.Contain" Style="vertical-align: bottom;"></MudImage>
                                @if (favorite)
                                {
                                    <MudChip T="string" Icon="@Icons.Material.Filled.Star" Color="Color.Success" Size="Size.Medium" Label="true" Class="chip-no-text"
                                             Style="padding: 0.2rem; position: absolute; top: 0; right: 0; white-space: inherit; height: auto; width: 26.4px; z-index: 1;">
                                    </MudChip>
                                }
                            </MudCardContent>
                            <MudCardContent Style="text-align: center; padding: 4px; line-height: normal; font-size: 0.73rem; min-height: 38px">
                                @item.name
                            </MudCardContent>
                        </MudCard>
                    </MudLink>
                    <AuthorizeView Roles="administrator">
                        <Authorized>
                            @*  @if (string.IsNullOrEmpty(item.link))
                        {
                            <p class="m-0" style="color: red">link</p>
                        } *@
                            @*  @if (string.IsNullOrEmpty(item.description))
                        {
                            <p class="m-0" style="color: red">description</p>
                        } *@
                            @if (item.models.Empty())
                            {
                                <p class="m-0" style="color: red">model</p>
                            }
                            @*  @if (item.models.Any(a => a == SD.Shared.Enums.DeliveryModel.SVOD) && item.plans.Empty())
                        {
                            <p class="m-0" style="color: red">plan</p>
                        } *@
                        </Authorized>
                    </AuthorizeView>
                </div>
            }
        </div>
    }
</RenderControl>

@code {
    public RenderControlCore<AllProviders?>? Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }

    public Settings? Settings { get; set; }
    public ClientePrincipal? Principal { get; set; }
    private MyProviders? MyProviders { get; set; }

    [Custom(Name = "Model")] public DeliveryModel? DeliveryModel { get; set; }

    public IEnumerable<ProviderModel> GetFilteredProviders()
    {
        return AllProviders?.Items
                   .Where(p => p.regions.Any(a => a == AppStateStatic.Region))
                   .Where(p => p.models.Any(a => DeliveryModel == null || a == DeliveryModel))
                   .OrderBy(o => o.priority).AsEnumerable()
               ?? [];
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AppStateStatic.RegionChanged += StateHasChanged;

        Settings = await CacheSettingsApi.GetSettings();
        Principal = await PrincipalApi.Get(IsAuthenticated);

        //it is in initialize so it can be recognized by link mapping
        AllProviders = await AllProvidersApi.GetAll(Core);
    }

    protected override async Task LoadDataRender()
    {
        MyProviders = await MyProvidersApi.Get(IsAuthenticated, null);
    }

}