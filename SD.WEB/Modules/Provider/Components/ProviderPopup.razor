@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Resources
@using SD.WEB.Modules.Suggestions.Components
@using SD.WEB.Modules.Suggestions.Core
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<ProviderPopup>

@inject MyProvidersApi MyProvidersApi
@inject TmdbDiscoveryApi TmdbDiscoveryApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@Provider?.name</ModalTitle>
    <CloseButton/>
</ModalHeader>
<ModalBody MaxHeight="70">
    @if (Provider == null)
    {
        <Alert Color="Color.Danger" Visible="true">
            <AlertMessage>
                <Blazorise.Icon Name="FontAwesomeIcons.Trash"></Blazorise.Icon> @Translations.NotFound
            </AlertMessage>
        </Alert>
    }
    else
    {
        <Tabs @bind-SelectedTab="@_selectedTab" FullWidth="true" Justified="true" RenderMode="TabsRenderMode.LazyLoad">
            <Items>
                <Tab Name="About">@Translations.ProviderPopupTabAbout</Tab>
                <Tab Name="Details">@Translations.ProviderPopupTabDetails</Tab>
                <Tab Name="Catalog">@Translations.ProviderPopupTabCatalog</Tab>
            </Items>
            <Content>
                <TabPanel Name="About" Class="mt-3">
                    <Row Margin="Margin.Is2.FromBottom" HorizontalGutter="4" VerticalGutter="4">
                        <Column ColumnSize="ColumnSize.IsAuto">
                            @if (!string.IsNullOrEmpty(Provider?.logo_path))
                            {
                                <Image Source="@(TmdbOptions.OriginalPosterPath + Provider.logo_path)" Text="@Provider.name" alt="@Provider.name"></Image>
                            }
                        </Column>
                        <Column>
                            <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom">
                                @Provider?.description
                            </Paragraph>
                            <Paragraph>
                                @if (string.IsNullOrEmpty(Provider?.link))
                                {
                                    <a href="@($"https://www.google.com/search?q=streaming+{Provider?.name?.Replace("&", "")}")" target="_blank" rel="nofollow" style="float: left;">search on google</a>
                                }
                                else
                                {
                                    <a href="@Provider.link" target="_blank" rel="nofollow" style="float: left;">@(new Uri(Provider.link).Host)</a>
                                }
                            </Paragraph>
                        </Column>
                    </Row>
                </TabPanel>
                <TabPanel Name="Details" Class="mt-3">
                    <Divider DividerType="DividerType.TextContent" Text="@Translations.MediaTypes"/>
                    @foreach (var item in Provider?.types ?? [])
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.GetName()</Badge>
                    }
                    <Divider DividerType="DividerType.TextContent" Text="@Translations.Regions"/>
                    @foreach (var item in Provider?.regions.OrderBy(o => o.GetName()).ToList() ?? [])
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.GetName()</Badge>
                    }
                    <Divider DividerType="DividerType.TextContent" Text="@Translations.DeliveryModel"/>
                    @foreach (var item in Provider?.models ?? [])
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd" title="@item.GetDescription()" Style="cursor: help;">
                            @item.GetName() <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle"></Blazorise.Icon>
                        </Badge>
                    }
                    @if (Provider?.models.Any(a => a == DeliveryModel.SVOD) ?? false)
                    {
                        <Divider DividerType="DividerType.TextContent" Text="@Translations.Plans"/>
                        @if (Provider.plans.Any())
                        {
                            @foreach (var item in Provider.plans)
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.name: @item.price.ToString("C")</Badge>
                            }
                        }
                        else
                        {
                            <Badge Color="Color.Danger">@Translations.NotFound</Badge>
                        }
                    }
                </TabPanel>
                <TabPanel Name="Catalog" Class="mt-3">
                    <MediaList TitleHead="@Translations.Popular" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(ProviderId, "popularity.desc", WatchRegion)"
                               ShowFilter="true" Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="ShowPrivateAction" IsAuthenticated="IsAuthenticated">
                    </MediaList>
                    <MediaList TitleHead="@Translations.Release" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(ProviderId, "primary_release_date.desc", WatchRegion)"
                               ShowFilter="true" Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="ShowPrivateAction" IsAuthenticated="IsAuthenticated">
                    </MediaList>
                    <MediaList TitleHead="@Translations.TopRated" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(ProviderId, "vote_average.desc", WatchRegion)"
                               ShowFilter="true" Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="ShowPrivateAction" IsAuthenticated="IsAuthenticated">
                    </MediaList>
                </TabPanel>
            </Content>
        </Tabs>
    }
</ModalBody>
<ModalFooter>
    @if (MyProviders?.Items.Any(a => a.id == ProviderId) ?? false)
    {
        <Button Color="Color.Danger" Clicked="Remove" Disabled="@(!IsAuthenticated)" Size="Size.Small">
            <Blazorise.Icon Name="FontAwesomeIcons.Star"></Blazorise.Icon> @Button.Remove
        </Button>
    }
    else
    {
        <Button Color="Color.Primary" Clicked="Add" Disabled="@(!IsAuthenticated)" Size="Size.Small">
            <Blazorise.Icon Name="FontAwesomeIcons.Star"></Blazorise.Icon> @Button.Add
        </Button>
    }
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
        @Button.Close
    </Button>
</ModalFooter>

@code {
    [Parameter] [EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public ProviderModel? Provider { get; set; }
    [Parameter] public WatchedList? Watched { get; set; }
    [Parameter] public WatchingList? Watching { get; set; }
    [Parameter] public WishList? Wish { get; set; }
    [Parameter] public EventCallback<WatchedList?> WatchedChanged { get; set; }
    [Parameter] public EventCallback<WatchingList?> WatchingChanged { get; set; }
    [Parameter] public EventCallback<WishList?> WishChanged { get; set; }
    [Parameter] public bool ShowPrivateAction { get; set; }
    [Parameter] public string? WatchRegion { get; set; }
    [Parameter] public string? ProviderId { get; set; }

    private string _selectedTab = "About";
    private MyProviders? MyProviders { get; set; }

    protected override void OnInitialized()
    {
        WatchedListApi.DataChanged += model =>
        {
            Watched = model;
            WatchedChanged.InvokeAsync(model);
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            Watching = model;
            WatchingChanged.InvokeAsync(model);
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            Wish = model;
            WishChanged.InvokeAsync(model);
            StateHasChanged();
        };
    }

    protected override async Task LoadDataRender()
    {
        MyProviders = await MyProvidersApi.Get(IsAuthenticated, null);
    }

    private static Dictionary<string, string> GetExtraParameters(string? providerId, string? sortBy, string? watchRegion)
    {
        if (providerId == null) throw new ArgumentNullException(nameof(providerId));
        if (sortBy == null) throw new ArgumentNullException(nameof(sortBy));
        if (watchRegion == null) throw new ArgumentNullException(nameof(watchRegion));

        return new Dictionary<string, string> { { "with_watch_providers", providerId }, { "sort_by", sortBy }, { "watch_region", watchRegion } };
    }

    private async Task Add()
    {
        try
        {
            MyProviders ??= new MyProviders();

            var item = new MyProvidersItem { id = Provider?.id, name = Provider?.name, logo = Provider?.logo_path, region = AppStateStatic.Region };
            var client = await PrincipalApi.Get(true);
            MyProviders = await MyProvidersApi.Add(MyProviders, item, client?.ClientePaddle);

            await Toast.Success(GlobalTranslations.OperationCompleted);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove()
    {
        try
        {
            MyProviders ??= new MyProviders();

            MyProviders = await MyProvidersApi.Remove(MyProviders.Items.First(f => f.id == ProviderId));

            await Toast.Success(GlobalTranslations.OperationCompleted);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

}