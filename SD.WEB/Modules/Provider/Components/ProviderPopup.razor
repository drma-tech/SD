@inherits ComponentCore<ProviderPopup>
@using SD.Shared.Models
@using SD.WEB.Modules.Provider.Resources
@using SD.WEB.Modules.Suggestions.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Suggestions.Components

@inject MyProvidersApi MyProvidersApi
@inject TmdbDiscoveryApi TmdbDiscoveryApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@provider?.name</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    @if (provider == null)
    {
        <Alert Color="Color.Danger" Visible="true">
            <AlertMessage>
                <Blazorise.Icon Name="FontAwesomeIcons.Trash"></Blazorise.Icon> @Resources.Translations.NotFound
            </AlertMessage>
        </Alert>
    }
    else
    {
        <Tabs @bind-SelectedTab="@selectedTab" FullWidth="true" Justified="true" RenderMode="TabsRenderMode.LazyLoad">
            <Items>
                <Tab Name="About">@Translations.ProviderPopupTabAbout</Tab>
                <Tab Name="Details">@Translations.ProviderPopupTabDetails</Tab>
                <Tab Name="Catalog">@Translations.ProviderPopupTabCatalog</Tab>
            </Items>
            <Content>
                <TabPanel Name="About" Class="mt-3">
                    <Row Margin="Margin.Is2.FromBottom" HorizontalGutter="4" VerticalGutter="4">
                        <Column ColumnSize="ColumnSize.IsAuto">
                            @if (!string.IsNullOrEmpty(provider?.logo_path))
                            {
                                <Image Source="@(TmdbOptions.OriginalPosterPath + provider.logo_path)" Text="@provider.name" alt="@provider.name"></Image>
                            }
                        </Column>
                        <Column>
                            <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom">
                                @provider?.description
                            </Paragraph>
                            <Paragraph>
                                @if (string.IsNullOrEmpty(provider?.link))
                                {
                                    <a href="@($"https://www.google.com/search?q=streaming+{provider?.name?.Replace("&","")}")" target="_blank" rel="nofollow" style="float: left;">search on google</a>
                                }
                                else
                                {
                                    <a href="@provider.link" target="_blank" rel="nofollow" style="float: left;">@(new Uri(provider.link).Host)</a>
                                }
                            </Paragraph>
                        </Column>
                    </Row>
                </TabPanel>
                <TabPanel Name="Details" Class="mt-3">
                    <Divider DividerType="DividerType.TextContent" Text="@Translations.MediaTypes" />
                    @foreach (var item in provider?.types ?? new List<MediaType>())
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.GetName()</Badge>
                    }
                    <Divider DividerType="DividerType.TextContent" Text="@Translations.Regions" />
                    @foreach (var item in provider?.regions.OrderBy(o => o.GetName()).ToList() ?? new List<Region>())
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.GetName()</Badge>
                    }
                    <Divider DividerType="DividerType.TextContent" Text="@Translations.DeliveryModel" />
                    @foreach (var item in provider?.models ?? new List<DeliveryModel>())
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd" title="@item.GetDescription()" Style="cursor: help;">
                            @item.GetName() <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle"></Blazorise.Icon>
                        </Badge>
                    }
                    @if (provider?.models.Any(a => a == DeliveryModel.SVOD) ?? false)
                    {
                        <Divider DividerType="DividerType.TextContent" Text="@Translations.Plans" />
                        @if (provider.plans.Any())
                        {
                            @foreach (var item in provider.plans)
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.name: @item.price.ToString("C")</Badge>
                            }
                        }
                        else
                        {
                            <Badge Color="Color.Danger">@Translations.NotFound</Badge>
                        }
                    }
                </TabPanel>
                <TabPanel Name="Catalog" Class="mt-3">
                    <MediaList TitleHead="@Translations.Popular" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(ProviderId, "popularity.desc", WatchRegion)"
                               MaxItens="50" ShowFilter="true" Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="ShowPrivateAction" IsAuthenticated="IsAuthenticated"></MediaList>
                    <MediaList TitleHead="@Translations.Release" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(ProviderId, "primary_release_date.desc", WatchRegion)"
                               MaxItens="50" ShowFilter="true" Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="ShowPrivateAction" IsAuthenticated="IsAuthenticated"></MediaList>
                    <MediaList TitleHead="@Translations.TopRated" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(ProviderId, "vote_average.desc", WatchRegion)"
                               MaxItens="50" ShowFilter="true" Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="ShowPrivateAction" IsAuthenticated="IsAuthenticated"></MediaList>
                </TabPanel>
            </Content>
        </Tabs>
    }
</ModalBody>
<ModalFooter>
    @if (myProviders?.Items.Any(a => a.id == ProviderId) ?? false)
    {
        <Button Color="Color.Danger" Clicked="Remove" Disabled="!IsAuthenticated" Size="Size.Small">
            <Blazorise.Icon Name="FontAwesomeIcons.Star"></Blazorise.Icon> @WEB.Resources.Button.Remove
        </Button>
    }
    else
    {
        <Button Color="Color.Primary" Clicked="Add" Disabled="!IsAuthenticated" Size="Size.Small">
            <Blazorise.Icon Name="FontAwesomeIcons.Star"></Blazorise.Icon> @WEB.Resources.Button.Add
        </Button>
    }
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
        @WEB.Resources.Button.Close
    </Button>
</ModalFooter>

@code {
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public ProviderModel? provider { get; set; }
    [Parameter] public WatchedList? Watched { get; set; }
    [Parameter] public WatchingList? Watching { get; set; }
    [Parameter] public WishList? Wish { get; set; }
    [Parameter] public EventCallback<WatchedList?> WatchedChanged { get; set; }
    [Parameter] public EventCallback<WatchingList?> WatchingChanged { get; set; }
    [Parameter] public EventCallback<WishList?> WishChanged { get; set; }
    [Parameter] public bool ShowPrivateAction { get; set; }
    [Parameter] public string? WatchRegion { get; set; }
    [Parameter] public string? ProviderId { get; set; }

    private string selectedTab = "About";
    private MyProviders? myProviders { get; set; }

    protected override void OnInitialized()
    {
        WatchedListApi.DataChanged += (WatchedList? model) => { Watched = model; WatchedChanged.InvokeAsync(model); StateHasChanged(); };
        WatchingListApi.DataChanged += (WatchingList? model) => { Watching = model; WatchingChanged.InvokeAsync(model); StateHasChanged(); };
        WishListApi.DataChanged += (WishList? model) => { Wish = model; WishChanged.InvokeAsync(model); StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        myProviders = await MyProvidersApi.Get(IsAuthenticated, null);
    }

    private Dictionary<string, string> GetExtraParameters(string? provider_id, string? sort_by, string? watch_region)
    {
        if (provider_id == null) throw new ArgumentNullException(nameof(provider_id));
        if (sort_by == null) throw new ArgumentNullException(nameof(sort_by));
        if (watch_region == null) throw new ArgumentNullException(nameof(watch_region));

        return new Dictionary<string, string>() { { "with_watch_providers", provider_id }, { "sort_by", sort_by }, { "watch_region", watch_region } };
    }

    private async Task Add()
    {
        try
        {
            myProviders ??= new();

            var item = new MyProvidersItem() { id = provider?.id, name = provider?.name, logo = provider?.logo_path, region = AppStateStatic.Region };
            var client = await PrincipalApi.Get(true);
            myProviders = await MyProvidersApi.Add(myProviders, item, client?.ClientePaddle);

            await Toast.Success(GlobalTranslations.OperationCompleted);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove()
    {
        try
        {
            myProviders ??= new();

            myProviders = await MyProvidersApi.Remove(myProviders.Items.First(f => f.id == ProviderId));

            await Toast.Success(GlobalTranslations.OperationCompleted);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}