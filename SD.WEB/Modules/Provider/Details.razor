@page "/providers/{id}"
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Components
@using SD.WEB.Modules.Provider.Core;
@using SD.WEB.Modules.Provider.Resources
@using SD.WEB.Modules.Suggestions.Components
@using SD.WEB.Modules.Suggestions.Core;
<SeoHeader Title="@($"{@SeoTranslations.ProvidersTitle} | {Provider?.name}")" Description="@Provider?.description" Url="@($"/providers/{Provider?.id}")"
           Icon="@(TmdbOptions.OriginalPosterPath + Provider?.logo_path)"></SeoHeader>
@inherits PageCore<Provider.Details>

@inject AllProvidersApi AllProvidersApi
@inject TmdbDiscoveryApi TmdbDiscoveryApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<RenderControl Core="Core" Model="AllProviders" ExpressionEmpty="@((AllProviders? obj)=>obj==null)">
    @if (Provider != null)
    {
        <HeadPage ImageSource="@(TmdbOptions.OriginalPosterPath + Provider.logo_path)" Title="@Provider.name" Text="@Provider.description" Link="@Provider.link"
                  provider="Provider" IsAuthenticated="IsAuthenticated"></HeadPage>
    }

    @if (Settings != null && Settings.ShowAdSense)
    {
        <Div TextAlignment="TextAlignment.Center">
            @if (Navigation.BaseUri.Contains("localhost") || Navigation.BaseUri.Contains("dev"))
            {
                <div class="adsbygoogle google-ads" style="background-color: black;"></div>
            }
            else
            {
                <ins class="adsbygoogle google-ads" data-ad-client="ca-pub-5922021468622891" data-ad-slot="2339718687"></ins>
                <script>
                    (adsbygoogle = window.adsbygoogle || []).push({});
                </script>
            }
        </Div>
    }

    <MediaList TitleHead="@Translations.Popular" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(id, "popularity.desc")"
               ShowFilter="true" Watched="WatchedList" Watching="WatchingList" Wish="WishList" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>
    <MediaList TitleHead="@Translations.Release" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(id, "primary_release_date.desc")"
               ShowFilter="true" Watched="WatchedList" Watching="WatchingList" Wish="WishList" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>
    <MediaList TitleHead="@Translations.TopRated" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(id, "vote_average.desc")"
               ShowFilter="true" Watched="WatchedList" Watching="WatchingList" Wish="WishList" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>
</RenderControl>

@code {
    [Parameter] public string? id { get; set; }

    public RenderControlCore<AllProviders?>? Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }
    public ProviderModel? Provider { get; set; }

    public RenderControlCore<WatchedList?> CoreWatchedList { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatchingList { get; set; } = new();
    public RenderControlCore<WishList?> CoreWishlist { get; set; } = new();

    public Settings? Settings { get; set; }
    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedListApi.DataChanged += (WatchedList? model) => { WatchedList = model; StateHasChanged(); };
        WatchingListApi.DataChanged += (WatchingList? model) => { WatchingList = model; StateHasChanged(); };
        WishListApi.DataChanged += (WishList? model) => { WishList = model; StateHasChanged(); };

        Settings = await CacheSettingsApi.GetSettings();

        AllProviders = await AllProvidersApi.GetAll(Core);

        Provider = AllProviders?.Items.SingleOrDefault(s => s.id == id);
    }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, CoreWatchedList);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, CoreWatchingList);
        WishList = await WishListApi.Get(IsAuthenticated, CoreWishlist);
    }

    private Dictionary<string, string> GetExtraParameters(string? provider_id, string sort_by)
    {
        if (provider_id == null) throw new ArgumentNullException(nameof(provider_id));

        return new Dictionary<string, string>() { { "with_watch_providers", provider_id }, { "sort_by", sort_by } }; ;
    }
}
