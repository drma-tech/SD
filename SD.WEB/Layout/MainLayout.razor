@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SD.WEB.Modules.Auth.Core
@using SD.WEB.Modules.Subscription.Core
@using SD.WEB.Properties
@using Toolbelt.Blazor.PWA.Updater
@inherits LayoutComponentBase

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ILogger<MainLayout> Logger
@inject IJSRuntime JsRuntime

@inject PrincipalApi PrincipalApi
@inject NavigationManager Navigation
@inject IpInfoApi IpInfoApi
@inject IpInfoServerApi IpInfoServerApi

<MudThemeProvider @ref="_mudThemeProvider" IsDarkMode="@_darkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudMessageBox />
<MudSnackbarProvider />

<PWAUpdater Text="@GlobalTranslations.PWAUpdaterText" ButtonCaption="@GlobalTranslations.PWAUpdaterButton" />

<MudLayout>
    <HeadLayout IsAuthenticated="AppStateStatic.IsAuthenticated"></HeadLayout>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-3" Style="min-height: calc(100vh - 64px - 32px);">
            @if (IsLoading)
            {
                <div style="position:fixed; top:0; left:0; width:100vw; height:100vh; display:flex; align-items:center; justify-content:center; background:rgba(255,255,255,0.5);">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" />
                </div>
            }
            else
            {
                @Body
            }
        </MudContainer>
        <FooterComponent></FooterComponent>
        <MudDivider Class="my-3 mt-10"></MudDivider>
        <MudText Align="Align.Center" Class="mb-3">
            © 2021-@DateTime.Now.Year - DRMA Tech.
        </MudText>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    private bool IsLoading = true;
    private MudThemeProvider? _mudThemeProvider;
    private bool _darkMode = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // *************************************
            // attention: avoid using asynchronous calls here, as it may affect static html generation (especially for anonymous users)
            // *************************************

            IsLoading = true; StateHasChanged();

            AppStateStatic.DarkModeChanged += dark => { _darkMode = dark; StateHasChanged(); };
            AppStateStatic.ShowError = msg => { Snackbar.Add(msg, Severity.Error); };
            AppStateStatic.Version = GetAppVersion();

            if (AppStateStatic.User == null)
            {
                var authState = await AuthenticationState;

                AppStateStatic.User = authState.User;
                AppStateStatic.IsAuthenticated = AppStateStatic.User?.Identity is not null && AppStateStatic.User.Identity.IsAuthenticated;
                AppStateStatic.UserId = AppStateStatic.User?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            }

            if (AppStateStatic.IsAuthenticated)
            {
                var principal = await PrincipalApi.Get(true);

                if (principal == null)
                {
                    IsLoading = false; StateHasChanged();
                    Navigation.NavigateTo("/login-success");
                    return;
                }
            }

            IsLoading = false; StateHasChanged();
        }
        catch (AccessTokenNotAvailableException)
        {
            Navigation.NavigateToLogout("/authentication/logout");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
            IsLoading = false; StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            //DARK MODE
            var darkMode = await AppStateStatic.GetDarkMode(JsRuntime);

            if (darkMode == null && _mudThemeProvider != null)
            {
                var system = await _mudThemeProvider.GetSystemDarkModeAsync();
                darkMode = system;

                await JsRuntime.SetLocalStorage("dark-mode", darkMode.ToString()!.ToLower());
            }

            AppStateStatic.ChangeDarkMode(darkMode ?? false);

            //check if user consent to privacy and terms on first access (China only)
            if (!AppStateStatic.IsAuthenticated && !Navigation.Uri.Contains("/support/"))
            {
                var country = await AppStateStatic.GetCountry(IpInfoApi, IpInfoServerApi, JsRuntime);

                if (country.ToUpper() == "CN") //china
                {
                    var consent = await JsRuntime.GetLocalStorage<bool>("consent");

                    if (!consent)
                    {
                        Navigation.NavigateTo("/ask-consent");
                    }
                }
            }

            //open onboarding dialog for new users
            if (!AppStateStatic.IsAuthenticated)
            {
                var onboarding = await JsRuntime.GetLocalStorage("onboarding-popup");
                if (onboarding.Empty())
                {
                    await DialogService.OnboardingPopup();
                    await JsRuntime.SetLocalStorage("onboarding-popup", true.ToString().ToLower());
                }
            }

            //request an app rating on the second day of access
            var accesses = await JsRuntime.GetLocalStorage<HashSet<DateTime>>("accesses") ?? new HashSet<DateTime>();

            if (accesses.Count == 1 && accesses.Single() < DateTime.UtcNow.Date)
            {
                //todo: ask to rate the app
            }

            if (accesses.Count > 5) //clear, to try again
            {
                accesses.Clear();
            }

            accesses.Add(DateTime.UtcNow.Date);
            await JsRuntime.SetLocalStorage("accesses", accesses);
        }
    }

    [JSInvokable]
    public static void RegistrationSuccessful(TempAuthPaddle client)
    {
        AppStateStatic.RegistrationSuccessful?.Invoke(client);
    }

    [JSInvokable]
    public static void ShowError(string error)
    {
        AppStateStatic.ShowError?.Invoke(error);
    }

    [JSInvokable]
    public static string GetAppVersion()
    {
        try
        {
            //https://swharden.com/blog/2020-12-29-blazor-build-info/
            return Resources.BuildDate.ReplaceLineEndings("").Trim();
        }
        catch (Exception)
        {
            return "version-error";
        }
    }

}
