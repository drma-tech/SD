@using SD.WEB.Modules.Auth
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Subscription.Core
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<HeadLayout>

@inject IJSRuntime JsRuntime

@inject PaddleConfigurationApi ConfigurationApi

<Bar Mode="BarMode.Horizontal" Background="Background.Secondary" ThemeContrast="ThemeContrast.Dark" Padding="Padding.Is2">
    <Container Fluid="true" Padding="Padding.Is0.OnX">
        <BarBrand Display="Display.None.Block.OnDesktop" Padding="Padding.Is0" Margin="Margin.Is4.FromEnd">
            <Link To="/" Match="Match.All" Title="@SeoTranslations.AppName" TextDecoration="TextDecoration.None" TextColor="TextColor.White">
                @SeoTranslations.AppName
            </Link>
        </BarBrand>
        <BarMenu Style="flex-basis: unset !important;" Class="d-max-768-block d-min-768-contents">
            <BarStart Style="flex-flow: row;" Display="Display.None.Flex.Row.OnWidescreen">
                <BarItem Margin="Margin.Is2.FromEnd">
                    <BarLink To="/" CustomMatch="@IsHomeActive" Title="@Menu.Home">
                        <BarIcon IconName="FontAwesomeIcons.Home"/> @Menu.Home
                    </BarLink>
                </BarItem>
                <BarItem Margin="Margin.Is2.FromEnd">
                    <BarLink To="/profile" Match="Match.Prefix" Title="@Menu.Profile">
                        <BarIcon IconName="FontAwesomeIcons.UserCircle"/> @Menu.Profile
                    </BarLink>
                </BarItem>
                <BarItem Margin="Margin.Is2.FromEnd">
                    <BarLink To="/providers" Match="Match.Prefix" Title="@Menu.Platforms">
                        <BarIcon IconName="FontAwesomeIcons.PlayCircle"/> @Menu.Platforms
                    </BarLink>
                </BarItem>
                <BarItem Margin="Margin.Is2.FromEnd">
                    <BarLink To="/suggestions" Match="Match.Prefix" Title="@Menu.Collections">
                        <BarIcon IconName="FontAwesomeIcons.LayerGroup"/> @Menu.Collections
                    </BarLink>
                </BarItem>
            </BarStart>
            <Buttons Role="ButtonsRole.Toolbar" Float="Float.End" Size="Size.Small">
                <Button Color="Color.Warning" Clicked="OpenSubscription" Margin="Margin.Is2.FromEnd" Display="Display.Block.None.OnTablet">
                    <Blazorise.Icon Name="FontAwesomeIcons.Gem"></Blazorise.Icon>
                </Button>
                <Button Color="Color.Warning" Clicked="OpenSubscription" Margin="Margin.Is2.FromEnd" Display="Display.None.Block.OnTablet">
                    <Blazorise.Icon Name="FontAwesomeIcons.Gem"></Blazorise.Icon>
                    @Translations.Subscription
                </Button>
                <AuthorizeView>
                    <Authorized>
                        <Button Color="Color.Dark" Clicked="MyAccount" Margin="Margin.Is1.FromEnd">
                            <Blazorise.Icon Name="FontAwesomeIcons.UserCircle"></Blazorise.Icon>
                        </Button>
                    </Authorized>
                </AuthorizeView>
                <Button Color="Color.Dark" Clicked="OpenConfigurations" Margin="Margin.Is1.FromEnd">
                    <Blazorise.Icon Name="FontAwesomeIcons.Globe"/>
                </Button>
                <Button Color="Color.Dark" Clicked="ChangeTheme" Margin="Margin.Is1.FromEnd" Display="Display.None">
                    <Blazorise.Icon Name="@(Theme == "light" ? FontAwesomeIcons.Moon : FontAwesomeIcons.Sun)"/>
                </Button>
                <AuthorizeView>
                    <Authorized>
                        <Button Color="Color.Danger" Clicked="Logout" title="Logout">
                            @Button.Logout
                        </Button>
                    </Authorized>
                    <NotAuthorized>
                        <Button Color="Color.Primary" Type="ButtonType.Link" To="/login-providers" title="Login">
                            @Button.Login
                        </Button>
                    </NotAuthorized>
                </AuthorizeView>
            </Buttons>
        </BarMenu>
    </Container>
</Bar>

@code {
    [SupplyParameterFromQuery] [Parameter] public string? _ptxn { get; set; }
    [Parameter] public bool IsAuthenticated { get; set; }

    public string? Theme { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Theme = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "theme");

            if (Theme.Empty())
            {
                await JsRuntime.InvokeVoidAsync("changeDarkMode");
                Theme = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "theme");
            }
        }
    }

    private void Logout()
    {
        Navigation.NavigateTo("/.auth/logout", true);
    }

    private async Task OpenConfigurations()
    {
        await ModalService.SettingsPopup();
    }

    private async Task ChangeTheme()
    {
        await JsRuntime.InvokeVoidAsync("changeDarkMode");
        Theme = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "theme");
    }

    private async Task MyAccount()
    {
        await ModalService.OpenPopup<ProfilePopup>(x => { x.Add(x => x.IsAuthenticated, IsAuthenticated); }, ModalSize.Large);
    }

    private async Task OpenSubscription()
    {
        if (!string.IsNullOrEmpty(_ptxn))
        {
            var config = await ConfigurationApi.GetConfigurations();
            if (config == null) throw new NotificationException("server comunication error");

            await JsRuntime.InvokeVoidAsync("startPaddle", config.Token);
        }

        await ModalService.SubscriptionPopup(IsAuthenticated);
    }

    private bool IsHomeActive(string currentUri)
    {
        var uri = new Uri(currentUri);
        return string.Equals(uri.AbsolutePath, "/", StringComparison.OrdinalIgnoreCase);
    }

}