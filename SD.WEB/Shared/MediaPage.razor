@page "/media/{type}/{id}"

@using System.Globalization
@using SD.Shared.Models.List
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Collections.Resources
@using Button = SD.WEB.Resources.Button
@inherits PageCore<MediaPopup>

@inject TmdbApi TmdbApi
@inject CacheRatingsApi CacheRatingsApi
@inject ExternalIdApi ExternalIdApi
@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi

@inject IJSRuntime JS

<SeoHeader Title="@Media?.title" Description="@Media?.plot" Url="@($"/media/{type}/{id}")" Keywords="new[] { Media?.title }"></SeoHeader>
<GoogleAdSense Section="@GoogleAdSense.AdUnit.Media" IsAuthenticated="IsAuthenticated"></GoogleAdSense>

<RenderControl Model="Media" Core="Core" ExpressionEmpty="@((MediaDetail? obj) => obj == null)">
    <SectionComponent Title="@Media?.title" FullPage="true">
        <BodyFragment>
            <SectionComponent Title="@Translations.TabAbout" Color="Color.Secondary">
                <BodyFragment>
                    <MediaAbout ImdbId="@ImdbId" TmdbId="@TmdbId" Media="@Media" EnglishTitle="@EnglishTitle" Watched="Watched" Watching="Watching" Wish="Wish" Type="Type"
                                CoreRatings="CoreRatings" RatingsCache="_ratingsCache"></MediaAbout>
                </BodyFragment>
            </SectionComponent>
            <SectionComponent Title="@Translations.TabPlatforms" Color="Color.Secondary">
                <BodyFragment>
                    <MediaStreaming TmdbId="@TmdbId" Type="@Type" ReleaseDate="@Media?.release_date"></MediaStreaming>
                </BodyFragment>
            </SectionComponent>
            <GoogleAdSense Section="@GoogleAdSense.AdUnit.Media2" IsAuthenticated="IsAuthenticated"></GoogleAdSense>
            <SectionComponent Title="Videos" Color="Color.Secondary" Visible="@(Media != null && Media.Videos.Any())">
                <BodyFragment>
                    @foreach (var group in Media?.Videos.GroupBy(g => g.type).Select(s => s.Key) ?? [])
                    {
                        <MudPaper Outlined="true" Class="pa-2 mb-2">
                            <MudText Color="Color.Primary" Typo="Typo.subtitle1">
                                @group
                            </MudText>
                            <MudDivider Class="mb-2"></MudDivider>
                            <MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap">
                                @foreach (var item in Media?.Videos.Where(w => w.type == group) ?? [])
                                {
                                    <div>
                                        <MudIcon Icon="@IconsFA.Brands.Icon("youtube").Font" Color="Color.Primary" Style="vertical-align: top;"></MudIcon>
                                        <MudLink Href="@($"https://www.youtube.com/watch?v={item.key}")" Target="_blank" Color="Color.Secondary">
                                            @item.name
                                        </MudLink>
                                    </div>
                                }
                            </MudStack>
                        </MudPaper>
                    }
                </BodyFragment>
            </SectionComponent>
            <SectionComponent Title="@Translations.TabCredits" Color="Color.Secondary">
                <BodyFragment>
                    <CreditsComponent TmdbId="@TmdbId" Type="@Type" WatchedList="Watched" WatchingList="Watching" WishList="Wish" IsAuthenticated="IsAuthenticated">
                    </CreditsComponent>
                </BodyFragment>
            </SectionComponent>
            <GoogleAdSense Section="@GoogleAdSense.AdUnit.Media2" IsAuthenticated="IsAuthenticated"></GoogleAdSense>
            <SectionComponent Title="@(Media?.MediaType == MediaType.movie ? Translations.TabCollection1 : Translations.TabCollection2)" Color="Color.Secondary" Visible="@(Media?.Collection.Any() ?? false)">
                <BodyFragment>
                    <div class="grid-relative-container-md">
                        @foreach (var item in Media?.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).ToList() ?? [])
                        {
                            <div>
                                <div style="position: relative;">
                                    @if (item.release_date.HasValue)
                                    {
                                        if (item.release_date.Value < DateTime.Now.AddMonths(-3))
                                        {
                                            <MudChip T="string" Color="Color.Info" Size="Size.Medium" Label="true"
                                                     Style="padding: 0.2rem; position: absolute; top: 0; left: 0; white-space: inherit; height: auto; z-index: 1;">
                                                @item.release_date.Value.Year
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Color="Color.Info" Size="Size.Medium" Label="true"
                                                     Style="padding: 0.2rem; position: absolute; top: 0; left: 0; white-space: inherit; height: auto; z-index: 1;">
                                                @item.release_date.Value.ToShortDateString()
                                            </MudChip>
                                        }
                                    }
                                    @{
                                        if (Type == MediaType.movie) //you don't put seasons as wishes
                                        {
                                            var wishedMovie = Wish?.Contains(MediaType.movie, item.id) ?? false;
                                            if (wishedMovie)
                                            {
                                                <MudIcon Icon="@IconsFA.Solid.Icon("bookmark").Font" Color="Color.Info" Class="absolute" Style="bottom: 6px; left: 5px; z-index: 1;"></MudIcon>
                                            }
                                        }

                                        var movieWatched = Watched?.Contains(MediaType.movie, item.id) ?? false;
                                        var showWatched = Watching?.GetWatchingItems(MediaType.tv, Media?.tmdb_id).Any(a => a == item.id) ?? false;
                                        if (movieWatched || showWatched)
                                        {
                                            <MudIcon Icon="@IconsFA.Solid.Icon("eye").Font" Color="Color.Info" Class="absolute" Style="bottom: 6px; right: 5px; z-index: 1;"></MudIcon>
                                        }

                                        <MudImage Src="@(item.poster_small ?? "images/no-image.png")" Alt="@item.title" FallbackSrc="images/no-image.png" Fluid="true" ObjectFit="ObjectFit.Contain"></MudImage>
                                    }
                                </div>
                                <MudText Align="Align.Center">@item.title</MudText>
                            </div>
                        }
                    </div>
                </BodyFragment>
            </SectionComponent>
            <SectionComponent Title="Reviews" Color="Color.Secondary">
                <BodyFragment>
                    @if (ImdbId.NotEmpty())
                    {
                        <ReviewComponent ImdbId="@ImdbId" EnglishTitle="@EnglishTitle?.RemoveSpecialCharacters().RemoveDiacritics().Replace(" ", "-").ToLower()"
                                         Type="@Type" ReleaseDate="@Media?.release_date">
                        </ReviewComponent>
                    }
                </BodyFragment>
            </SectionComponent>
        </BodyFragment>
    </SectionComponent>

</RenderControl>

<div style="position: fixed; bottom: 16px; right: 16px; display: flex; z-index: 1000;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" Size="Size.Medium" OnClick="@(() => JS.InvokeVoidAsync("history.back"))" />
</div>

@code {
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    [Parameter] public string? id { get; set; }
    [Parameter] public string? type { get; set; }

    public string? TmdbId => id;
    public MediaType? Type => type?.ToLower() switch
    {
        "movie" => MediaType.movie,
        "tv" => MediaType.tv,
        _ => null
    };

    public RenderControlCore<MediaDetail?>? Core { get; set; } = new();
    private MediaDetail? Media { get; set; }
    public string? ImdbId { get; set; }
    public string? EnglishTitle { get; set; }

    private RenderControlCore<CacheDocument<Ratings>?> CoreRatings { get; set; } = new();
    private CacheDocument<Ratings>? _ratingsCache;

    protected override async Task LoadEssentialDataAsync()
    {
        Core?.LoadingStarted?.Invoke();
        Media = await TmdbApi.GetMediaDetail(TmdbId, Type!.Value);
        Media.Videos.Reverse();

        Core?.LoadingFinished?.Invoke(Media);

        EnglishTitle = Media?.original_title;

        if (Media != null && Media.original_language != "en")
        {
            //title must be in English
            var enMedia = await TmdbApi.GetMediaDetail(TmdbId, Type!.Value, "en-US");
            EnglishTitle = enMedia.title;
        }

        EnglishTitle = EnglishTitle?.Replace("&", "");

        StateHasChanged();

        ImdbId = await ExternalIdApi.GetImdbId(Type, TmdbId);

        if (Media?.MediaType == MediaType.movie)
        {
            _ratingsCache = await CacheRatingsApi.GetMovieRatings(ImdbId, Media?.tmdb_id, EnglishTitle, Media?.release_date, Media?.rating.ToString("#.#"), CoreRatings);
        }
        else
        {
            _ratingsCache = await CacheRatingsApi.GetShowRatings(ImdbId, Media?.tmdb_id, EnglishTitle, Media?.release_date, Media?.rating.ToString("#.#"), CoreRatings);
        }
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, null), WatchingApi.Get(IsAuthenticated, null), WishApi.Get(IsAuthenticated, null));
    }

}