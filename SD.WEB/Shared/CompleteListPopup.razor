@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Collections.Interface
@using SD.WEB.Modules.Profile.Core
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<CompleteListPopup>

@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<MudDialog Style="width: 100%">
    <DialogContent>
        <MediaListFull Items="Items" ItemsChanged="@((HashSet<MediaDetail> list) => { Items = list; ItemsChanged.InvokeAsync(list); StateHasChanged(); })"
                       IsImdb="IsImdb" MediaListApi="MediaListApi" TypeSelected="TypeSelected"
                       StringParameters="StringParameters" List="List" TitleHead="@TitleHead" ShowHead="false" FullPage="true" Popup="true"
                       Watched="Watched" Watching="Watching" Wish="Wish" IsAuthenticated="IsAuthenticated" CommentsIsImage="CommentsIsImage">
        </MediaListFull>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@HideModal">
            @Button.Close
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter][EditorRequired] public string? TitleHead { get; set; }
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }
    [Parameter] public EventCallback<WatchedList?> WatchedChanged { get; set; }
    [Parameter] public EventCallback<WatchingList?> WatchingChanged { get; set; }
    [Parameter] public EventCallback<WishList?> WishChanged { get; set; }

    [Parameter] public HashSet<MediaDetail> Items { get; set; } = [];
    [Parameter] public EventCallback<HashSet<MediaDetail>> ItemsChanged { get; set; }

    [Parameter] public IMediaListApi? MediaListApi { get; set; }
    [Parameter] public EnumLists? List { get; set; }
    [Parameter] public bool IsImdb { get; set; }
    [Parameter] public MediaType? TypeSelected { get; set; }
    [Parameter] public Dictionary<string, string> StringParameters { get; set; } = new();
    [Parameter] public bool CommentsIsImage { get; set; }

    protected override void OnInitialized()
    {
        if (List == null && string.IsNullOrEmpty(TitleHead)) throw new ArgumentNullException(nameof(TitleHead));

        WatchedListApi.DataChanged += model =>
        {
            Watched = model;
            WatchedChanged.InvokeAsync(model);
            StateHasChanged();
        };
        WatchingListApi.DataChanged += model =>
        {
            Watching = model;
            WatchingChanged.InvokeAsync(model);
            StateHasChanged();
        };
        WishListApi.DataChanged += model =>
        {
            Wish = model;
            WishChanged.InvokeAsync(model);
            StateHasChanged();
        };
    }

    public void HideModal()
    {
        MudDialog?.Close();
    }

}