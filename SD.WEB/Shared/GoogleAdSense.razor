@using SD.WEB.Modules.Subscription.Core
@inherits ComponentCore<GoogleAdSense>

@inject IpInfoApi IpInfoApi
@inject IJSRuntime JS

@if (IsLocalhost)
{
    <div style="text-align: center;">
        <ins class="@($"adsbygoogle custom-ad mb-3 {((IsMobile ? " mobile " : ""))}")" data-ad-status="unfilled"
             style="@($"display: block; min-width: 300px; min-height: {(IsMobile || Format == "horizontal" ? "100" : "280")}px; text-align: center; border-width: 1px; border-radius: 4px; border-color: var(--mud-palette-lines-inputs); background-color: white;")">
            <div></div>
        </ins>
    </div>
}
else if (!IsPaidUser)
{
    <div id="@_containerId" @key="@_containerId" style="text-align: center;"></div>
}

@code {
    [Parameter][EditorRequired] public AdUnit Section { get; set; } = AdUnit.Index;
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }
    [Parameter] public string? Format { get; set; }

    private bool IsMobile => AppStateStatic.BrowserWindowSize?.Width <= 600 || AppStateStatic.BrowserWindowSize?.Height <= 600;
    private string? AdFormat => Format ?? (IsMobile ? "horizontal" : "auto");
    private bool IsLocalhost => Navigation.BaseUri.Contains("localhost");
    private bool IsPaidUser => Principal?.AuthPaddle is { IsPaidUser: true };

    private AuthPrincipal? Principal { get; set; }

    private const string AdClientId = "5145928155833172";
    private readonly string _containerId = $"ad-container-{Guid.NewGuid()}";

    private readonly Dictionary<string, string> _BlockedCountries = new()
    {
        { "CU", "Cuba" },
        { "IR", "Iran" },
        { "KP", "North Korea" },
        { "CN", "China (Mainland)" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            Principal = await PrincipalApi.Get(IsAuthenticated);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsLocalhost && !IsPaidUser)
        {
            var country = await AppStateStatic.GetCountry(IpInfoApi, JS);

            if (country == "CN")
            {
                //todo: implement https://www.baiduadvertising.com/
            }
            else if (_BlockedCountries.ContainsKey(country))
            {
                //do not show ads
            }
            else
            {
                if (IsMobile)
                    await JS.InvokeVoidAsync("createAd", $"ca-pub-{AdClientId}", ((long)Section).ToString(), null, _containerId);
                else
                    await JS.InvokeVoidAsync("createAd", $"ca-pub-{AdClientId}", ((long)Section).ToString(), AdFormat, _containerId);
            }
        }
    }

    public enum AdUnit : long
    {
        Index = 4046112630,
        Profile = 4650130753,
        Platforms = 5359194302,
        Collections = 1353899488,
        Search = 8540150517,
        Media = 8348578821,
        Media2 = 6804406755,
        Media3 = 6612835066
    }
}
