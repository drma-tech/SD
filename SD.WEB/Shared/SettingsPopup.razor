@using SD.WEB.Modules.Shared

@inherits ComponentCore<SettingsPopup>

@inject IJSRuntime JsRuntime

<MudDialog Style="width: 100%">
    <DialogContent>
        <Country TEnum="Region" TValue="Region" For="@(() => AppStateStatic.Region)" SelectedValue="@AppStateStatic.Region" SelectedValueChanged="RegionValueChanged">
        </Country>
        <Language TEnum="Language" TValue="Language" For="@(() => AppStateStatic.Language)" SelectedValue="@AppStateStatic.Language" SelectedValueChanged="LanguageValueChanged">
        </Language>
        <MudToggleIconButton Toggled="@AppStateStatic.DarkMode" ToggledChanged="DarkModeChanged"
                             Icon="@IconsFA.Solid.Icon("moon").Font" ToggledIcon="@IconsFA.Solid.Icon("sun").Font" />
        <span>@(AppStateStatic.DarkMode ? "Light" : "Dark") Mode</span>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    protected override async Task LoadDataRender()
    {
        var language = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "language");

        if (language.NotEmpty())
        {
            AppStateStatic.ChangeLanguage((Language)Enum.Parse(typeof(Language), language.Replace("-", "")));
        }
    }

    protected async Task RegionValueChanged(Region value)
    {
        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "region", value.GetName(false));

        AppStateStatic.ChangeRegion(value);
    }

    protected async Task LanguageValueChanged(Language value)
    {
        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "language", value.GetName(false));
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("language", value.GetName(false)), true);
    }

    protected async Task DarkModeChanged(bool value)
    {
        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "dark-mode", value.ToString());

        AppStateStatic.ChangeDarkMode(value);
    }

}