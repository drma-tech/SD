@using SD.WEB.Modules.Subscription.Core
@inherits ComponentCore<SettingsPopup>

@inject IpInfoApi IpInfoApi

<MudDialog Style="width: 100%">
    <DialogContent>
        <MudGrid Class="mb-6">
            <MudItem xs="12">
                <MudSelect Value="@Region" ValueChanged="@((Region vl) => RegionValueChanged(vl))" Label="@GlobalTranslations.Region"
                           HelperText="@GlobalTranslations.RegionDesc" FullWidth="true">
                    @foreach (var item in regions.OrderBy(p => p.GetName()))
                    {
                        <MudSelectItem Value="@item">@item.GetName()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudSelect Value="@Language" ValueChanged="@((AppLanguage vl) => AppLanguageValueChanged(vl))" Label="@GlobalTranslations.AppLanguage"
                           HelperText="@GlobalTranslations.AppLanguageDesc" FullWidth="true">
                    @foreach (var item in appLanguages.OrderBy(p => p.GetName()))
                    {
                        <MudSelectItem Value="@item">@item.GetName()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudSelect Value="@ContentLanguage" ValueChanged="@((ContentLanguage vl) => ContentLanguageValueChanged(vl))" Label="@GlobalTranslations.ContentLanguage"
                           HelperText="@GlobalTranslations.ContentLanguageDesc" FullWidth="true">
                    @foreach (var item in contentLanguages.OrderBy(p => p.GetName()))
                    {
                        <MudSelectItem Value="@item">@item.GetName()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudToggleGroup Value="DarkMode" ValueChanged="(bool vl) => DarkModeChanged(vl)" SelectionMode="SelectionMode.SingleSelection" Vertical="false"
                                Color="Color.Primary" Size="AppStateStatic.Size">
                    <MudToggleItem Value="false">
                        <MudIcon Icon="@IconsFA.Solid.Icon("sun").Font" Title="@GlobalTranslations.LightMode" Class="me-1"></MudIcon>
                        @GlobalTranslations.LightMode
                    </MudToggleItem>
                    <MudToggleItem Value="true">
                        <MudIcon Icon="@IconsFA.Solid.Icon("moon").Font" Title="@GlobalTranslations.DarkMode" Class="me-1"></MudIcon>
                        @GlobalTranslations.DarkMode
                    </MudToggleItem>
                </MudToggleGroup>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(async () => { await JavascriptVoidAsync("showCache"); })" Size="AppStateStatic.Size">Show Cache</MudButton>
        <MudButton OnClick="@(async () => { await JavascriptVoidAsync("clearLocalStorage"); Navigation.NavigateTo("/", true); })" Size="AppStateStatic.Size">@Button.Clear</MudButton>
        <MudSpacer></MudSpacer>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })" Size="AppStateStatic.Size">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    private readonly Region[] regions = Enum.GetValues<Region>();
    private readonly AppLanguage[] appLanguages = Enum.GetValues<AppLanguage>();
    private readonly ContentLanguage[] contentLanguages = Enum.GetValues<ContentLanguage>();

    public AppLanguage Language { get; set; } = AppLanguage.en;
    public Region Region { get; set; } = Region.US;
    public ContentLanguage ContentLanguage { get; set; } = ContentLanguage.enUS;
    public bool DarkMode { get; set; } = false;

    protected override async Task LoadEssentialDataAsync()
    {
        Language = await AppStateStatic.GetAppLanguage(JsRuntime);
        Region = await AppStateStatic.GetRegion(IpInfoApi, JsRuntime);
        ContentLanguage = await AppStateStatic.GetContentLanguage(JsRuntime);
        DarkMode = await AppStateStatic.GetDarkMode(JsRuntime) ?? false;
    }

    protected async Task AppLanguageValueChanged(AppLanguage value)
    {
        Language = value;

        await SetLocalStorage("app-language", value.ToString()!.ToLower());

        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("app-language", value.ToString()?.ToLower()), true);
    }

    protected async Task RegionValueChanged(Region value)
    {
        Region = value;

        await SetLocalStorage("region", value.GetName(false)!.ToLower());

        AppStateStatic.ChangeRegion(value);
    }

    protected async Task ContentLanguageValueChanged(ContentLanguage value)
    {
        ContentLanguage = value;

        await SetLocalStorage("content-language", value.ToString()!.ToLower());

        AppStateStatic.ChangeContentLanguage(value);
    }

    protected async Task DarkModeChanged(bool value)
    {
        DarkMode = value;

        await SetLocalStorage("dark-mode", value.ToString()!.ToLower());

        AppStateStatic.ChangeDarkMode(value);
    }

}