@using SD.WEB.Modules.Profile
@using Button = Button
@using SD.WEB.Modules.Shared
@inherits ComponentCore<SettingsPopup>

@inject IJSRuntime JsRuntime

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@GlobalTranslations.Settings</ModalTitle>
    <CloseButton/>
</ModalHeader>
<ModalBody MaxHeight="70">
    <Country TValue="Region" TEnum="Region" For="@(() => AppStateStatic.Region)" SelectedValue="@AppStateStatic.Region"
             SelectedValueChanged="RegionValueChanged" LabelSize="LabelSize.Short">
    </Country>
    <Language TValue="Language" TEnum="Language" For="@(() => AppStateStatic.Language)" SelectedValue="@AppStateStatic.Language"
              SelectedValueChanged="LanguageValueChanged" LabelSize="LabelSize.Short">
    </Language>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@(() => { ModalService.Hide(); })" Size="Size.Small">
        @Button.Close
    </Button>
</ModalFooter>

@code {

    protected override async Task LoadDataRender()
    {
        var language = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "language");

        if (language.NotEmpty())
        {
            AppStateStatic.ChangeLanguage((Language)Enum.Parse(typeof(Language), language.Replace("-", "")));
        }
    }

    protected async Task RegionValueChanged(Region value)
    {
        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "region", value.GetName(false));

        AppStateStatic.ChangeRegion(value);
    }

    protected async Task LanguageValueChanged(Language value)
    {
        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "language", value.GetName(false));
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("language", value.GetName(false)), true);
    }

}