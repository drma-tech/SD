@inherits ComponentCore<MediaList>

@inject ExternalIdApi ExternalIdApi
@inject TmdbCreditApi TmdbCreditApi
@using SD.Shared.Models.List.Tmdb
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Collections.Interface
@inject IJSRuntime JsRuntime

<PageSection Title="@Title" Icon="@Icon" Image="@Image" ShowHead="ShowHead">
    <ActionFragment>
        @if (ShowFilter)
        {
            <MudToggleGroup SelectionMode="SelectionMode.SingleSelection" Vertical="false" Value="TypeSelected" CheckMark="@(Breakpoint >= Breakpoint.Sm)" CheckMarkClass="mx-0"
                            ValueChanged="@(async (MediaType type) => await TypeSelectedChangedHandle(type))" Color="Color.Primary" Class="me-2" Size="Size.Small">
                <MudToggleItem Value="@MediaType.movie" SelectedIcon="@IconsFA.Solid.Icon("check").Font">
                    <MudHidden Breakpoint="Breakpoint.SmAndUp">
                        <MudIcon Icon="@IconsFA.Solid.Icon("film").Font" Title="@MediaType.movie.GetName()"></MudIcon>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                        <MudText Inline="true">@MediaType.movie.GetName()</MudText>
                    </MudHidden>
                </MudToggleItem>
                <MudToggleItem Value="@MediaType.tv" SelectedIcon="@IconsFA.Solid.Icon("check").Font">
                    <MudHidden Breakpoint="Breakpoint.SmAndUp">
                        <MudIcon Icon="@IconsFA.Solid.Icon("tv").Font" Title="@MediaType.movie.GetName()"></MudIcon>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                        <MudText Inline="true">@MediaType.tv.GetName()</MudText>
                    </MudHidden>
                </MudToggleItem>
            </MudToggleGroup>
        }
        <MudIconButton Icon="@IconsFA.Solid.Icon("expand").Font" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                       OnClick="@(()=>Navigation.NavigateTo(GetCustomExpandUrl()))" Disabled="@(List == null && CustomExpand.Empty())" />
    </ActionFragment>
    <BodyFragment>
        <RenderControl Core="Core" Model="Items" ExpressionEmpty="@((HashSet<MediaDetail> list) => list.Empty())">
            <div id="@_swiperId" class="swiper">
                <div class="swiper-wrapper">
                    @foreach (var item in Items)
                    {
                        <div class="swiper-slide" style="height: auto !important;">
                            <PosterComponent Poster="@item.poster_small" Title="@item.title" Clicked="@(() => OpenPopupMedia(item))" MediaType="@item.MediaType"
                                             Date="@item.release_date" OnlyYear="OnlyYear" ForceTypoTitle="ForceTypoTitle" RankUpDown="@item.RankUpDown"
                                             Rating="@item.rating" WishList="Wish" WatchedList="Watched" TmdbId="@item.tmdb_id" Comments="@item.comments" CommentsIsImage="CommentsIsImage">
                            </PosterComponent>
                        </div>
                    }
                </div>
                <div class="swiper-button-next"></div>
                <div class="swiper-button-prev"></div>
            </div>
        </RenderControl>
    </BodyFragment>
</PageSection>

@code {
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public bool ShowHead { get; set; } = true;
    [Parameter] public string? TitleHead { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Image { get; set; }
    [Parameter] public bool ShowFilter { get; set; }
    [Parameter] public bool OnlyYear { get; set; }
    [Parameter] public bool OrderByComments { get; set; }
    [Parameter] public bool CommentsIsImage { get; set; }
    [Parameter] public bool Popup { get; set; } = false;
    [Parameter] public string? CustomExpand { get; set; }
    [Parameter] public Typo? ForceTypoTitle { get; set; }

    [Parameter] public IMediaListApi? MediaListApi { get; set; }
    [Parameter] public EnumLists? List { get; set; }
    [Parameter] public Dictionary<string, string> StringParameters { get; set; } = new();
    [Parameter] public bool IsImdb { get; set; }

    [Parameter] public bool DetectRegions { get; set; }

    [Parameter] public MediaType TypeSelected { get; set; } = MediaType.movie;
    [Parameter] public EventCallback<MediaType> TypeSelectedChanged { get; set; }

    private string Title => TitleHead ?? List?.GetName() ?? "Title Error";

    public RenderControlCore<HashSet<MediaDetail>>? Core { get; set; } = new();
    public HashSet<MediaDetail> Items { get; set; } = [];

    private readonly string _swiperId = $"swiper-{Guid.NewGuid()}";

    protected override void OnInitialized()
    {
        try
        {
            if (MediaListApi == null) throw new ArgumentNullException(nameof(MediaListApi));
            if (ShowHead && List == null && string.IsNullOrEmpty(TitleHead)) throw new ArgumentNullException(nameof(TitleHead));

            if (DetectRegions) AppStateStatic.RegionChanged += region => LoadGenericVoid();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            await JsRuntime.InvokeVoidAsync("initSwiper", _swiperId);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected override async Task LoadEssentialDataAsync()
    {
        Core?.ShowLoading();
        await LoadItems();
        Core?.HideLoading(Items);
    }

    protected async void LoadGenericVoid()
    {
        Core?.ShowLoading();
        await LoadItems();
        Core?.HideLoading(Items);
    }

    private async Task TypeSelectedChangedHandle(MediaType type)
    {
        Core?.ShowLoading();
        TypeSelected = type;
        await TypeSelectedChanged.InvokeAsync(type);
        await LoadItems();
        Core?.HideLoading(Items);
    }

    private async Task LoadItems()
    {
        try
        {
            if (MediaListApi != null)
            {
                var result = await MediaListApi.GetList([], TypeSelected, StringParameters, List);
                Items = result.list;

                if (Items.Count < 10) //force reload, if the filters bring few records
                {
                    var result2 = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, 2);
                    foreach (var item in result2.list)
                    {
                        Items.Add(item);
                    }
                }

                if (OrderByComments) Items = Items.OrderByDescending(o => int.Parse(o.comments?.Split(",").Last() ?? "0")).ToHashSet();
            }
        }
        catch (Exception ex)
        {
            Core?.ShowError(ex.Message);
        }
    }

    private string GetCustomExpandUrl()
    {
        if (List != null)
        {
            return $"/list/{(int)List}";
        }
        else if (!string.IsNullOrEmpty(CustomExpand))
        {
            return string.Format(CustomExpand, TypeSelected);
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task OpenPopupMedia(MediaDetail? media)
    {
        try
        {
            string? tmdbId;

            if (IsImdb)
            {
                //for now, only tv series (imdb) need this kind of workaround (tmdb api only work with imdb id from movies - this info is not documented)
                tmdbId = await ExternalIdApi.GetTmdbId(media?.MediaType, media?.tmdb_id);
            }
            else
            {
                tmdbId = media?.tmdb_id;
            }

            if (tmdbId.Empty())
            {
                Snackbar.Add("Unable to display this content. Please try again later.", Severity.Error);
                return;
            }

            if (media?.MediaType == MediaType.person)
            {
                var result = await TmdbCreditApi.GetListByPerson(tmdbId);
                var items = new HashSet<MediaDetail>();

                foreach (var item in result?.crew ?? Enumerable.Empty<CrewByPerson>())
                {
                    var type = item.media_type == "tv" ? MediaType.tv : MediaType.movie;
                    items.Add(new MediaDetail
                    {
                        tmdb_id = item.id.ToString(),
                        title = type == MediaType.movie ? item.title : item.name,
                        plot = string.IsNullOrEmpty(item.overview) ? "No plot found" : item.overview,
                        release_date = type == MediaType.movie ? item.release_date?.GetDate() : item.first_air_date?.GetDate(),
                        poster_small = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.SmallPosterPath + item.poster_path,
                        poster_large = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.LargePosterPath + item.poster_path,
                        rating = item.vote_count > 10 ? item.vote_average ?? 0 : 0,
                        MediaType = type
                    });
                }

                foreach (var item in result?.cast ?? [])
                {
                    var type = item.media_type == "tv" ? MediaType.tv : MediaType.movie;

                    if (type == MediaType.movie && item.order > 24) continue;
                    if (type == MediaType.tv && item.episode_count < 3) continue;

                    items.Add(new MediaDetail
                    {
                        tmdb_id = item.id.ToString(),
                        title = type == MediaType.movie ? item.title : item.name,
                        plot = string.IsNullOrEmpty(item.overview) ? "No plot found" : item.overview,
                        release_date = type == MediaType.movie ? item.release_date?.GetDate() : item.first_air_date?.GetDate(),
                        poster_small = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.SmallPosterPath + item.poster_path,
                        poster_large = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.LargePosterPath + item.poster_path,
                        rating = item.vote_count > 10 ? item.vote_average ?? 0 : 0,
                        MediaType = type,
                        comments = type == MediaType.tv ? $"{item.episode_count} episodes" : ""
                    });
                }

                await DialogService.CompleteListPopup($"{media.title}", Watched, Watching, Wish, items.OrderByDescending(o => o.release_date).ToHashSet(), IsAuthenticated);
            }
            else
            {
                if (Popup)
                {
                    await DialogService.MediaPopup(Watched, Watching, Wish, media?.MediaType, tmdbId, IsAuthenticated);
                }
                else
                {
                    Navigation.NavigateTo($"/media/{media?.MediaType.ToString().ToLower()}/{tmdbId}");
                }
            }
        }
        catch (Exception ex)
        {
            Core?.ShowError(ex.Message);
        }
    }

}