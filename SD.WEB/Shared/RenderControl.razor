@using SD.WEB.Modules.Auth.Core
@using SD.WEB.Modules.Auth.Resources
@inject PrincipalApi PrincipalApi

@typeparam TModel where TModel : class

@if (Status == LoadingStatus.Loading)
{
    if (PartialComponent)
    {
        <Blazorise.Text TextColor="TextColor.Secondary">
            <Blazorise.Icon Class="spinner-border spinner-border-sm"></Blazorise.Icon> @MessageLoading
        </Blazorise.Text>
    }
    else
    {
        <Alert Color="Color.Warning" Visible="true">
            <AlertMessage>
                <Blazorise.Icon Class="spinner-border spinner-border-sm"></Blazorise.Icon> @MessageLoading
            </AlertMessage>
        </Alert>
    }
}
else if (Status == LoadingStatus.Locked && !PartialComponent)
{
    <Alert Color="Color.Primary" Visible="true" Class="@ClassAnimationShake">
        <AlertMessage>
            <Blazorise.Icon Name="FontAwesomeIcons.UserLock"></Blazorise.Icon> @Translations.UnauthenticatedUser
        </AlertMessage>
    </Alert>
}
else if (Status == LoadingStatus.Premium && !PartialComponent)
{
    <Alert Color="Color.Primary" Visible="true">
        <AlertMessage>
            <Blazorise.Icon Name="FontAwesomeIcons.Gem"></Blazorise.Icon> @GlobalTranslations.PremiumFeature
        </AlertMessage>
        @if (!string.IsNullOrEmpty(PremiumDescription))
        {
            <Span Margin="Margin.Is2.FromStart">
                <AlertDescription>
                    @PremiumDescription
                </AlertDescription>
            </Span>
        }
    </Alert>
}
else if (Status == LoadingStatus.Error && !PartialComponent)
{
    <Alert Color="Color.Danger" Visible="true">
        <AlertMessage>
            <Blazorise.Icon Name="FontAwesomeIcons.Bug"></Blazorise.Icon> @(MessageError ?? GlobalTranslations.CustomVisibilityInvalid)
        </AlertMessage>
    </Alert>
}
else if (Status == LoadingStatus.Warning && !PartialComponent)
{
    <Alert Color="Color.Primary" Visible="true" Class="@ClassAnimationShake">
        <AlertMessage>
            <Blazorise.Icon Name="FontAwesomeIcons.ExclamationTriangle"></Blazorise.Icon> @(MessageWarning ?? GlobalTranslations.CustomVisibilityNoData)
        </AlertMessage>
    </Alert>
}
else //ShowContent
{
    @ChildContent
}

@code {
    [CascadingParameter] protected Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter][EditorRequired] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter][EditorRequired] public RenderControlCore<TModel> Core { get; set; } = default!;
    [Parameter][EditorRequired] public TModel Model { get; set; } = default!;
    [Parameter][EditorRequired] public Func<TModel, bool> ExpressionEmpty { get; set; } = default!;

    [Parameter] public bool PrivateContent { get; set; } = false;
    [Parameter] public string? CustomMessageError { get; set; } = null;
    [Parameter] public string? CustomMessageWarning { get; set; } = null;
    [Parameter] public bool PartialComponent { get; set; } = false;
    [Parameter] public bool PremiumFeature { get; set; } = false;
    [Parameter] public string? PremiumDescription { get; set; }

    [Parameter] public string? ClassAnimationShake { get; set; }

    public LoadingStatus Status { get; set; } = LoadingStatus.Loading;
    private string? MessageLoading { get; set; } = GlobalTranslations.CustomVisibilityLoading;
    private string? MessageError { get; set; } = null;
    private string? MessageWarning { get; set; } = null;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ChildContent);
        ArgumentNullException.ThrowIfNull(Core);
        ArgumentNullException.ThrowIfNull(ExpressionEmpty);

        if (Model != null && (ExpressionEmpty != null && !ExpressionEmpty(Model)))
            Status = LoadingStatus.ShowContent;

        Core.LoadingStarted += () => ShowLoading();
        Core.ProcessingStarted += () => ShowLoading("Processing...");

        Core.LoadingFinished += (TModel? model) => ShowContent(model);
        Core.ProcessingFinished += (TModel? model) => ShowContent(model);

        Core.WarningAction += (string? msg) => ShowWarning(msg);
        Core.ErrorAction += (string? msg) => ShowError(msg);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ArgumentNullException.ThrowIfNull(Core);

        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && PrivateContent && authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;
            var isAuthenticated = user?.Identity is not null && user.Identity.IsAuthenticated;

            if (!isAuthenticated)
            {
                Status = LoadingStatus.Locked;
            }

            if (PremiumFeature)
            {
                var client = await PrincipalApi.Get(isAuthenticated);
                if (client == null || client?.ClientePaddle == null || client?.ClientePaddle?.ActiveProduct == AccountProduct.Basic)
                {
                    Status = LoadingStatus.Premium;
                }
            }
        }
    }

    private void Reset()
    {
        MessageError = null;
        MessageWarning = null;

        StateHasChanged();
    }

    private void ShowLoading(string? msg = null)
    {
        Reset();

        if (Status == LoadingStatus.Error || Status == LoadingStatus.Locked || Status == LoadingStatus.Premium) return;

        Status = LoadingStatus.Loading;
        MessageLoading = msg ?? GlobalTranslations.CustomVisibilityLoading;

        StateHasChanged();
    }

    private void ShowContent(TModel? model)
    {
        Reset();

        if (PartialComponent)
        {
            Status = LoadingStatus.ShowContent;
            StateHasChanged();
            return;
        }

        if (Status == LoadingStatus.Error || Status == LoadingStatus.Locked || Status == LoadingStatus.Premium) return;

        if (model == null || (ExpressionEmpty != null && ExpressionEmpty(model)))
            Status = LoadingStatus.Warning;
        else
            Status = LoadingStatus.ShowContent;

        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="msg">Default: no data</param>
    private void ShowWarning(string? msg)
    {
        Reset();

        if (Status == LoadingStatus.Error || Status == LoadingStatus.Locked || Status == LoadingStatus.Premium) return;

        Status = LoadingStatus.Warning;
        MessageWarning = CustomMessageWarning ?? msg;

        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="msg">Default: invalid operation</param>
    private void ShowError(string? msg)
    {
        Reset();

        Status = LoadingStatus.Error;
        MessageError = CustomMessageError ?? msg;

        StateHasChanged();
    }
}