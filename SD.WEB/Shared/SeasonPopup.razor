@using SD.Shared.Models.List.Tmdb
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Collections.Resources
@using Button = SD.WEB.Resources.Button
@inherits ComponentCore<SeasonPopup>
@inject TmdbApi TmdbApi

<MudDialog Style="width: 100%">
    <DialogContent>
        <RenderControl Core="Core" Model="Season" ExpressionEmpty="@((TmdbSeason? obj) => obj == null || obj.episodes.Empty())">
            <MudList T="string">
                @foreach (var item in Season?.episodes ?? [])
                {
                    <MudListItem Class="px-2 py-1">
                        <div style="display: flex; gap: 8px;">
                            <MudImage Src="@(TmdbOptions.SmallPosterPath + item.still_path)" FallbackSrc="images/no-image.png" Alt="@item.name"
                                      style="max-width: 185px; max-height: 110px;"></MudImage>
                            <div>
                                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                                    @(item.episode_number + " - " + item.name)
                                </MudText>
                                <MudText Typo="Typo.body1" Align="Align.Justify" Style="line-height: normal;">
                                    @(item.overview.Empty() ? GlobalTranslations.CustomVisibilityNoData : item.overview)
                                </MudText>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </RenderControl>
    </DialogContent>
    <DialogActions>
        <MudAlert Severity="Severity.Info" Variant="Variant.Text" Dense="true">
            @Translations.PlatformForManaging
        </MudAlert>
        <MudSpacer></MudSpacer>
        <MudButton OnClick="@HideModal">
            @Button.Close
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public string? TmdbId { get; set; }
    [Parameter] public int? SeasonNumber { get; set; }

    public RenderControlCore<TmdbSeason?>? Core { get; set; } = new();
    public TmdbSeason? Season { get; set; }

    protected override async Task LoadDataRender()
    {
        var parameters = new Dictionary<string, string>
        {
            { "api_key", TmdbOptions.ApiKey },
            { "language", AppStateStatic.Language.GetName(false) ?? "en-US" }
        };

        Core?.LoadingStarted?.Invoke();
        Season = await TmdbApi.GetSeason(TmdbId, SeasonNumber, parameters);
        Core?.LoadingFinished?.Invoke(Season);
    }

    public void HideModal()
    {
        MudDialog?.Close();
    }

}