@inherits ComponentCore<PageSection>

@if (Visible)
{
    if (ShowHead)
    {
        <MudPaper Class="@PaperClass" Style="background-color: transparent;" Outlined="true" Elevation="0">
            <MudToolBar WrapContent="true" Dense="true" Gutters="false" Style="min-height: auto;">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <MudIcon Icon="@Icon" Class="me-2" Color="Color" Style="@($"font-size: {imageSize} !important; width: auto;")"></MudIcon>
                }
                else if (!string.IsNullOrEmpty(Image))
                {
                    <MudImage Src="@Image" Class="me-2" Style="@GetImageStyle()" Alt="@Image"></MudImage>
                }
                <div>
                    <MudText Typo="Typo.h2" Color="Color" Style="@($"font-size: {titleFontSize}; line-height: 1.2;")">
                        @Title
                    </MudText>
                    @if (Subtitle.NotEmpty())
                    {
                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary" Style="@($"font-size: {subtitleFontSize}; line-height: 1.2;")">
                            @Subtitle
                        </MudText>
                    }
                </div>
                @if (ButtonAction || IsDesktop)
                {
                    <MudSpacer></MudSpacer>
                }
                @if (ActionFragment != null)
                {
                    <div style="@(ButtonAction || IsDesktop ? "display: contents;" : "width: 100%; display: flex;")">
                        @ActionFragment
                    </div>
                }
            </MudToolBar>
            @if (Description.NotEmpty())
            {
                <div style="text-align: justify;" class="mt-2">
                    <MudText Typo="@(AppStateStatic.Size == Size.Small ? Typo.caption : Typo.body1)" Align="Align.Justify"
                             Style="@($"line-height: {(IsDesktop ? "1.2" : "1.0")}; letter-spacing: {(IsDesktop ? "inherit" : "normal")};")">
                        @Description
                    </MudText>
                </div>
            }
        </MudPaper>
    }
    <div class="@BodyClass">
        @BodyFragment
    </div>
}

@code {
    [Parameter][EditorRequired] public string? Title { get; set; }
    [Parameter] public string? Subtitle { get; set; }
    [Parameter] public string? Description { get; set; }

    [Parameter] public Color Color { get; set; } = MudBlazor.Color.Primary;
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Image { get; set; }
    [Parameter] public string? ImageStyle { get; set; }

    [Parameter] public bool ShowHead { get; set; } = true;
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public string? PaperClass { get; set; } = "mb-4 pa-2";
    [Parameter] public string? BodyClass { get; set; } = "mb-4";

    [Parameter] public RenderFragment? ActionFragment { get; set; }
    [Parameter][EditorRequired] public RenderFragment? BodyFragment { get; set; }

    [Parameter] public bool ButtonAction { get; set; } = true;

    private bool IsDesktop => Breakpoint > Breakpoint.Xs;
    private string imageSize => AppStateStatic.Size == Size.Small ? "20px" : "24px";
    private string titleFontSize => AppStateStatic.Size == Size.Small ? "20px" : "24px";
    private string subtitleFontSize => AppStateStatic.Size == Size.Small ? "13.5px" : "16px";

    private string GetImageStyle()
    {
        return ImageStyle ?? $"max-height: {imageSize}; max-width: {imageSize}; width: 100%; vertical-align: top;";
    }
}
