@using SD.Shared.Models.Auth
@using SD.Shared.Models.Support;
@using SD.WEB.Modules.Support.Component
@using SD.WEB.Modules.Support.Core;
@using System.Security.Claims
@using Toolbelt.Blazor.PWA.Updater

@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject ILogger<MainLayout> Logger
@inject INotificationService Toast
@inject IJSRuntime JsRuntime
@inject TicketApi TicketApi

<MediaQueryList>
    <Div Position="Position.Relative">
        <Layout Sider="true" Style="height: var(--app-height);">
            <LayoutSider>
                <LayoutSiderContent>
                    <NavMenu />
                </LayoutSiderContent>
            </LayoutSider>
            <Layout>
                <LayoutHeader Fixed="true">
                    <HeadLayout IsAuthenticated="IsAuthenticated"></HeadLayout>
                </LayoutHeader>
                <LayoutContent Style="overflow-y: auto; overflow-x: hidden;">
                    <Container Fluid="true" Padding="Padding.Is2">
                        <ErrorBoundary @ref="boundary">
                            <ChildContent>
                                @Body
                            </ChildContent>
                            <ErrorContent Context="ex">
                                @if (AppStateStatic.Language == Language.ptBR | AppStateStatic.Language == Language.ptPT)
                                {
                                    <Alert Color="Color.Danger" Visible="true">
                                        <AlertDescription>
                                            <Blazorise.Icon Name="FontAwesomeIcons.Bug"></Blazorise.Icon> Não foi possível processar essa operação. Para abrir um ticket de suporte, <Blazorise.Link onclick="@(()=>SubmitForm(ex))" style="cursor: pointer;">clique aqui</Blazorise.Link>
                                        </AlertDescription>
                                    </Alert>
                                }
                                else
                                {
                                    <Alert Color="Color.Danger" Visible="true">
                                        <AlertDescription>
                                            <Blazorise.Icon Name="FontAwesomeIcons.Bug"></Blazorise.Icon> This operation could not be processed. To open a support ticket, <Blazorise.Link onclick="@(()=>SubmitForm(ex))" style="cursor: pointer;">click here</Blazorise.Link>
                                        </AlertDescription>
                                    </Alert>
                                }
                            </ErrorContent>
                        </ErrorBoundary>
                    </Container>
                </LayoutContent>
                <LayoutFooter Fixed="true" Display="Display.Block.None.OnWidescreen">
                    <Bar Mode="BarMode.Horizontal" Breakpoint="Breakpoint.Mobile" CollapseMode="BarCollapseMode.Small" Background="Background.Secondary" ThemeContrast="ThemeContrast.Dark"
                         Padding="Padding.Is0.FromBottom.Is0.FromTop" Style="text-align: center; display: block;">
                        <BarBrand Class="me-0">
                            <Button Color="GetColor(TypeButton.Home)" To="/" Type="ButtonType.Link" title="@WEB.Resources.Menu.Home" Size="Size.Small" Style="line-height: 1.3;">
                                <Blazorise.Icon Name="FontAwesomeIcons.Home" />
                                <span style="display: block; font-size: 0.60rem;">@WEB.Resources.Menu.Home</span>
                            </Button>
                            <Button Color="GetColor(TypeButton.Profile)" To="/profile" Type="ButtonType.Link" title="@WEB.Resources.Menu.Profile" Size="Size.Small" Style="line-height: 1.3;">
                                <BarIcon IconName="FontAwesomeIcons.UserCircle" />
                                <span style="display: block; font-size: 0.60rem;">@WEB.Resources.Menu.Profile</span>
                            </Button>
                            <Button Color="GetColor(TypeButton.Providers)" To="/providers" Type="ButtonType.Link" title="@WEB.Resources.Menu.Providers" Size="Size.Small" Style="line-height: 1.3;">
                                <BarIcon IconName="FontAwesomeIcons.PlayCircle" />
                                <span style="display: block; font-size: 0.60rem;">@WEB.Resources.Menu.Providers</span>
                            </Button>
                            <Button Color="GetColor(TypeButton.Suggestions)" To="/suggestions" Type="ButtonType.Link" title="@WEB.Resources.Menu.Suggestions" Size="Size.Small" Style="line-height: 1.3;">
                                <BarIcon IconName="FontAwesomeIcons.ListOl" />
                                <span style="display: block; font-size: 0.60rem;">@WEB.Resources.Menu.Suggestions</span>
                            </Button>
                            <AuthorizeView Roles="administrator">
                                <Authorized>
                                    <Button Color="GetColor(TypeButton.Administrator)" To="/administrator" Type="ButtonType.Link" title="Administrator" Size="Size.Small" Style="line-height: 1.3;">
                                        <BarIcon IconName="FontAwesomeIcons.UserTie" />
                                        <span style="display: block; font-size: 0.60rem;">Administrator</span>
                                    </Button>
                                </Authorized>
                            </AuthorizeView>
                        </BarBrand>
                    </Bar>
                </LayoutFooter>
            </Layout>
        </Layout>
    </Div>
</MediaQueryList>

<NotificationProvider Location="NotificationLocation.End" DefaultInterval="10000" />
<PWAUpdater Text="@GlobalTranslations.PWAUpdaterText" ButtonCaption="@GlobalTranslations.PWAUpdaterButton" />

<Offcanvas @ref="offcanvasRef" Placement="Placement.End">
    <OffcanvasHeader>
        @SD.WEB.Modules.Support.Resources.Translations.HelpSupport
        <CloseButton Clicked="@(()=>ShowFeedback(false))" />
    </OffcanvasHeader>
    <OffcanvasBody>
        <Tabs RenderMode="TabsRenderMode.LazyLoad" @bind-SelectedTab="@Tab" Pills="true" FullWidth="true">
            <Items>
                <Tab Name="Home">
                    @SD.WEB.Modules.Support.Resources.Translations.Home
                </Tab>
                <Tab Name="Updates">
                    @SD.WEB.Modules.Support.Resources.Translations.Updates
                </Tab>
                <Tab Name="Feedback">
                    @SD.WEB.Modules.Support.Resources.Translations.Feedback
                </Tab>
            </Items>
            <Content>
                <TabPanel Name="Home" Padding="Padding.Is3.FromTop">
                    <DownloadComponent></DownloadComponent>
                </TabPanel>
                <TabPanel Name="Updates" Padding="Padding.Is3.FromTop">
                    <AnnouncementComponent></AnnouncementComponent>
                </TabPanel>
                <TabPanel Name="Feedback" Padding="Padding.Is3.FromTop">
                    <FeedbackComponent IsAuthenticated="@IsAuthenticated" UserId="@UserId"></FeedbackComponent>
                </TabPanel>
            </Content>
        </Tabs>
    </OffcanvasBody>
</Offcanvas>

@code {
    [CascadingParameter] protected Task<AuthenticationState> authenticationState { get; set; } = default!;

    public string? Tab { get; set; } = "Home";
    public string GetMargin => "me-4 mb-lg-4 mb-6";

    private enum TypeButton
    {
        Home, Profile, Providers, Suggestions, Support, Administrator
    }

    private TypeButton CurrentButton;

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
        AppStateStatic.ShowError = async (msg) => { await Toast.Error(msg); };
        AppStateStatic.ShowFeedback = (show) => { ShowFeedback(show); };

        ChangeCurrentButton(Navigation.Uri);

        StateHasChanged();
    }

    protected bool IsAuthenticated { get; set; } = false;
    protected string? UserId { get; set; }
    public ClaimsPrincipal? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (User == null && authenticationState is not null)
        {
            var authState = await authenticationState;

            User = authState?.User;
            IsAuthenticated = User?.Identity is not null && User.Identity.IsAuthenticated;
            UserId = User?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var region = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "region");

            if (region.NotEmpty())
            {
                AppStateStatic.ChangeRegion((Region)Enum.Parse(typeof(Region), region));
            }
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        ChangeCurrentButton(args.Location);

        StateHasChanged();
    }

    private void ChangeCurrentButton(string location)
    {
        if (location.Contains("/profile")) CurrentButton = TypeButton.Profile;
        else if (location.Contains("/providers")) CurrentButton = TypeButton.Providers;
        else if (location.Contains("/suggestions")) CurrentButton = TypeButton.Suggestions;
        else if (location.Contains("/support")) CurrentButton = TypeButton.Support;
        else if (location.Contains("/administrator")) CurrentButton = TypeButton.Administrator;
        else CurrentButton = TypeButton.Home;
    }

    private Color GetColor(TypeButton type)
    {
        if (CurrentButton == type)
            return Color.Dark;
        else
            return Color.Secondary;
    }

    ErrorBoundary? boundary;

    protected override void OnParametersSet()
    {
        boundary?.Recover();
    }

    public async Task SubmitForm(Exception exc)
    {
        try
        {
            var Ticket = new TicketModel();

            Ticket.TicketType = TicketType.BugReport;
            Ticket.Initialize(UserId);
            Ticket.Title = exc.Message ?? "unknown error";
            Ticket.Description = exc.StackTrace;

            await TicketApi.Insert(Ticket);

            await Toast.Success(GlobalTranslations.OperationCompleted);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    [JSInvokable]
    public static void RegistrationSuccessful(TempClientePaddle client)
    {
        AppStateStatic.RegistrationSuccessful?.Invoke(client);
    }

    [JSInvokable]
    public static void ShowError(string error)
    {
        AppStateStatic.ShowError?.Invoke(error);
    }

    private Offcanvas? offcanvasRef;

    private void ShowFeedback(bool show)
    {
        if (show)
            offcanvasRef?.Show();
        else
            offcanvasRef?.Hide();
    }
}