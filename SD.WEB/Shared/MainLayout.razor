@using System.Security.Claims
@using SD.WEB.Modules.Subscription.Core
@using SD.WEB.Properties
@using Toolbelt.Blazor.PWA.Updater
@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject INotificationService Toast
@inject IJSRuntime JsRuntime
@inject PaddleConfigurationApi PaddleApi

<Div Position="Position.Relative">
    <Layout Style="height: var(--app-height);">
        <LayoutHeader>
            <HeadLayout IsAuthenticated="IsAuthenticated"></HeadLayout>
        </LayoutHeader>
        <LayoutContent Style="overflow-y: auto; overflow-x: hidden;">
            <Container Fluid="true" Padding="Padding.Is2">
                @Body
            </Container>
            <FooterComponent></FooterComponent>
            <Container Fluid="true">
                <Row Margin="Margin.Is3.OnY" Padding="Padding.Is3.FromTop" Border="Border.Secondary.OnTop">
                    <Span TextColor="TextColor.Muted" TextAlignment="TextAlignment.Center">
                        © 2021-@DateTime.Now.Year - DRMA Tech. All rights reserved.
                    </Span>
                </Row>
            </Container>
        </LayoutContent>
        <LayoutFooter Display="Display.Block.None.OnWidescreen">
            <Bar Mode="BarMode.Horizontal" Breakpoint="Breakpoint.Mobile" CollapseMode="BarCollapseMode.Small" Background="Background.Secondary" ThemeContrast="ThemeContrast.Dark"
                 Padding="Padding.Is0.FromBottom.Is0.FromTop" Style="text-align: center; display: block;">
                <BarBrand Class="me-0">
                    <Button Color="GetColor(TypeButton.Home)" To="/" Type="@ButtonType.Link" title="@Menu.Home" Size="Size.Small" Style="line-height: 1.3;">
                        <Blazorise.Icon Name="FontAwesomeIcons.Home"/>
                        <span style="display: block; font-size: 0.60rem;">@Menu.Home</span>
                    </Button>
                    <Button Color="GetColor(TypeButton.Profile)" To="/profile" Type="@ButtonType.Link" title="@Menu.Profile" Size="Size.Small" Style="line-height: 1.3;">
                        <BarIcon IconName="FontAwesomeIcons.UserCircle"/>
                        <span style="display: block; font-size: 0.60rem;">@Menu.Profile</span>
                    </Button>
                    <Button Color="GetColor(TypeButton.Providers)" To="/providers" Type="@ButtonType.Link" title="@Menu.Platforms" Size="Size.Small" Style="line-height: 1.3;">
                        <BarIcon IconName="FontAwesomeIcons.PlayCircle"/>
                        <span style="display: block; font-size: 0.60rem;">@Menu.Platforms</span>
                    </Button>
                    <Button Color="GetColor(TypeButton.Suggestions)" To="/suggestions" Type="@ButtonType.Link" title="@Menu.Collections" Size="Size.Small" Style="line-height: 1.3;">
                        <BarIcon IconName="FontAwesomeIcons.LayerGroup"/>
                        <span style="display: block; font-size: 0.60rem;">@Menu.Collections</span>
                    </Button>
                    <Button Color="GetColor(TypeButton.Support)" To="/support" Type="@ButtonType.Link" title="@Menu.Support" Size="Size.Small" Style="line-height: 1.3;">
                        <BarIcon IconName="FontAwesomeIcons.Headset"/>
                        <span style="display: block; font-size: 0.60rem;">@Menu.Support</span>
                    </Button>
                </BarBrand>
            </Bar>
        </LayoutFooter>
    </Layout>
</Div>

<NotificationProvider Location="NotificationLocation.End" DefaultInterval="10000"/>
<PWAUpdater Text="@GlobalTranslations.PWAUpdaterText" ButtonCaption="@GlobalTranslations.PWAUpdaterButton"/>

@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    public string GetMargin => "me-4 mb-lg-4 mb-6";

    private enum TypeButton
    {
        Home,
        Profile,
        Providers,
        Suggestions,
        Support
    }

    private TypeButton _currentButton;

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
        AppStateStatic.ShowError = async msg => { await Toast.Error(msg); };

        ChangeCurrentButton(Navigation.Uri);

        StateHasChanged();
    }

    protected bool IsAuthenticated { get; set; }
    protected string? UserId { get; set; }
    public ClaimsPrincipal? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (User == null)
        {
            var authState = await AuthenticationState;

            User = authState.User;
            IsAuthenticated = User?.Identity is not null && User.Identity.IsAuthenticated;
            UserId = User?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var region = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "region");

            //get new region by IP
            if (region.Empty())
            {
                region = await PaddleApi.GetCountry();

                region ??= nameof(Region.US);

                await JsRuntime.InvokeAsync<string>("SetLocalStorage", "region", region);
            }

            AppStateStatic.ChangeRegion(AppStateStatic.GetValidRegion(region));
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        ChangeCurrentButton(args.Location);

        StateHasChanged();
    }

    private void ChangeCurrentButton(string location)
    {
        if (location.Contains("/profile")) _currentButton = TypeButton.Profile;
        else if (location.Contains("/providers")) _currentButton = TypeButton.Providers;
        else if (location.Contains("/suggestions")) _currentButton = TypeButton.Suggestions;
        else if (location.Contains("/support")) _currentButton = TypeButton.Support;
        else _currentButton = TypeButton.Home;
    }

    private Color GetColor(TypeButton type)
    {
        if (_currentButton == type)
            return Color.Dark;
        return Color.Secondary;
    }

    [JSInvokable]
    public static void RegistrationSuccessful(TempClientePaddle client)
    {
        AppStateStatic.RegistrationSuccessful?.Invoke(client);
    }

    [JSInvokable]
    public static void ShowError(string error)
    {
        AppStateStatic.ShowError?.Invoke(error);
    }

    //https://swharden.com/blog/2020-12-29-blazor-build-info/
    public static string BuildDateString()
    {
        try
        {
            return Resources.BuildDate.ReplaceLineEndings("");
        }
        catch (Exception)
        {
            return "Version Error";
        }
    }

}