@using System.Globalization
@using System.Text.Json
@using SD.Shared.Models.List.Tmdb
@using SD.WEB.Modules.Collections.Core
@using SD.WEB.Modules.Collections.Resources
@using SD.WEB.Modules.Platform.Core
@inherits ComponentCore<StreamingComponent>

@inject AllProvidersApi AllProvidersApi
@inject TmdbApi TmdbApi
@inject IJSRuntime Js

<RenderControl Core="Core" Model="Providers" ExpressionEmpty="@((MediaProviders? obj) => obj == null)">
    @{
        var hasProvider = false;

        if (Providers?.GetFreeListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;

            <MudStack Row="true" Spacing="2">
                <MudPaper Outlined="true" Height="50px" Width="150px" Style="align-content: center; text-align: center;">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle1">
                        @Translations.DeliveryModelFree
                    </MudText>
                </MudPaper>
                @foreach (var item in Providers.GetFreeListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <MudLink Href="@provider.link" Target="_blank">
                            <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo_path)" FallbackSrc="images/no-image.png" Alt="@item.provider_name" Style="width: 50px;"></MudImage>
                            <AuthorizeView Roles="administrator">
                                <Authorized>
                                    @if (AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.All(a => a != DeliveryModel.FREE))
                                    {
                                        <span>false</span>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </MudLink>
                    }
                }
            </MudStack>
        }

        if (Providers?.GetAdsListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;

            <MudStack Row="true" Spacing="2">
                <MudPaper Outlined="true" Height="50px" Width="150px" Style="align-content: center; text-align: center;">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle1">
                        @Translations.DeliveryModelAds
                    </MudText>
                </MudPaper>
                @foreach (var item in Providers.GetAdsListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <MudLink Href="@provider.link" Target="_blank">
                            <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo_path)" FallbackSrc="images/no-image.png" Alt="@item.provider_name" Style="width: 50px;"></MudImage>
                            <AuthorizeView Roles="administrator">
                                <Authorized>
                                    @if (AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.All(a => a != DeliveryModel.AVOD))
                                    {
                                        <span>false</span>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </MudLink>
                    }
                }
            </MudStack>
        }

        if (Providers?.GetFlatRateListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;

            <MudStack Row="true" Spacing="2">
                <MudPaper Outlined="true" Height="50px" Width="150px" Style="align-content: center; text-align: center;">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle1">
                        @Translations.DeliveryModelFlatRate
                    </MudText>
                </MudPaper>
                @foreach (var item in Providers.GetFlatRateListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <MudLink Href="@provider.link" Target="_blank">
                            <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo_path)" FallbackSrc="images/no-image.png" Alt="@item.provider_name" Style="width: 50px;"></MudImage>
                            <AuthorizeView Roles="administrator">
                                <Authorized>
                                    @if (AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.All(a => a != DeliveryModel.SVOD))
                                    {
                                        <span>false</span>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </MudLink>
                    }
                }
            </MudStack>
        }

        if (Providers?.GetFlatRateBuyListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;

            <MudStack Row="true" Spacing="2">
                <MudPaper Outlined="true" Height="50px" Width="150px" Style="align-content: center; text-align: center;">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle1">
                        @Translations.DeliveryModelFlatRateBuy
                    </MudText>
                </MudPaper>
                @foreach (var item in Providers.GetFlatRateBuyListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <MudLink Href="@provider.link" Target="_blank">
                            <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo_path)" FallbackSrc="images/no-image.png" Alt="@item.provider_name" Style="width: 50px;"></MudImage>
                            <AuthorizeView Roles="administrator">
                                <Authorized>
                                    @if (AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.All(a => a != DeliveryModel.PVOD))
                                    {
                                        <span>false</span>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </MudLink>
                    }
                }
            </MudStack>
        }

        if (Providers?.GetRentListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;

            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                <MudPaper Outlined="true" Height="50px" Width="150px" Style="align-content: center; text-align: center;">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle1">
                        @Translations.DeliveryModelRent
                    </MudText>
                </MudPaper>
                @foreach (var item in Providers.GetRentListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <MudLink Href="@provider.link" Target="_blank">
                            <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo_path)" FallbackSrc="images/no-image.png" Alt="@item.provider_name" Style="width: 50px;"></MudImage>
                            <AuthorizeView Roles="administrator">
                                <Authorized>
                                    @if (AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.All(a => a != DeliveryModel.TVOD))
                                    {
                                        <span>false</span>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </MudLink>
                    }
                }
            </MudStack>
        }

        if (Providers?.GetBuyListProviders(AppStateStatic.Region).Any() ?? false)
        {
            hasProvider = true;

            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                <MudPaper Outlined="true" Height="50px" Width="150px" Style="align-content: center; text-align: center;">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle1">
                        @Translations.DeliveryModelBuy
                    </MudText>
                </MudPaper>
                @foreach (var item in Providers.GetBuyListProviders(AppStateStatic.Region))
                {
                    @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                    {
                        var provider = AllProviders.Items.Single(s => s.id == item.provider_id.ToString());
                        <MudLink Href="@provider.link" Target="_blank">
                            <MudImage Src="@(TmdbOptions.OriginalPosterPath + item.logo_path)" FallbackSrc="images/no-image.png" Alt="@item.provider_name" Style="width: 50px;"></MudImage>
                            <AuthorizeView Roles="administrator">
                                <Authorized>
                                    @if (AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.All(a => a != DeliveryModel.TVOD))
                                    {
                                        <span>false</span>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </MudLink>
                    }
                }
            </MudStack>
        }

        @if (!hasProvider)
        {
            @if (ReleaseDate?.Date > DateTime.Now.Date)
            {
                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Dense="true" Class="mb-2">
                    @Translations.TitleNotReleased
                </MudAlert>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Dense="true"Class="mb-2">
                    @(string.Format(Translations.TitleNotAvailable, AppStateStatic.Region.GetName()))
                </MudAlert>
            }

            @if (AppStateStatic.Region.GetName().Empty())
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined"Dense="true"Class="mb-2">
                    <MudText Typo="Typo.h6">There was an error detecting your region</MudText>
                    <MudText Typo="Typo.body1">Please contact support and provide the following information:</MudText>
                    <MudText Typo="Typo.body1">CurrentRegion: @RegionInfo.CurrentRegion.Name</MudText>
                    <MudText Typo="Typo.body1">CurrentCulture: @CultureInfo.CurrentCulture.Name</MudText>
                </MudAlert>
            }
        }

        @if (!string.IsNullOrEmpty(Homepage))
        {
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                <MudPaper Elevation="2" Height="50px" Width="150px" Style="align-content: center; text-align: center;">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle1">
                        @Translations.RelatedLinks
                    </MudText>
                </MudPaper>
                <MudLink Href="@Homepage" Target="_blank" Color="Color.Secondary">
                    @(new Uri(Homepage).Host)
                </MudLink>
            </MudStack>
        }

        // <AuthorizeView Roles="administrator">
        //     <Authorized>
        //         <Button Color="Color.Secondary" Clicked="@Atualizar" Disabled="false" Margin="Margin.Is2.FromTop">Atualizar</Button>
        //     </Authorized>
        // </AuthorizeView>
    }
</RenderControl>

@code {
    [Parameter] public string? TmdbId { get; set; }
    [Parameter] public MediaType? Type { get; set; }
    [Parameter] public string? Homepage { get; set; }
    [Parameter] public DateTime? ReleaseDate { get; set; }

    public RenderControlCore<MediaProviders?>? Core { get; set; } = new();
    private MediaProviders? Providers { get; set; }
    private AllProviders? AllProviders { get; set; }

    protected override async Task LoadDataRender()
    {
        AllProviders = await AllProvidersApi.GetAll(null);

        Core?.LoadingStarted?.Invoke();
        Providers = await TmdbApi.GetWatchProvidersList(TmdbId, Type);
        Core?.LoadingFinished?.Invoke(Providers);
    }

    private async Task Atualizar()
    {
        if (Providers == null) return;

        foreach (var item in Providers.GetFreeListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            const DeliveryModel model = DeliveryModel.FREE;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetAdsListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            const DeliveryModel model = DeliveryModel.AVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetFlatRateListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            const DeliveryModel model = DeliveryModel.SVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetBuyListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            const DeliveryModel model = DeliveryModel.TVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetRentListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            const DeliveryModel model = DeliveryModel.TVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetFlatRateBuyListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            const DeliveryModel model = DeliveryModel.PVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        if (AllProviders != null)
        {
            await Js.InvokeVoidAsync("window.localStorage.setItem", "AllProviders", JsonSerializer.Serialize(AllProviders));
        }
    }

}